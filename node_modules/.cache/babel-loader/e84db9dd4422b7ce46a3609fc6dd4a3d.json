{"ast":null,"code":"export default function (p) {\n  var reset1 = function reset1() {\n    p.myCustomRedrawAccordingToNewPropsHandler = function (props) {\n      if (props.p5Props) {\n        p.ButtonClicked = props.p5Props.start;\n        p.ButtonClickedR = props.p5Props.reset;\n        p.degree = props.p5Props.degree; //this should be entered by the user check\n\n        p.theta = p.degree * Math.PI / 180;\n        p.xPosition = p.height - 1 / Math.tan(p.theta);\n        p.radius = props.p5Props.radius; //input\n\n        p.ellipseX = Math.sin(p.theta) * p.radius;\n        p.ellipseY = 100 - Math.cos(p.theta) * p.radius;\n        p.njteh = 100 - p.radius / Math.cos(p.theta);\n        p.slope = Math.tan(p.theta);\n        p.g = props.p5Props.Gravitational; //input\n\n        p.Myu = props.p5Props.coefficient; //input\n\n        p.v = 5;\n        p.acc = p.g * Math.cos(p.theta) - p.Myu * Math.sin(p.theta); //formula with njteh\n\n        p.vx = 0;\n      }\n    };\n  };\n\n  p.preload = function () {\n    reset1();\n  };\n\n  p.setup = function () {\n    p.createCanvas(p.windowWidth / 1.5, p.windowHeight / 1.5);\n  };\n\n  p.draw = function () {\n    p.background(200, 250, 100);\n    p.fill(\"blue\");\n    p.triangle(0, 100, 0, p.height, p.xPosition, p.height); //for the most part\n\n    p.fill(\"red\");\n    p.ellipse(p.ellipseX, p.ellipseY, p.radius * 2);\n\n    if (p.ButtonClicked) {\n      p.Calculate();\n    } else if (!p.ButtonClicked && p.ButtonClickedR) {\n      reset1();\n    }\n  };\n\n  p.Calculate = function () {\n    p.vx = p.vx + p.acc * Math.cos(p.theta); //    p.vy= p.acc * Math.sin(p.theta);\n\n    p.ellipseX += p.vx / 60; //the physics is incorrect here the y direction acceleretion is not added\n\n    p.ellipseY = p.slope * p.ellipseX + p.njteh;\n  };\n\n  p.windowResized = function () {\n    p.resizeCanvas(p.windowWidth / 1.5, p.windowHeight / 1.5);\n  };\n}","map":{"version":3,"sources":["C:\\Users\\Mgo\\PhpstormProjects\\untitled\\src\\Component\\sketch3.js"],"names":["p","reset1","myCustomRedrawAccordingToNewPropsHandler","props","p5Props","ButtonClicked","start","ButtonClickedR","reset","degree","theta","Math","PI","xPosition","height","tan","radius","ellipseX","sin","ellipseY","cos","njteh","slope","g","Gravitational","Myu","coefficient","v","acc","vx","preload","setup","createCanvas","windowWidth","windowHeight","draw","background","fill","triangle","ellipse","Calculate","windowResized","resizeCanvas"],"mappings":"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","sourcesContent":["export default function(p) {\r\n  const reset1 = () => {\r\n    p.myCustomRedrawAccordingToNewPropsHandler = function(props) {\r\n      if (props.p5Props) {\r\n        p.ButtonClicked = props.p5Props.start;\r\n        p.ButtonClickedR = props.p5Props.reset;\r\n        p.degree = props.p5Props.degree; //this should be entered by the user check\r\n        p.theta = (p.degree * Math.PI) / 180;\r\n        p.xPosition = p.height-1 / Math.tan(p.theta);\r\n        p.radius = props.p5Props.radius; //input\r\n        p.ellipseX = Math.sin(p.theta) * p.radius;\r\n        p.ellipseY = 100 - Math.cos(p.theta) * p.radius;\r\n        p.njteh = 100 - p.radius / Math.cos(p.theta);\r\n        p.slope = Math.tan(p.theta);\r\n        p.g = props.p5Props.Gravitational; //input\r\n        p.Myu = props.p5Props.coefficient; //input\r\n        p.v = 5;\r\n        p.acc = p.g * Math.cos(p.theta) - p.Myu * Math.sin(p.theta); //formula with njteh\r\n        p.vx = 0;\r\n      }\r\n    };\r\n  };\r\n  p.preload = () => {\r\n   reset1();\r\n  };\r\n\r\n  p.setup = () => {\r\n    p.createCanvas(p.windowWidth / 1.5, p.windowHeight / 1.5);\r\n  };\r\n\r\n  p.draw = function() {\r\n    p.background(200, 250, 100);\r\n\r\n    p.fill(\"blue\");\r\n    p.triangle(0, 100, 0, p.height, p.xPosition, p.height); //for the most part\r\n    p.fill(\"red\");\r\n    p.ellipse(p.ellipseX, p.ellipseY, p.radius * 2);\r\n    if (p.ButtonClicked) {\r\n    p.Calculate();}else if(!p.ButtonClicked && p.ButtonClickedR ){\r\n      reset1();\r\n    }\r\n  };\r\n\r\n  p.Calculate = () => {\r\n    p.vx = p.vx + p.acc * Math.cos(p.theta) ;\r\n//    p.vy= p.acc * Math.sin(p.theta);\r\n    p.ellipseX += p.vx / 60 ;                        //the physics is incorrect here the y direction acceleretion is not added\r\n    p.ellipseY = p.slope * p.ellipseX  + p.njteh;\r\n\r\n  };\r\n  p.windowResized = () => {\r\n    p.resizeCanvas(p.windowWidth / 1.5, p.windowHeight / 1.5);\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}