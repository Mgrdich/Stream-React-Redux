{"ast":null,"code":"export default function (p) {\n  p.preload = function () {\n    reset1();\n  };\n\n  var reset1 = function reset1() {\n    p.myCustomRedrawAccordingToNewPropsHandler = function (props) {\n      if (props.p5Props) {\n        p.ButtonClicked = props.p5Props.start;\n        p.ButtonClickedR = props.p5Props.reset;\n        p.degree = 45; //this should be entered by the user check\n\n        p.theta = p.degree * Math.PI / 180;\n        p.xPosition = 500 / Math.tan(p.theta);\n        p.radius = 25; //input\n\n        p.ellipseX = Math.sin(p.theta) * p.radius;\n        p.ellipseY = 100 - Math.cos(p.theta) * p.radius;\n        p.njteh = 100 - p.radius / Math.cos(p.theta);\n        p.slope = Math.tan(p.theta);\n        p.g = 10; //input\n\n        p.Myu = 0.1; //input\n\n        p.v = 5;\n        p.acc = p.g * Math.cos(p.theta) - p.Myu * Math.sin(p.theta); //formula with njteh\n\n        p.vx = 0;\n      }\n    };\n  };\n\n  p.setup = function () {\n    p.createCanvas(p.windowWidth / 1.5, p.windowHeight / 1.5);\n  };\n\n  p.draw = function () {\n    p.background(200, 250, 100);\n    p.fill(\"blue\");\n    p.triangle(0, 100, 0, 600, p.xPosition, 600); //for the most part\n\n    p.fill(\"red\");\n    p.ellipse(p.ellipseX, p.ellipseY, p.radius * 2);\n\n    if (p.ButtonClicked) {\n      p.Calculate();\n    } else if (!p.ButtonClicked && p.ButtonClickedR) {\n      reset1();\n    }\n  };\n\n  p.Calculate = function () {\n    p.vx = p.vx + p.acc * Math.cos(p.theta);\n    p.ellipseX += p.vx / 60;\n    p.ellipseY = p.slope * p.ellipseX + p.njteh;\n  };\n\n  p.windowResized = function () {\n    p.resizeCanvas(p.windowWidth / 1.5, p.windowHeight / 1.5);\n  };\n}","map":{"version":3,"sources":["C:\\Users\\Mgo\\PhpstormProjects\\untitled\\src\\Component\\sketch3.js"],"names":["p","preload","reset1","myCustomRedrawAccordingToNewPropsHandler","props","p5Props","ButtonClicked","start","ButtonClickedR","reset","degree","theta","Math","PI","xPosition","tan","radius","ellipseX","sin","ellipseY","cos","njteh","slope","g","Myu","v","acc","vx","setup","createCanvas","windowWidth","windowHeight","draw","background","fill","triangle","ellipse","Calculate","windowResized","resizeCanvas"],"mappings":"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","sourcesContent":["export default function(p) {\r\n  p.preload = () => {\r\n   reset1();\r\n  };\r\n  const reset1 = () => {\r\n    p.myCustomRedrawAccordingToNewPropsHandler = function(props) {\r\n      if (props.p5Props) {\r\n        p.ButtonClicked = props.p5Props.start;\r\n        p.ButtonClickedR = props.p5Props.reset;\r\n        p.degree = 45; //this should be entered by the user check\r\n        p.theta = (p.degree * Math.PI) / 180;\r\n        p.xPosition = 500 / Math.tan(p.theta);\r\n        p.radius = 25; //input\r\n        p.ellipseX = Math.sin(p.theta) * p.radius;\r\n        p.ellipseY = 100 - Math.cos(p.theta) * p.radius;\r\n        p.njteh = 100 - p.radius / Math.cos(p.theta);\r\n        p.slope = Math.tan(p.theta);\r\n        p.g = 10; //input\r\n        p.Myu = 0.1; //input\r\n        p.v = 5;\r\n        p.acc = p.g * Math.cos(p.theta) - p.Myu * Math.sin(p.theta); //formula with njteh\r\n        p.vx = 0;\r\n      }\r\n    };\r\n  };\r\n  p.setup = () => {\r\n    p.createCanvas(p.windowWidth / 1.5, p.windowHeight / 1.5);\r\n  };\r\n\r\n  p.draw = function() {\r\n    p.background(200, 250, 100);\r\n\r\n    p.fill(\"blue\");\r\n    p.triangle(0, 100, 0, 600, p.xPosition, 600); //for the most part\r\n    p.fill(\"red\");\r\n    p.ellipse(p.ellipseX, p.ellipseY, p.radius * 2);\r\n    if (p.ButtonClicked) {\r\n    p.Calculate();}else if(!p.ButtonClicked && p.ButtonClickedR ){\r\n      reset1();\r\n    }\r\n  };\r\n\r\n  p.Calculate = () => {\r\n    p.vx = p.vx + p.acc * Math.cos(p.theta);\r\n    p.ellipseX += p.vx / 60;\r\n    p.ellipseY = p.slope * p.ellipseX + p.njteh;\r\n  };\r\n  p.windowResized = () => {\r\n    p.resizeCanvas(p.windowWidth / 1.5, p.windowHeight / 1.5);\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}