{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Mgo\\\\PhpstormProjects\\\\untitled\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Mgo\\\\PhpstormProjects\\\\untitled\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nexport function FetchText(Location) {\n  var Global;\n\n  function f() {\n    return _f.apply(this, arguments);\n  }\n\n  function _f() {\n    _f = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return axios.get(Location);\n\n            case 2:\n              response = _context.sent;\n              Global = response.data; //console.log(Global);\n\n              return _context.abrupt(\"return\", Global);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n    return _f.apply(this, arguments);\n  }\n\n  return f;\n}","map":{"version":3,"sources":["C:\\Users\\Mgo\\PhpstormProjects\\untitled\\src\\utility\\FetchText.js"],"names":["axios","FetchText","Location","Global","f","get","response","data"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAQ,SAAUC,SAAV,CAAoBC,QAApB,EAA8B;AACtC,MAAIC,MAAJ;;AADsC,WAErBC,CAFqB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,6BAErC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACyBJ,KAAK,CAACK,GAAN,CAAUH,QAAV,CADzB;;AAAA;AACQI,cAAAA,QADR;AAEGH,cAAAA,MAAM,GAAGG,QAAQ,CAACC,IAAlB,CAFH,CAGG;;AAHH,+CAIQJ,MAJR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFqC;AAAA;AAAA;;AAUtC,SAAOC,CAAP;AACC","sourcesContent":["import axios from 'axios'\r\n\r\nexport  function  FetchText(Location) {\r\nlet Global ;\r\n async  function f(){\r\n   const response = await axios.get(Location);\r\n    Global = response.data;\r\n    //console.log(Global);\r\n  return Global;\r\n }\r\n\r\n\r\nreturn f;\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}