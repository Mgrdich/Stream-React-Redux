{"ast":null,"code":"import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Transition, CSSTransition } from 'react-transition-group';\nimport ReactDOM, { findDOMNode } from 'react-dom';\nimport { Popper, Target, Manager, Arrow } from 'react-popper';\nimport NumericInput from 'react-numeric-input';\nimport { NavLink } from 'react-router-dom';\nimport outy from 'outy';\nexport { cssTransition, toast, ToastContainer } from 'react-toastify';\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nvar Animation =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Animation, _Component);\n\n  function Animation(props) {\n    var _this;\n\n    _classCallCheck(this, Animation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Animation).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"updatePredicate\", function () {\n      var windowHeight = window.innerHeight;\n      var scroll = window.scrollY;\n      var docHeight = document.documentElement.offsetHeight;\n\n      if (windowHeight + scroll - 100 > _this.getOffset(_this.elemRef.current) && scroll < _this.getOffset(_this.elemRef.current) || windowHeight + scroll - 100 > _this.getOffset(_this.elemRef.current) + _this.elemRef.current.clientHeight && scroll < _this.getOffset(_this.elemRef.current) + _this.elemRef.current.clientHeight || windowHeight + scroll === docHeight && _this.getOffset(_this.elemRef.current) + 100 > docHeight) {\n        // if the predicate is true, change state\n        _this.setState({\n          isVisible: true\n        });\n      } else {\n        //  was the \"revealing\" fired at least once?\n        if (_this.state.revealed) {\n          return;\n        } else {\n          // if it wasn't, hide\n          _this.setState({\n            isVisible: false,\n            revealed: true\n          });\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStart\", function (e) {\n      _this.setState({\n        countIterations: _this.state.countIterations + 1\n      });\n\n      if (_this.props.onAnimationStart) {\n        _this.props.onAnimationStart();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleIteration\", function (e) {\n      if (_this.props.onAnimationIteration) {\n        _this.setState({\n          countIterations: _this.state.countIterations + 1\n        });\n\n        _this.props.onAnimationIteration();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEnd\", function (e) {\n      _this.setState({\n        countIterations: _this.state.countIterations + 1\n      });\n\n      if (_this.props.onAnimationEnd && _this.props.count === _this.state.countIterations) {\n        _this.props.onAnimationEnd();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getOffset\", function (elem) {\n      var box = elem.getBoundingClientRect();\n      var body = document.body;\n      var docEl = document.documentElement;\n      var scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop;\n      var clientTop = docEl.clientTop || body.clientTop || 0;\n      var top = box.top + scrollTop - clientTop;\n      return Math.round(top);\n    });\n\n    _this.state = {\n      isVisible: _this.props.reveal ? false : true,\n      revealed: _this.props.reveal ? false : true,\n      countIterations: 0\n    };\n    _this.elemRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(Animation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // add EL on window if the animation is to \"reveal\"\n      if (this.props.reveal) {\n        window.addEventListener(\"scroll\", this.updatePredicate);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.props.reveal) {\n        window.removeEventListener(\"scroll\", this.updatePredicate);\n      }\n    } // the function to judge whether the animation should be started\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          Tag = _this$props.tag,\n          type = _this$props.type,\n          duration = _this$props.duration,\n          delay = _this$props.delay,\n          count = _this$props.count,\n          reveal = _this$props.reveal,\n          infinite = _this$props.infinite,\n          style = _this$props.style,\n          children = _this$props.children,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"tag\", \"type\", \"duration\", \"delay\", \"count\", \"reveal\", \"infinite\", \"style\", \"children\"]);\n\n      var _this$state = this.state,\n          isVisible = _this$state.isVisible,\n          revealed = _this$state.revealed;\n      var styleObject = {\n        animationDuration: duration,\n        animationDelay: delay,\n        animationIterationCount: infinite ? false : count,\n        visibility: isVisible ? \"visible\" : \"hidden\",\n        animationName: type\n      };\n      var hiddenStyles = {\n        animationName: \"none\",\n        visibility: \"hidden\"\n      };\n      var getAllStyles = Object.assign(styleObject, style);\n      var classes = classNames(this.state.isVisible && \"animated\", // will this work?\n      type && type, infinite && \"infinite\", className);\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes,\n        style: isVisible && revealed ? getAllStyles : hiddenStyles,\n        ref: this.elemRef,\n        onAnimationStart: this.handleStart,\n        onAnimationIteration: this.handleIteration,\n        onAnimationEnd: this.handleEnd\n      }), children);\n    }\n  }]);\n\n  return Animation;\n}(Component);\n\nAnimation.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  type: PropTypes.string,\n  delay: PropTypes.string,\n  count: PropTypes.number,\n  onAnimationEnd: PropTypes.func,\n  onAnimationStart: PropTypes.func\n};\nAnimation.defaultProps = {\n  tag: \"div\",\n  reveal: false,\n  duration: 1,\n  count: 1\n};\n\nvar Alert =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Alert, _Component);\n\n  function Alert() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Alert);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Alert)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isOpen: true\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"closeAlert\", function () {\n      _this.setState({\n        isOpen: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnExit\", function (node) {\n      node.classList.add(\"fade\");\n      _this.props.onClose && _this.props.onClose();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnExited\", function (node) {\n      _this.props.onClosed && _this.props.onClosed();\n    });\n\n    return _this;\n  }\n\n  _createClass(Alert, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          className = _this$props.className,\n          color = _this$props.color,\n          children = _this$props.children,\n          dismiss = _this$props.dismiss;\n      var alertClasses = classNames(\"alert\", color && \"alert-\".concat(color), className);\n      var alertComponent;\n\n      if (dismiss) {\n        alertComponent = React.createElement(Transition, {\n          in: this.state.isOpen,\n          timeout: 150,\n          unmountOnExit: true,\n          onExit: function onExit(node) {\n            return _this2.handleOnExit(node);\n          },\n          onExited: function onExited(node) {\n            return _this2.handleOnExited(node);\n          }\n        }, React.createElement(\"div\", {\n          className: alertClasses,\n          role: \"alert\"\n        }, children, React.createElement(\"button\", {\n          onClick: this.closeAlert,\n          type: \"button\",\n          className: \"close\",\n          \"data-dismiss\": \"alert\",\n          \"aria-label\": \"Close\"\n        }, React.createElement(\"span\", {\n          \"aria-hidden\": \"true\"\n        }, \"\\xD7\"))));\n      } else {\n        alertComponent = React.createElement(\"div\", {\n          className: alertClasses,\n          role: \"alert\"\n        }, children);\n      }\n\n      return alertComponent;\n    }\n  }]);\n\n  return Alert;\n}(Component);\n\nAlert.defaultProps = {\n  color: \"primary\"\n};\nAlert.propTypes = {\n  className: PropTypes.string,\n  color: PropTypes.oneOf(['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark']),\n  onClose: PropTypes.func,\n  onClosed: PropTypes.func\n};\n\nvar Badge =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Badge, _React$Component);\n\n  function Badge() {\n    _classCallCheck(this, Badge);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Badge).apply(this, arguments));\n  }\n\n  _createClass(Badge, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          Tag = _this$props.tag,\n          className = _this$props.className,\n          children = _this$props.children,\n          color = _this$props.color,\n          pill = _this$props.pill,\n          attributes = _objectWithoutProperties(_this$props, [\"tag\", \"className\", \"children\", \"color\", \"pill\"]);\n\n      var classes = classNames(\"badge\", color, \"badge-\" + color, pill ? \"badge-pill\" : false, className);\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes\n      }), this.props.children);\n    }\n  }]);\n\n  return Badge;\n}(React.Component);\n\nBadge.defaultProps = {\n  tag: \"span\",\n  color: \"default\",\n  pill: false\n};\nBadge.propTypes = {\n  color: PropTypes.string,\n  pill: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string\n};\n\nfunction omit(obj, omitKeys) {\n  var result = {};\n  Object.keys(obj).forEach(function (key) {\n    if (omitKeys.indexOf(key) === -1) {\n      result[key] = obj[key];\n    }\n  });\n  return result;\n}\n\nvar keyCodes = {\n  esc: 27,\n  space: 32,\n  tab: 9,\n  up: 38,\n  down: 40\n};\n\nvar returnAttributes = function returnAttributes(attributes) {\n  var newAttributesObject = Object.keys(attributes).reduce(function (previousValue, currentElement) {\n    if (attributes[currentElement]) previousValue[currentElement] = attributes[currentElement];\n    return previousValue;\n  }, {});\n  return newAttributesObject;\n};\n\nvar getColorClass = function getColorClass(color) {\n  var colorArray = color.split(\" \");\n  var specialColors = [\"danger\", \"warning\", \"success\", \"info\", \"default\", \"primary\", \"secondary\", \"elegant\", \"stylish\", \"unique\", \"special\"];\n  var colorClasses = \"\";\n  colorArray.forEach(function (color) {\n    if (specialColors.includes(color)) {\n      if (color.includes('dark')) {\n        color.replace('-', '-color-');\n        colorClasses += \"\".concat(color, \" \");\n      } else {\n        colorClasses += \"\".concat(color, \"-color\");\n      }\n    } else {\n      colorClasses += \"\".concat(color, \" \");\n    }\n  });\n  return colorClasses;\n};\n\nvar Breadcrumb = function Breadcrumb(props) {\n  var className = props.className,\n      color = props.color,\n      light = props.light,\n      uppercase = props.uppercase,\n      bold = props.bold,\n      attributes = _objectWithoutProperties(props, [\"className\", \"color\", \"light\", \"uppercase\", \"bold\"]);\n\n  var classes = classNames(\"breadcrumb\", uppercase && \"text-uppercase\", bold && \"font-up-bold\", light && \"white-text\", color && getColorClass(color), className);\n  var children;\n\n  if (bold) {\n    children = React.Children.map(props.children, function (child) {\n      return React.cloneElement(child, {\n        bold: true\n      });\n    });\n  } else {\n    children = props.children;\n  }\n\n  return React.createElement(\"nav\", null, React.createElement(\"ol\", _extends({}, attributes, {\n    className: classes\n  }), children));\n};\n\nBreadcrumb.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: PropTypes.string,\n  light: PropTypes.bool,\n  uppercase: PropTypes.bool,\n  bold: PropTypes.bool\n};\n\nvar Fa =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Fa, _React$Component);\n\n  function Fa() {\n    _classCallCheck(this, Fa);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Fa).apply(this, arguments));\n  }\n\n  _createClass(Fa, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          border = _this$props.border,\n          brand = _this$props.brand,\n          className = _this$props.className,\n          fab = _this$props.fab,\n          fal = _this$props.fal,\n          far = _this$props.far,\n          fixed = _this$props.fixed,\n          flip = _this$props.flip,\n          icon = _this$props.icon,\n          inverse = _this$props.inverse,\n          light = _this$props.light,\n          list = _this$props.list,\n          pull = _this$props.pull,\n          pulse = _this$props.pulse,\n          regular = _this$props.regular,\n          rotate = _this$props.rotate,\n          size = _this$props.size,\n          spin = _this$props.spin,\n          stack = _this$props.stack,\n          attributes = _objectWithoutProperties(_this$props, [\"border\", \"brand\", \"className\", \"fab\", \"fal\", \"far\", \"fixed\", \"flip\", \"icon\", \"inverse\", \"light\", \"list\", \"pull\", \"pulse\", \"regular\", \"rotate\", \"size\", \"spin\", \"stack\"]);\n\n      var iconPrefix = brand || fab ? \"fab\" : light || fal ? \"fal\" : regular || far ? \"far\" : \"fa\";\n      var classes = classNames(iconPrefix, list ? \"fa-li\" : false, icon ? \"fa-\".concat(icon) : false, size ? \"fa-\".concat(size) : false, fixed ? \"fa-fw\" : false, pull ? \"fa-pull-\".concat(pull) : false, border ? \"fa-border\" : false, spin ? \"fa-spin\" : false, pulse ? \"fa-pulse\" : false, rotate ? \"fa-rotate-\".concat(rotate) : false, flip ? \"fa-flip-\".concat(flip) : false, inverse ? \"fa-inverse\" : false, stack ? \"fa-\".concat(stack) : false, className);\n      return React.createElement(\"i\", _extends({}, attributes, {\n        className: classes\n      }));\n    }\n  }]);\n\n  return Fa;\n}(React.Component);\n\nFa.propTypes = {\n  icon: PropTypes.string.isRequired,\n  border: PropTypes.bool,\n  brand: PropTypes.bool,\n  className: PropTypes.string,\n  fab: PropTypes.bool,\n  fal: PropTypes.bool,\n  far: PropTypes.bool,\n  fixed: PropTypes.bool,\n  flip: PropTypes.string,\n  inverse: PropTypes.string,\n  light: PropTypes.bool,\n  list: PropTypes.bool,\n  pull: PropTypes.string,\n  pulse: PropTypes.bool,\n  regular: PropTypes.bool,\n  rotate: PropTypes.string,\n  spin: PropTypes.bool,\n  size: PropTypes.string,\n  stack: PropTypes.string\n};\nFa.defaultProps = {\n  border: false,\n  brand: false,\n  className: \"\",\n  fab: false,\n  fal: false,\n  far: false,\n  fixed: false,\n  flip: \"\",\n  inverse: \"\",\n  light: false,\n  list: false,\n  pull: \"\",\n  pulse: false,\n  regular: false,\n  rotate: \"\",\n  spin: false,\n  size: \"\",\n  stack: \"\"\n};\n\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') {\n    return;\n  }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css = \".bc-icons.breadcrumb-item::before,\\n.bc-icons.breadcrumb-item::after {\\n  content: none;\\n}\\n\\n.bc-icons.breadcrumb-item + .active.breadcrumb-item::before,\\n.bc-icons.breadcrumb-item + .active.breadcrumb-item::after{\\n  content: none;\\n}\\n\\n.bc-icons.breadcrumb-item.active {\\n  color: #eeeeee;\\n}\\n\";\nstyleInject(css);\n\nvar BreadcrumbItem = function BreadcrumbItem(props) {\n  var active = props.active,\n      appendIcon = props.appendIcon,\n      children = props.children,\n      className = props.className,\n      bold = props.bold,\n      icon = props.icon,\n      iconBrand = props.iconBrand,\n      iconClassName = props.iconClassName,\n      iconLight = props.iconLight,\n      iconRegular = props.iconRegular,\n      iconSize = props.iconSize,\n      attributes = _objectWithoutProperties(props, [\"active\", \"appendIcon\", \"children\", \"className\", \"bold\", \"icon\", \"iconBrand\", \"iconClassName\", \"iconLight\", \"iconRegular\", \"iconSize\"]);\n\n  var classes = classNames(active ? \"active\" : false, icon && \"bc-icons\", \"breadcrumb-item\", className);\n  var iconClasses = classNames(appendIcon ? \"mx-2\" : \"mr-2\", iconClassName);\n\n  var WithBold = function WithBold(_ref) {\n    var children = _ref.children;\n    return bold ? React.createElement(\"strong\", null, children) : children;\n  };\n\n  var WithIcon = function WithIcon() {\n    if (icon) {\n      return React.createElement(Fragment, null, appendIcon && children, React.createElement(Fa, {\n        brand: iconBrand,\n        className: iconClasses,\n        icon: icon,\n        light: iconLight,\n        regular: iconRegular,\n        size: iconSize\n      }), !appendIcon && children);\n    }\n\n    return children;\n  };\n\n  return React.createElement(\"li\", _extends({}, attributes, {\n    className: classes\n  }), React.createElement(WithBold, null, React.createElement(WithIcon, null)));\n};\n\nBreadcrumbItem.propTypes = {\n  active: PropTypes.bool,\n  appendIcon: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  bold: PropTypes.bool,\n  icon: PropTypes.string,\n  iconBrand: PropTypes.bool,\n  iconClassName: PropTypes.string,\n  iconLight: PropTypes.bool,\n  iconRegular: PropTypes.bool,\n  iconSize: PropTypes.string\n};\nBreadcrumbItem.defaultProps = {\n  active: false,\n  appendIcon: false,\n  className: \"\",\n  bold: false,\n  icon: \"\",\n  iconBrand: false,\n  iconClassName: \"\",\n  iconLight: false,\n  iconRegular: false,\n  iconSize: \"\"\n};\nvar css$1 = \".Ripple {\\n  position: absolute;\\n  background: rgba(255, 255, 255, 0.3);\\n  border-radius: 50%;\\n  opacity: 1;\\n  transform: scale(0);\\n}\\n\\n.Ripple-outline {\\n  background: rgba(0, 0, 0, 0.2);\\n}\\n\\n.Ripple.is-reppling {\\n  animation: ripple 0.5s linear;\\n}\\n\\n.Ripple-parent {\\n  position: relative;\\n  overflow: hidden;\\n  touch-action: none;\\n}\\n\\n@keyframes ripple {\\n  100% {\\n    opacity: 0;\\n    transform: scale(3);\\n  }\\n}\\n\";\nstyleInject(css$1);\n\nvar Waves =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Waves, _React$Component);\n\n  function Waves(props) {\n    var _this;\n\n    _classCallCheck(this, Waves);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Waves).call(this, props));\n    _this.state = {\n      animate: false,\n      width: 0,\n      height: 0,\n      top: 0,\n      left: 0,\n      cursorPos: props.cursorPos\n    };\n    return _this;\n  }\n\n  _createClass(Waves, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n\n      if (prevState.cursorPos.time !== this.props.cursorPos.time) {\n        if (prevState.animate) {\n          this.setState({\n            animate: false,\n            cursorPos: this.props.cursorPos\n          }, function () {\n            _this2.reppling();\n          });\n        } else this.reppling();\n      }\n    }\n  }, {\n    key: \"reppling\",\n    value: function reppling() {\n      // Get the element\n      var $ripple = ReactDOM.findDOMNode(this);\n      var $button = $ripple.parentNode;\n      var buttonPos = $button.getBoundingClientRect();\n      var buttonWidth = $button.offsetWidth;\n      var buttonHeight = $button.offsetHeight; // Make a Square Ripple\n\n      var rippleWidthShouldBe = Math.max(buttonHeight, buttonWidth); // Make Ripple Position to be center\n\n      var centerize = rippleWidthShouldBe / 2;\n      this.setState({\n        animate: true,\n        width: rippleWidthShouldBe,\n        height: rippleWidthShouldBe,\n        top: this.state.cursorPos.top - buttonPos.top - centerize,\n        left: this.state.cursorPos.left - buttonPos.left - centerize\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: 'Ripple ' + (this.props.outline || this.props.flat || this.props.dark ? 'Ripple-outline ' : '') + (this.state.animate ? 'is-reppling' : ''),\n        style: {\n          top: this.state.top + 'px',\n          left: this.state.left + 'px',\n          width: this.state.width + 'px',\n          height: this.state.height + 'px'\n        }\n      });\n    }\n  }]);\n\n  return Waves;\n}(React.Component);\n\nWaves.propTypes = {\n  outline: PropTypes.bool,\n  flat: PropTypes.bool,\n  animate: PropTypes.bool,\n  cursorPos: PropTypes.object,\n  children: PropTypes.node\n};\n\nvar Button =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Button, _React$Component);\n\n  function Button(props) {\n    var _this;\n\n    _classCallCheck(this, Button);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Button).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClick\", function (e) {\n      e.stopPropagation(); // Waves - Get Cursor Position\n\n      var cursorPos = {\n        top: e.clientY,\n        left: e.clientX,\n        time: Date.now()\n      };\n\n      _this.setState({\n        cursorPos: cursorPos\n      });\n    });\n\n    _this.state = {\n      cursorPos: {}\n    };\n    return _this;\n  }\n\n  _createClass(Button, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          active = _this$props.active,\n          block = _this$props.block,\n          circle = _this$props.circle,\n          className = _this$props.className,\n          color = _this$props.color,\n          disabled = _this$props.disabled,\n          download = _this$props.download,\n          outline = _this$props.outline,\n          size = _this$props.size,\n          rounded = _this$props.rounded,\n          gradient = _this$props.gradient,\n          floating = _this$props.floating,\n          flat = _this$props.flat,\n          role = _this$props.role,\n          type = _this$props.type,\n          social = _this$props.social,\n          action = _this$props.action,\n          Tag = _this$props.tag,\n          target = _this$props.target,\n          innerRef = _this$props.innerRef,\n          attributes = _objectWithoutProperties(_this$props, [\"active\", \"block\", \"circle\", \"className\", \"color\", \"disabled\", \"download\", \"outline\", \"size\", \"rounded\", \"gradient\", \"floating\", \"flat\", \"role\", \"type\", \"social\", \"action\", \"tag\", \"target\", \"innerRef\"]);\n\n      var classes = classNames(floating ? \"btn-floating btn\" : \"btn\", flat ? \"btn-flat\" : gradient ? \"\".concat(gradient, \"-gradient\") : \"btn\".concat(outline ? \"-outline\" : \"\", \"-\").concat(color), size ? \"btn-\".concat(size) : false, rounded ? \"btn-rounded\" : false, circle && \"btn-circle\", block ? \"btn-block\" : false, social ? \"btn-\" + social : false, action ? \"btn-action\" : false, \"Ripple-parent\", className, {\n        active: active,\n        disabled: disabled\n      });\n\n      if (attributes.href && Tag === \"button\") {\n        Tag = \"a\";\n      }\n\n      return React.createElement(Tag, _extends({\n        type: Tag === \"button\" && !type ? \"button\" : type,\n        target: target,\n        role: Tag === \"a\" && !role ? \"button\" : role,\n        className: classes,\n        ref: innerRef,\n        onMouseUp: this.handleClick,\n        onTouchStart: this.handleClick\n      }, attributes, {\n        download: download,\n        disabled: disabled\n      }), this.props.children, this.props.disabled ? false : React.createElement(Waves, {\n        cursorPos: this.state.cursorPos,\n        outline: outline,\n        flat: flat\n      }));\n    }\n  }]);\n\n  return Button;\n}(React.Component);\n\nButton.defaultProps = {\n  color: \"default\",\n  tag: \"button\"\n};\nButton.propTypes = {\n  active: PropTypes.bool,\n  action: PropTypes.bool,\n  block: PropTypes.bool,\n  color: PropTypes.string,\n  disabled: PropTypes.bool,\n  download: PropTypes.string,\n  gradient: PropTypes.string,\n  role: PropTypes.string,\n  type: PropTypes.string,\n  outline: PropTypes.bool,\n  rounded: PropTypes.bool,\n  circle: PropTypes.bool,\n  floating: PropTypes.bool,\n  flat: PropTypes.bool,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  onClick: PropTypes.func,\n  size: PropTypes.string,\n  social: PropTypes.string,\n  children: PropTypes.node,\n  tag: PropTypes.string,\n  target: PropTypes.string,\n  className: PropTypes.string\n};\nvar css$2 = \".btn-group-vertical>.btn,\\n.btn-group-vertical>.btn+.btn-group,\\n.btn-group-vertical>.btn-group+.btn,\\n.btn-group-vertical>.btn-group+.btn-group {\\n  margin-left: 0px;\\n}\\n\\n.btn-group-lg>.btn {\\n  font-size: 0.9rem;\\n  padding: 1rem 2.4rem;\\n}\\n\\n.btn-group-sm>.btn {\\n  font-size: 0.6rem;\\n  padding: 0.5rem 1.6rem;\\n}\\n\\n.btn-floating.btn.btn-sm,\\n.btn-floating.btn.btn-lg {\\n  padding: 0;\\n}\\n\";\nstyleInject(css$2);\n\nvar ButtonGroup =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ButtonGroup, _React$Component);\n\n  function ButtonGroup() {\n    _classCallCheck(this, ButtonGroup);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ButtonGroup).apply(this, arguments));\n  }\n\n  _createClass(ButtonGroup, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          size = _this$props.size,\n          vertical = _this$props.vertical,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"size\", \"vertical\"]);\n\n      var classes = classNames(className, size ? \"btn-group-\" + size : false, vertical ? \"btn-group-vertical\" : \"btn-group\");\n      return React.createElement(\"div\", _extends({}, attributes, {\n        className: classes\n      }), this.props.children);\n    }\n  }]);\n\n  return ButtonGroup;\n}(React.Component);\n\nButtonGroup.propTypes = {\n  \"aria-label\": PropTypes.string,\n  className: PropTypes.string,\n  role: PropTypes.string,\n  size: PropTypes.string,\n  children: PropTypes.node,\n  vertical: PropTypes.bool\n};\nButtonGroup.defaultProps = {\n  role: \"group\"\n};\n\nvar ButtonToolbar =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ButtonToolbar, _React$Component);\n\n  function ButtonToolbar() {\n    _classCallCheck(this, ButtonToolbar);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ButtonToolbar).apply(this, arguments));\n  }\n\n  _createClass(ButtonToolbar, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          attributes = _objectWithoutProperties(_this$props, [\"className\"]);\n\n      var classes = classNames(className, \"btn-toolbar\");\n      return React.createElement(\"div\", _extends({}, attributes, {\n        className: classes\n      }), this.props.children);\n    }\n  }]);\n\n  return ButtonToolbar;\n}(React.Component);\n\nButtonToolbar.propTypes = {\n  \"aria-label\": PropTypes.string,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  role: PropTypes.string\n};\nButtonToolbar.defaultProps = {\n  role: \"toolbar\"\n};\n\nvar Card =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Card, _Component);\n\n  function Card() {\n    _classCallCheck(this, Card);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Card).apply(this, arguments));\n  }\n\n  _createClass(Card, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          Tag = _this$props.tag,\n          cascade = _this$props.cascade,\n          wide = _this$props.wide,\n          narrow = _this$props.narrow,\n          reverse = _this$props.reverse,\n          testimonial = _this$props.testimonial,\n          ecommerce = _this$props.ecommerce,\n          collection = _this$props.collection,\n          pricing = _this$props.pricing,\n          personal = _this$props.personal,\n          news = _this$props.news,\n          color = _this$props.color,\n          text = _this$props.text,\n          border = _this$props.border,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"tag\", \"cascade\", \"wide\", \"narrow\", \"reverse\", \"testimonial\", \"ecommerce\", \"collection\", \"pricing\", \"personal\", \"news\", \"color\", \"text\", \"border\"]);\n\n      var classes = classNames(\"card\", cascade && \"card-cascade\", wide && \"card-cascade wider\", narrow && \"card-cascade narrower\", reverse && \"card-cascade wider reverse\", testimonial && \"testimonial-card\", ecommerce && \"card-ecommerce\", collection && \"collection-card\", pricing && \"pricing-card\", personal && \"card-personal\", news && \"news-card\", color && color, text && text + \"-text\", border && \"border-\" + border, className);\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes\n      }));\n    }\n  }]);\n\n  return Card;\n}(Component);\n\nCard.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  color: PropTypes.string,\n  border: PropTypes.string\n};\nCard.defaultProps = {\n  tag: \"div\"\n};\n\nvar CardBody =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CardBody, _Component);\n\n  function CardBody() {\n    _classCallCheck(this, CardBody);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CardBody).apply(this, arguments));\n  }\n\n  _createClass(CardBody, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          Tag = _this$props.tag,\n          cascade = _this$props.cascade,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"tag\", \"cascade\"]);\n\n      var classes = classNames(\"card-body\", cascade && \"card-body-cascade\", className);\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes\n      }));\n    }\n  }]);\n\n  return CardBody;\n}(Component);\n\nCardBody.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  cascade: PropTypes.bool\n};\nCardBody.defaultProps = {\n  tag: \"div\"\n};\n\nvar CardFooter =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CardFooter, _Component);\n\n  function CardFooter() {\n    _classCallCheck(this, CardFooter);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CardFooter).apply(this, arguments));\n  }\n\n  _createClass(CardFooter, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          Tag = _this$props.tag,\n          color = _this$props.color,\n          text = _this$props.text,\n          border = _this$props.border,\n          transparent = _this$props.transparent,\n          small = _this$props.small,\n          muted = _this$props.muted,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"tag\", \"color\", \"text\", \"border\", \"transparent\", \"small\", \"muted\"]);\n\n      var classes = classNames(\"card-footer\", color && color, text && text, color && !text && \" white-text\", border && \"border-\" + border, transparent && \"bg-transparent\", muted && \"text-muted\", className);\n      var component = React.createElement(Tag, _extends({}, attributes, {\n        className: classes\n      }));\n\n      if (small) {\n        component = React.createElement(Tag, _extends({}, attributes, {\n          className: classes\n        }), React.createElement(\"small\", null, \" \", this.props.children, \" \"));\n      }\n\n      return component;\n    }\n  }]);\n\n  return CardFooter;\n}(Component);\n\nCardFooter.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  color: PropTypes.string,\n  text: PropTypes.string,\n  border: PropTypes.string,\n  transparent: PropTypes.bool,\n  small: PropTypes.bool,\n  muted: PropTypes.bool\n};\nCardFooter.defaultProps = {\n  tag: \"div\"\n};\n\nvar CardGroup =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CardGroup, _Component);\n\n  function CardGroup() {\n    _classCallCheck(this, CardGroup);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CardGroup).apply(this, arguments));\n  }\n\n  _createClass(CardGroup, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          Tag = _this$props.tag,\n          deck = _this$props.deck,\n          column = _this$props.column,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"tag\", \"deck\", \"column\"]);\n\n      var classes = classNames(deck ? \"card-deck\" : column ? \"card-columns\" : \"card-group\", className);\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes\n      }));\n    }\n  }]);\n\n  return CardGroup;\n}(Component);\n\nCardGroup.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  deck: PropTypes.bool,\n  column: PropTypes.bool\n};\nCardGroup.defaultProps = {\n  tag: \"div\"\n};\n\nvar CardHeader =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CardHeader, _Component);\n\n  function CardHeader() {\n    _classCallCheck(this, CardHeader);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CardHeader).apply(this, arguments));\n  }\n\n  _createClass(CardHeader, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          Tag = _this$props.tag,\n          color = _this$props.color,\n          text = _this$props.text,\n          border = _this$props.border,\n          transparent = _this$props.transparent,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"tag\", \"color\", \"text\", \"border\", \"transparent\"]);\n\n      var classes = classNames(\"card-header\", color && color, text && text, color && !text && \" white-text\", border && \"border-\" + border, transparent && \"bg-transparent\", className);\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes\n      }));\n    }\n  }]);\n\n  return CardHeader;\n}(Component);\n\nCardHeader.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  color: PropTypes.string,\n  text: PropTypes.string,\n  border: PropTypes.string,\n  transparent: PropTypes.bool\n};\nCardHeader.defaultProps = {\n  tag: \"div\"\n};\n\nvar Mask =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Mask, _React$Component);\n\n  function Mask() {\n    _classCallCheck(this, Mask);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Mask).apply(this, arguments));\n  }\n\n  _createClass(Mask, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          className = _this$props.className,\n          overlay = _this$props.overlay,\n          pattern = _this$props.pattern,\n          Tag = _this$props.tag,\n          attributes = _objectWithoutProperties(_this$props, [\"children\", \"className\", \"overlay\", \"pattern\", \"tag\"]);\n\n      var classes = classNames(\"mask\", pattern && \"pattern-\".concat(pattern), overlay && \"rgba-\".concat(overlay), className);\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes\n      }), this.props.children);\n    }\n  }]);\n\n  return Mask;\n}(React.Component);\n\nMask.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  overlay: PropTypes.string,\n  pattern: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  tag: PropTypes.string\n};\nMask.defaultProps = {\n  className: \"\",\n  overlay: \"\",\n  pattern: \"\",\n  tag: \"div\"\n};\n\nvar View =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(View, _React$Component);\n\n  function View(props) {\n    var _this;\n\n    _classCallCheck(this, View);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(View).call(this, props));\n    _this.state = {\n      cursorPos: {}\n    };\n    return _this;\n  }\n\n  _createClass(View, [{\n    key: \"handleClick\",\n    value: function handleClick(e) {\n      // Get Cursor Position\n      var cursorPos = {\n        top: e.clientY,\n        left: e.clientX,\n        time: Date.now()\n      };\n      this.setState({\n        cursorPos: cursorPos\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          cascade = _this$props.cascade,\n          children = _this$props.children,\n          className = _this$props.className,\n          hover = _this$props.hover,\n          rounded = _this$props.rounded,\n          src = _this$props.src,\n          Tag = _this$props.tag,\n          waves = _this$props.waves,\n          zoom = _this$props.zoom,\n          attributes = _objectWithoutProperties(_this$props, [\"cascade\", \"children\", \"className\", \"hover\", \"rounded\", \"src\", \"tag\", \"waves\", \"zoom\"]);\n\n      var classes = classNames(\"view\", rounded && \"rounded\", zoom && \"zoom\", hover && \"overlay\", cascade && \"view-cascade\", waves ? \"Ripple-parent\" : false, className);\n      var viewStyle = src ? {\n        backgroundImage: \"url(\\\"\".concat(src, \"\\\")\"),\n        backgroundRepeat: \"no-repeat\",\n        backgroundSize: \"cover\",\n        backgroundPosition: \"center center\",\n        height: \"100vh\"\n      } : {};\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes,\n        onMouseDown: this.handleClick.bind(this),\n        onTouchStart: this.handleClick.bind(this),\n        style: viewStyle\n      }), children, waves && React.createElement(Waves, {\n        cursorPos: this.state.cursorPos\n      }));\n    }\n  }]);\n\n  return View;\n}(React.Component);\n\nView.defaultProps = {\n  cascade: false,\n  className: \"\",\n  hover: false,\n  rounded: false,\n  src: \"\",\n  tag: \"div\",\n  waves: false,\n  zoom: false\n};\nView.propTypes = {\n  cascade: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  hover: PropTypes.bool,\n  rounded: PropTypes.bool,\n  src: PropTypes.string,\n  tag: PropTypes.string,\n  waves: PropTypes.bool,\n  zoom: PropTypes.bool\n};\n\nvar CardImage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CardImage, _Component);\n\n  function CardImage(props) {\n    var _this;\n\n    _classCallCheck(this, CardImage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CardImage).call(this, props));\n    _this.state = {\n      cursorPos: {}\n    };\n    return _this;\n  }\n\n  _createClass(CardImage, [{\n    key: \"handleClick\",\n    value: function handleClick(e) {\n      // Get Cursor Position\n      var cursorPos = {\n        top: e.clientY,\n        left: e.clientX,\n        time: Date.now()\n      };\n      this.setState({\n        cursorPos: cursorPos\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          overlay = _this$props.overlay,\n          top = _this$props.top,\n          waves = _this$props.waves,\n          hover = _this$props.hover,\n          cascade = _this$props.cascade,\n          tag = _this$props.tag,\n          zoom = _this$props.zoom,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"overlay\", \"top\", \"waves\", \"hover\", \"cascade\", \"tag\", \"zoom\"]);\n\n      var classes = classNames(top && \"card-img-top\", className);\n      var Tag = tag;\n      var innerContent = React.createElement(Tag, _extends({}, attributes, {\n        className: classes\n      }), this.props.children);\n\n      if (this.props.src) {\n        return React.createElement(View, {\n          zoom: zoom,\n          hover: this.props.hover,\n          cascade: this.props.cascade\n        }, React.createElement(\"div\", {\n          className: \"Ripple-parent\",\n          onMouseDown: this.handleClick.bind(this),\n          onTouchStart: this.handleClick.bind(this)\n        }, innerContent, React.createElement(Mask, {\n          overlay: overlay\n        }), this.props.waves && React.createElement(Waves, {\n          cursorPos: this.state.cursorPos\n        })));\n      } else {\n        return React.createElement(\"div\", null, innerContent);\n      }\n    }\n  }]);\n\n  return CardImage;\n}(Component);\n\nCardImage.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  zoom: PropTypes.bool,\n  waves: PropTypes.bool,\n  className: PropTypes.string,\n  cascade: PropTypes.bool,\n  hover: PropTypes.bool,\n  overlay: PropTypes.string,\n  top: PropTypes.bool,\n  src: PropTypes.string,\n  children: PropTypes.node\n};\nCardImage.defaultProps = {\n  tag: \"img\",\n  overlay: \"white-slight\",\n  waves: true,\n  hover: false,\n  cascade: false,\n  zoom: false\n};\n\nvar CardText =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CardText, _Component);\n\n  function CardText() {\n    _classCallCheck(this, CardText);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CardText).apply(this, arguments));\n  }\n\n  _createClass(CardText, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          Tag = _this$props.tag,\n          muted = _this$props.muted,\n          small = _this$props.small,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"tag\", \"muted\", \"small\"]);\n\n      var classes = classNames(\"card-text\", muted && \"text-muted\", className);\n      var text = React.createElement(Tag, _extends({}, attributes, {\n        className: classes\n      }));\n\n      if (small) {\n        text = React.createElement(Tag, _extends({}, attributes, {\n          className: classes\n        }), React.createElement(\"small\", null, \" \", this.props.children, \" \"));\n      }\n\n      return text;\n    }\n  }]);\n\n  return CardText;\n}(Component);\n\nCardText.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  muted: PropTypes.bool,\n  small: PropTypes.bool\n};\nCardText.defaultProps = {\n  tag: \"p\"\n};\n\nvar CardTitle =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CardTitle, _Component);\n\n  function CardTitle() {\n    _classCallCheck(this, CardTitle);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CardTitle).apply(this, arguments));\n  }\n\n  _createClass(CardTitle, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          Tag = _this$props.tag,\n          sub = _this$props.sub,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"tag\", \"sub\"]);\n\n      var classes = classNames(sub ? \"card-subtitle\" : \"card-title\", className);\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes\n      }));\n    }\n  }]);\n\n  return CardTitle;\n}(Component);\n\nCardTitle.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  sub: PropTypes.bool,\n  className: PropTypes.string\n};\nCardTitle.defaultProps = {\n  tag: \"h4\",\n  sub: false\n};\n\nvar Control =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Control, _Component);\n\n  function Control() {\n    _classCallCheck(this, Control);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Control).apply(this, arguments));\n  }\n\n  _createClass(Control, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          direction = _this$props.direction,\n          className = _this$props.className,\n          onClick = _this$props.onClick,\n          Tag = _this$props.tag,\n          iconLeft = _this$props.iconLeft,\n          iconRight = _this$props.iconRight,\n          testimonial = _this$props.testimonial,\n          multiItem = _this$props.multiItem;\n      var text;\n\n      if (direction === \"prev\") {\n        text = \"Previous\";\n      } else if (direction === \"next\") {\n        text = \"Next\";\n      }\n\n      var classes = classNames(\"carousel-control-\" + direction, className);\n      var caretClasses = classNames(\"carousel-control-\" + direction + \"-icon\");\n\n      if (testimonial) {\n        var arrow = direction === \"prev\" ? \"left\" : \"right\";\n        classes = classNames(\"carousel-control-\" + direction, arrow, \"carousel-control\", className);\n        caretClasses = classNames(\"icon-\" + direction);\n      }\n\n      if (multiItem) {\n        classes = classNames(\"btn-floating\");\n      }\n\n      return React.createElement(Tag, {\n        className: classes,\n        \"data-slide\": direction,\n        onClick: onClick\n      }, iconLeft ? React.createElement(Fa, {\n        icon: \"chevron-left\"\n      }) : iconRight ? React.createElement(Fa, {\n        icon: \"chevron-right\"\n      }) : React.createElement(\"div\", null, React.createElement(\"span\", {\n        className: caretClasses,\n        \"aria-hidden\": \"true\"\n      }), React.createElement(\"span\", {\n        className: \"sr-only\"\n      }, text)));\n    }\n  }]);\n\n  return Control;\n}(Component);\n\nControl.propTypes = {\n  onClick: PropTypes.any,\n  direction: PropTypes.string,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  iconLeft: PropTypes.bool,\n  iconRight: PropTypes.bool,\n  testimonial: PropTypes.bool,\n  multiItem: PropTypes.bool\n};\nControl.defaultProps = {\n  tag: \"a\"\n};\n\nvar CarouselIndicators =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CarouselIndicators, _Component);\n\n  function CarouselIndicators() {\n    _classCallCheck(this, CarouselIndicators);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CarouselIndicators).apply(this, arguments));\n  }\n\n  _createClass(CarouselIndicators, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          className = _this$props.className,\n          attributes = _objectWithoutProperties(_this$props, [\"children\", \"className\"]);\n\n      var classes = classNames(\"carousel-indicators\", className);\n      return React.createElement(\"ol\", _extends({}, attributes, {\n        className: classes\n      }), children);\n    }\n  }]);\n\n  return CarouselIndicators;\n}(Component);\n\nCarouselIndicators.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string\n};\nCarouselIndicators.defaultProps = {\n  className: \"\"\n};\n\nvar CarouselIndicator =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CarouselIndicator, _Component);\n\n  function CarouselIndicator() {\n    _classCallCheck(this, CarouselIndicator);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CarouselIndicator).apply(this, arguments));\n  }\n\n  _createClass(CarouselIndicator, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          active = _this$props.active,\n          children = _this$props.children,\n          className = _this$props.className,\n          img = _this$props.img,\n          alt = _this$props.alt,\n          attributes = _objectWithoutProperties(_this$props, [\"active\", \"children\", \"className\", \"img\", \"alt\"]);\n\n      var classes = classNames(this.props.active ? \"active\" : \"\", className);\n      return React.createElement(\"li\", _extends({}, attributes, {\n        className: classes\n      }), this.props.img && React.createElement(\"img\", {\n        src: this.props.img,\n        alt: this.props.alt,\n        className: \"img-fluid\"\n      }), children);\n    }\n  }]);\n\n  return CarouselIndicator;\n}(Component);\n\nCarouselIndicator.propTypes = {\n  active: PropTypes.bool.isRequired,\n  alt: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  img: PropTypes.string\n};\nCarouselIndicator.defaultProps = {\n  alt: \"Carousel thumbnail\",\n  className: \"\",\n  img: \"\"\n};\nvar css$3 = \".carousel-inner {\\n  position: relative;\\n  overflow: hidden;\\n  width: 100%;\\n  height: 100%;\\n}\\n\\n.carousel-fade .carousel-item {\\n  position: absolute;\\n  left: 0;\\n  top: 0;\\n  width: 100%;\\n  height: 100%;\\n  display: block !important;\\n  opacity: 0;\\n  z-index: 0;\\n  transition: transform 0ms ease-in-out, opacity 0.8s ease-out;\\n}\\n\\n.carousel-fade .carousel-item.active {\\n  position: relative;\\n  z-index: 1;\\n  opacity: 1;\\n}\\n\\n.carousel-multi-item .carousel-item {\\n  display: inline-block !important;\\n}\\n\\n.carousel .carousel-slide-item {\\n  transition: left 0.5s;\\n}\\n\\n.carousel-control-prev, .carousel-control-next, .carousel-item-prev, .carousel-item-next {\\n  z-index: 2;\\n}\\n\";\nstyleInject(css$3);\n\nvar Carousel =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Carousel, _Component);\n\n  function Carousel(props) {\n    var _this;\n\n    _classCallCheck(this, Carousel);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Carousel).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"restartInterval\", function () {\n      if (_this.props.interval !== false) {\n        clearInterval(_this.cycleInterval);\n        _this.cycleInterval = setInterval(_this.next, _this.props.interval);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"next\", function () {\n      var nextItem = _this.state.activeItem + 1;\n\n      if (nextItem > _this.state.length) {\n        _this.setState(_objectSpread({}, _this.state, {\n          activeItem: 1\n        }));\n      } else {\n        _this.setState(_objectSpread({}, _this.state, {\n          activeItem: nextItem\n        }));\n      }\n\n      _this.restartInterval();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"prev\", function () {\n      var prevItem = _this.state.activeItem - 1;\n\n      if (prevItem < 1) {\n        _this.setState(_objectSpread({}, _this.state, {\n          activeItem: _this.state.length\n        }));\n      } else {\n        _this.setState(_objectSpread({}, _this.state, {\n          activeItem: prevItem\n        }));\n      }\n\n      _this.restartInterval();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      if (_this.props.interval === false) {\n        return;\n      }\n\n      _this.cycleInterval = setInterval(_this.next, _this.props.interval); // get images src atr\n\n      if (_this.props.thumbnails) {\n        var CarouselItemsArray = _this.carouselRef.current.querySelectorAll('.carousel-item img');\n\n        var srcArray = Array.prototype.map.call(CarouselItemsArray, function (item) {\n          return item.src;\n        });\n\n        _this.setState(_objectSpread({}, _this.state, {\n          srcArray: srcArray\n        }));\n      }\n    });\n\n    _this.state = {\n      activeItem: _this.props.activeItem,\n      length: _this.props.length,\n      slide: _this.props.slide,\n      srcArray: []\n    };\n    _this.carouselRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(Carousel, [{\n    key: \"goToIndex\",\n    value: function goToIndex(item) {\n      if (this.state.activeItem !== item) {\n        this.setState(_objectSpread({}, this.state, {\n          activeItem: item\n        }));\n      }\n\n      this.restartInterval();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.props.interval === false) {\n        return;\n      }\n\n      clearInterval(this.cycleInterval);\n    }\n  }, {\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        activeItem: this.state.activeItem,\n        length: this.state.length,\n        slide: this.state.slide\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          activeItem = _this$props.activeItem,\n          children = _this$props.children,\n          className = _this$props.className,\n          multiItem = _this$props.multiItem,\n          slide = _this$props.slide,\n          thumbnails = _this$props.thumbnails,\n          interval = _this$props.interval,\n          testimonial = _this$props.testimonial,\n          Tag = _this$props.tag,\n          length = _this$props.length,\n          showControls = _this$props.showControls,\n          showIndicators = _this$props.showIndicators,\n          attributes = _objectWithoutProperties(_this$props, [\"activeItem\", \"children\", \"className\", \"multiItem\", \"slide\", \"thumbnails\", \"interval\", \"testimonial\", \"tag\", \"length\", \"showControls\", \"showIndicators\"]);\n\n      var ariaLabel = 'carousel';\n      var classes = classNames('carousel', multiItem ? 'carousel-multi-item' : 'carousel-fade', thumbnails ? 'carousel-thumbnails' : '', testimonial ? 'testimonial-carousel' : '', className);\n      var CarouselIndicatorsArray = [];\n\n      var _loop = function _loop(i) {\n        CarouselIndicatorsArray.push(React.createElement(CarouselIndicator, {\n          img: thumbnails ? _this2.state.srcArray[i - 1] : null,\n          key: i,\n          active: _this2.state.activeItem === i ? true : false,\n          onClick: function onClick() {\n            _this2.goToIndex(i);\n          }\n        }));\n      };\n\n      for (var i = 1; i <= this.state.length; i++) {\n        _loop(i);\n      }\n\n      return React.createElement(Tag, _extends({\n        ref: this.carouselRef\n      }, attributes, {\n        className: classes,\n        \"aria-label\": ariaLabel\n      }), showControls && multiItem && React.createElement(\"div\", {\n        className: \"controls-top\"\n      }, React.createElement(Control, {\n        testimonial: testimonial ? true : false,\n        multiItem: multiItem ? true : false,\n        iconLeft: true,\n        className: \"btn-floating\",\n        direction: \"prev\",\n        role: \"button\",\n        onClick: this.prev\n      }), React.createElement(Control, {\n        testimonial: testimonial ? true : false,\n        multiItem: multiItem ? true : false,\n        iconRight: true,\n        className: \"btn-floating\",\n        direction: \"next\",\n        role: \"button\",\n        onClick: this.next\n      })), children, showControls && !multiItem && React.createElement(React.Fragment, null, React.createElement(Control, {\n        testimonial: testimonial ? true : false,\n        multiItem: multiItem ? true : false,\n        direction: \"prev\",\n        role: \"button\",\n        onClick: this.prev\n      }), React.createElement(Control, {\n        testimonial: testimonial ? true : false,\n        multiItem: multiItem ? true : false,\n        direction: \"next\",\n        role: \"button\",\n        onClick: this.next\n      })), React.createElement(CarouselIndicators, null, showIndicators && CarouselIndicatorsArray));\n    }\n  }]);\n\n  return Carousel;\n}(Component);\n\nCarousel.propTypes = {\n  activeItem: PropTypes.number,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  children: PropTypes.node,\n  multiItem: PropTypes.bool,\n  interval: PropTypes.oneOfType([PropTypes.number, PropTypes.bool]),\n  thumbnails: PropTypes.bool,\n  testimonial: PropTypes.bool,\n  showControls: PropTypes.bool,\n  showIndicators: PropTypes.bool,\n  slide: PropTypes.bool,\n  length: PropTypes.number\n};\nCarousel.defaultProps = {\n  tag: 'div',\n  interval: 6000,\n  showControls: true,\n  showIndicators: true\n};\nCarousel.childContextTypes = {\n  activeItem: PropTypes.any,\n  length: PropTypes.any,\n  slide: PropTypes.any\n};\n\nvar CarouselCaption =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CarouselCaption, _Component);\n\n  function CarouselCaption() {\n    _classCallCheck(this, CarouselCaption);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CarouselCaption).apply(this, arguments));\n  }\n\n  _createClass(CarouselCaption, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          className = _this$props.className,\n          Tag = _this$props.tag,\n          attributes = _objectWithoutProperties(_this$props, [\"children\", \"className\", \"tag\"]);\n\n      var classes = classNames(\"carousel-caption\", className);\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes\n      }), children);\n    }\n  }]);\n\n  return CarouselCaption;\n}(Component);\n\nCarouselCaption.propTypes = {\n  active: PropTypes.string,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  children: PropTypes.node\n};\nCarouselCaption.defaultProps = {\n  tag: \"div\"\n};\n\nvar CarouselInner =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CarouselInner, _Component);\n\n  function CarouselInner(props) {\n    var _this;\n\n    _classCallCheck(this, CarouselInner);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CarouselInner).call(this, props));\n    _this.state = {\n      childrenCount: React.Children.count(_this.props.children)\n    };\n    return _this;\n  }\n\n  _createClass(CarouselInner, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          active = _this$props.active,\n          children = _this$props.children,\n          childrenCount = _this$props.childrenCount,\n          className = _this$props.className,\n          Tag = _this$props.tag,\n          attributes = _objectWithoutProperties(_this$props, [\"active\", \"children\", \"childrenCount\", \"className\", \"tag\"]);\n\n      var classes = classNames(\"carousel-inner\", active ? \"active\" : \"\", className);\n      childrenCount = React.Children.count(this.props.children);\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes\n      }), children);\n    }\n  }]);\n\n  return CarouselInner;\n}(Component);\n\nCarouselInner.propTypes = {\n  childrenCount: PropTypes.any,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  active: PropTypes.bool,\n  children: PropTypes.node\n};\nCarouselInner.defaultProps = {\n  tag: \"div\"\n};\nCarouselInner.contextTypes = {\n  childrenCount: PropTypes.any\n};\n\nvar CarouselItem =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CarouselItem, _Component);\n\n  function CarouselItem(props) {\n    var _this;\n\n    _classCallCheck(this, CarouselItem);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CarouselItem).call(this, props));\n    _this.moveForward = _this.moveForward.bind(_assertThisInitialized(_this));\n    _this.moveBackwards = _this.moveBackwards.bind(_assertThisInitialized(_this));\n    _this.makeVisible = _this.makeVisible.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(CarouselItem, [{\n    key: \"moveForward\",\n    value: function moveForward() {\n      this.style = {\n        position: \"absolute\",\n        left: \"100%\"\n      };\n    }\n  }, {\n    key: \"moveBackwards\",\n    value: function moveBackwards() {\n      this.style = {\n        position: \"absolute\",\n        left: \"-100%\"\n      };\n    }\n  }, {\n    key: \"makeVisible\",\n    value: function makeVisible() {\n      this.style = {\n        left: \"0\"\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          active = _this$props.active,\n          children = _this$props.children,\n          className = _this$props.className,\n          itemId = _this$props.itemId,\n          Tag = _this$props.tag,\n          attributes = _objectWithoutProperties(_this$props, [\"active\", \"children\", \"className\", \"itemId\", \"tag\"]);\n\n      itemId = parseInt(itemId, 10);\n      var classes = classNames(\"carousel-item\", this.context.slide ? \"active carousel-slide-item\" : itemId === this.context.activeItem ? \"active\" : false, className);\n      var slideIndex = this.context.activeItem - itemId;\n\n      if (this.context.slide) {\n        if (slideIndex < 0) {\n          this.moveForward();\n        } else if (slideIndex > 0) {\n          this.moveBackwards();\n        } else {\n          this.makeVisible();\n        }\n      }\n\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes,\n        style: this.style\n      }), children);\n    }\n  }]);\n\n  return CarouselItem;\n}(Component);\n\nCarouselItem.propTypes = {\n  active: PropTypes.bool,\n  itemId: PropTypes.any,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  children: PropTypes.node\n};\nCarouselItem.defaultProps = {\n  tag: \"div\"\n};\nCarouselItem.contextTypes = {\n  activeItem: PropTypes.any,\n  length: PropTypes.any,\n  slide: PropTypes.any\n};\n\nvar Col =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Col, _Component);\n\n  function Col() {\n    _classCallCheck(this, Col);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Col).apply(this, arguments));\n  }\n\n  _createClass(Col, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          xs = _this$props.xs,\n          sm = _this$props.sm,\n          md = _this$props.md,\n          lg = _this$props.lg,\n          xl = _this$props.xl,\n          top = _this$props.top,\n          bottom = _this$props.bottom,\n          middle = _this$props.middle,\n          size = _this$props.size,\n          className = _this$props.className,\n          Tag = _this$props.tag,\n          attributes = _objectWithoutProperties(_this$props, [\"xs\", \"sm\", \"md\", \"lg\", \"xl\", \"top\", \"bottom\", \"middle\", \"size\", \"className\", \"tag\"]);\n\n      var classes = classNames(size && \"col-\" + size, xs && \"col-xs-\" + xs, sm && \"col-sm-\" + sm, md && \"col-md-\" + md, lg && \"col-lg-\" + lg, xl && \"col-xl-\" + xl, !size && !xs && !sm && !md && !lg && !xl ? \"col\" : \"\", top && \"align-self-start\", middle && \"align-self-center\", bottom && \"align-self-end\", className);\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes\n      }));\n    }\n  }]);\n\n  return Col;\n}(Component);\n\nCol.propTypes = {\n  size: PropTypes.string,\n  xs: PropTypes.string,\n  sm: PropTypes.string,\n  md: PropTypes.string,\n  lg: PropTypes.string,\n  xl: PropTypes.string,\n  top: PropTypes.bool,\n  bottom: PropTypes.bool,\n  middle: PropTypes.bool,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string\n};\nCol.defaultProps = {\n  tag: \"div\",\n  xs: null,\n  sm: null,\n  md: null,\n  lg: null,\n  xl: null\n};\nvar SHOW = \"SHOW\";\nvar SHOWN = \"SHOWN\";\nvar HIDE = \"HIDE\";\nvar HIDDEN = \"HIDDEN\";\nvar DEFAULT_DELAYS = {\n  show: 350,\n  hide: 350\n};\n\nvar Collapse =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Collapse, _Component);\n\n  function Collapse(props) {\n    var _this;\n\n    _classCallCheck(this, Collapse);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Collapse).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"openCollapse\", function () {\n      _this.setState({\n        collapse: SHOW\n      }, function () {\n        _this.setState({\n          height: _this.getHeight()\n        });\n\n        _this.transitionTag = setTimeout(function () {\n          _this.setState({\n            collapse: SHOWN,\n            height: null\n          }, _this.props.onOpened());\n        }, _this.getDelay(\"show\"));\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"closeCollapse\", function () {\n      _this.setState({\n        height: _this.getHeight()\n      }, function () {\n        _this.setState({\n          collapse: HIDE,\n          height: _this.getHeight()\n        }, function () {\n          _this.setState({\n            height: 0\n          });\n        });\n      });\n\n      _this.transitionTag = setTimeout(function () {\n        _this.setState({\n          collapse: HIDDEN,\n          height: null\n        }, _this.props.onClosed());\n      }, _this.getDelay(\"hide\"));\n    });\n\n    _this.state = {\n      id: props.id,\n      collapse: HIDDEN,\n      height: null\n    };\n    _this.element = null;\n    return _this;\n  }\n\n  _createClass(Collapse, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if ((this.props.isOpen === this.state.id || this.props.isOpen === true) && this.state.collapse === HIDDEN) {\n        this.openCollapse();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var collapse = prevState.collapse;\n      var willOpen = typeof this.props.isOpen !== \"boolean\" ? this.props.isOpen === prevState.id : this.props.isOpen;\n\n      if (willOpen && this.state.collapse === HIDDEN) {\n        this.openCollapse();\n      } else if (!willOpen && collapse === SHOWN) {\n        this.closeCollapse();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearTimeout(this.transitionTag);\n    }\n  }, {\n    key: \"getDelay\",\n    value: function getDelay(key) {\n      var delay = this.props.delay;\n\n      if (_typeof(delay) === \"object\") {\n        return isNaN(delay[key]) ? DEFAULT_DELAYS[key] : delay[key];\n      }\n\n      return delay;\n    }\n  }, {\n    key: \"getHeight\",\n    value: function getHeight() {\n      return this.element.scrollHeight;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          navbar = _this$props.navbar,\n          children = _this$props.children,\n          className = _this$props.className,\n          isOpen = _this$props.isOpen,\n          delay = _this$props.delay,\n          onOpened = _this$props.onOpened,\n          onClosed = _this$props.onClosed,\n          attributes = _objectWithoutProperties(_this$props, [\"navbar\", \"children\", \"className\", \"isOpen\", \"delay\", \"onOpened\", \"onClosed\"]);\n\n      var _this$state = this.state,\n          collapse = _this$state.collapse,\n          height = _this$state.height;\n      var collapseClass;\n\n      switch (collapse) {\n        case SHOW:\n          collapseClass = \"collapsing\";\n          break;\n\n        case SHOWN:\n          collapseClass = \"collapse show\";\n          break;\n\n        case HIDE:\n          collapseClass = \"collapsing\";\n          break;\n\n        case HIDDEN:\n          collapseClass = \"collapse\";\n          break;\n\n        default:\n          // HIDDEN\n          collapseClass = \"collapse\";\n      }\n\n      var classes = classNames(collapseClass, navbar ? \"navbar-collapse\" : false, className);\n      var style = height === null ? null : {\n        height: height\n      };\n      return React.createElement(\"div\", _extends({}, attributes, {\n        style: _objectSpread({}, attributes.style, style),\n        className: classes,\n        ref: function ref(c) {\n          _this2.element = c;\n        }\n      }), children);\n    }\n  }]);\n\n  return Collapse;\n}(Component);\n\nCollapse.propTypes = {\n  isOpen: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  id: PropTypes.string,\n  className: PropTypes.node,\n  children: PropTypes.node,\n  navbar: PropTypes.bool,\n  delay: PropTypes.oneOfType([PropTypes.shape({\n    show: PropTypes.number,\n    hide: PropTypes.number\n  }), PropTypes.number]),\n  onOpened: PropTypes.func,\n  onClosed: PropTypes.func\n};\nCollapse.defaultProps = {\n  isOpen: \"\",\n  delay: DEFAULT_DELAYS,\n  onOpened: function onOpened() {},\n  onClosed: function onClosed() {}\n};\n\nvar Container =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Container, _Component);\n\n  function Container() {\n    _classCallCheck(this, Container);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Container).apply(this, arguments));\n  }\n\n  _createClass(Container, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          fluid = _this$props.fluid,\n          className = _this$props.className,\n          Tag = _this$props.tag,\n          attributes = _objectWithoutProperties(_this$props, [\"fluid\", \"className\", \"tag\"]);\n\n      var classes = classNames(fluid ? \"container-fluid\" : \"container\", className);\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes\n      }));\n    }\n  }]);\n\n  return Container;\n}(Component);\n\nContainer.propTypes = {\n  fluid: PropTypes.bool,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string\n};\nContainer.defaultProps = {\n  tag: \"div\",\n  fluid: false\n};\nvar css$4 = \".table-wrapper-scroll-y {\\n  display: block;\\n  max-height: 200px;\\n  overflow-y: auto;\\n  -ms-overflow-style: -ms-autohiding-scrollbar;\\n}\\n\";\nstyleInject(css$4);\n\nvar Table =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Table, _React$Component);\n\n  function Table() {\n    _classCallCheck(this, Table);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Table).apply(this, arguments));\n  }\n\n  _createClass(Table, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          autoWidth = _this$props.autoWidth,\n          bordered = _this$props.bordered,\n          borderless = _this$props.borderless,\n          btn = _this$props.btn,\n          children = _this$props.children,\n          dark = _this$props.dark,\n          fixed = _this$props.fixed,\n          theadColor = _this$props.theadColor,\n          hover = _this$props.hover,\n          maxHeight = _this$props.maxHeight,\n          responsive = _this$props.responsive,\n          responsiveSm = _this$props.responsiveSm,\n          responsiveMd = _this$props.responsiveMd,\n          responsiveLg = _this$props.responsiveLg,\n          responsiveXl = _this$props.responsiveXl,\n          scrollY = _this$props.scrollY,\n          small = _this$props.small,\n          striped = _this$props.striped,\n          className = _this$props.className,\n          attributes = _objectWithoutProperties(_this$props, [\"autoWidth\", \"bordered\", \"borderless\", \"btn\", \"children\", \"dark\", \"fixed\", \"theadColor\", \"hover\", \"maxHeight\", \"responsive\", \"responsiveSm\", \"responsiveMd\", \"responsiveLg\", \"responsiveXl\", \"scrollY\", \"small\", \"striped\", \"className\"]);\n\n      var tableClasses = classNames(\"table\", {\n        \"w-auto\": autoWidth,\n        \"table-bordered\": bordered,\n        \"table-borderless\": borderless,\n        \"btn-table\": btn,\n        \"table-fixed\": fixed,\n        \"table-hover\": hover,\n        \"table-sm\": small,\n        \"table-striped\": striped\n      }, className);\n      var wrapperClasses = classNames({\n        \"table-dark\": dark,\n        \"table-responsive\": responsive,\n        \"table-responsive-sm\": responsiveSm,\n        \"table-responsive-md\": responsiveMd,\n        \"table-responsive-lg\": responsiveLg,\n        \"table-responsive-xl\": responsiveXl,\n        \"table-wrapper-scroll-y\": scrollY\n      });\n      var wrapperStyles = {\n        maxHeight: maxHeight ? \"\".concat(maxHeight) : null\n      };\n      return React.createElement(\"div\", {\n        className: wrapperClasses,\n        style: wrapperStyles\n      }, React.createElement(\"table\", _extends({}, attributes, {\n        className: tableClasses\n      }), children));\n    }\n  }]);\n\n  return Table;\n}(React.Component);\n\nTable.propTypes = {\n  autoWidth: PropTypes.bool,\n  bordered: PropTypes.bool,\n  borderless: PropTypes.bool,\n  btn: PropTypes.bool,\n  children: PropTypes.node,\n  dark: PropTypes.bool,\n  fixed: PropTypes.bool,\n  theadColor: PropTypes.string,\n  hover: PropTypes.bool,\n  maxHeight: PropTypes.string,\n  responsive: PropTypes.bool,\n  responsiveSm: PropTypes.bool,\n  responsiveMd: PropTypes.bool,\n  responsiveLg: PropTypes.bool,\n  responsiveXl: PropTypes.bool,\n  scrollY: PropTypes.bool,\n  small: PropTypes.bool,\n  striped: PropTypes.bool,\n  className: PropTypes.string\n};\n\nvar DataTableHead = function DataTableHead(props) {\n  var color = props.color,\n      columns = props.columns,\n      handleSort = props.handleSort,\n      scrollX = props.scrollX,\n      scrollY = props.scrollY,\n      sortable = props.sortable,\n      textWhite = props.textWhite;\n  var theadClasses = classNames(color && (color !== \"dark\" && color !== \"light\" ? color : \"thead-\".concat(color)), textWhite && \"text-white\");\n  return React.createElement(Fragment, null, (scrollY || scrollX) && React.createElement(\"colgroup\", null, columns.map(function (col) {\n    return React.createElement(\"col\", {\n      key: col.field,\n      style: {\n        width: \"\".concat(col.width, \"px\") || \"auto\",\n        minWidth: \"\".concat(col.width, \"px\") || \"auto\"\n      }\n    });\n  })), React.createElement(\"thead\", {\n    className: theadClasses || undefined\n  }, React.createElement(\"tr\", null, columns.map(function (col) {\n    return React.createElement(\"th\", _extends({\n      onClick: function onClick() {\n        return sortable && handleSort(col.field, col.sort);\n      },\n      key: col.field,\n      className: col.hasOwnProperty(\"minimal\") ? \"th-\".concat(col.minimal) : undefined\n    }, col.attributes), col.label, sortable && col.sort !== 'disabled' && React.createElement(Fa, {\n      icon: \"sort\",\n      className: \"float-right\",\n      \"aria-hidden\": \"true\"\n    }));\n  }))));\n};\n\nDataTableHead.propTypes = {\n  color: PropTypes.string,\n  columns: PropTypes.arrayOf(PropTypes.object),\n  handleSort: PropTypes.func,\n  scrollX: PropTypes.bool,\n  scrollY: PropTypes.bool,\n  sortable: PropTypes.bool,\n  textWhite: PropTypes.bool\n};\nDataTableHead.defaultProps = {\n  scrollX: false,\n  scrollY: false,\n  sortable: true,\n  textWhite: false\n};\n\nvar TableBody = function TableBody(props) {\n  var children = props.children,\n      color = props.color,\n      rows = props.rows,\n      textWhite = props.textWhite,\n      attributes = _objectWithoutProperties(props, [\"children\", \"color\", \"rows\", \"textWhite\"]);\n\n  var classes = classNames(color, {\n    \"text-white\": textWhite\n  });\n  return React.createElement(\"tbody\", _extends({}, attributes, {\n    className: classes || undefined\n  }), rows && rows.map(function (row, index) {\n    return React.createElement(\"tr\", {\n      onClick: row.hasOwnProperty(\"clickEvent\") ? row.clickEvent : undefined,\n      key: index\n    }, Object.keys(row).map(function (key, index, array) {\n      if (key === \"clickEvent\") return null;\n\n      if (key !== \"colspan\") {\n        return array[index + 1] !== \"colspan\" ? React.createElement(\"td\", {\n          key: key\n        }, row[key]) : null;\n      } else {\n        return React.createElement(\"td\", {\n          key: key,\n          colSpan: row[key]\n        }, row[array[index - 1]]);\n      }\n    }));\n  }), children);\n};\n\nTableBody.propTypes = {\n  children: PropTypes.node,\n  color: PropTypes.string,\n  rows: PropTypes.arrayOf(PropTypes.object),\n  textWhite: PropTypes.bool\n};\nTableBody.defaultProps = {\n  textWhite: false\n};\n\nvar TableFoot = function TableFoot(props) {\n  var children = props.children,\n      color = props.color,\n      columns = props.columns,\n      textWhite = props.textWhite,\n      attributes = _objectWithoutProperties(props, [\"children\", \"color\", \"columns\", \"textWhite\"]);\n\n  var classes = classNames(color && (color !== \"dark\" && color !== \"light\" ? color : \"thead-\".concat(color)), {\n    \"text-white\": textWhite\n  });\n  return React.createElement(\"thead\", _extends({}, attributes, {\n    className: classes || undefined\n  }), columns && React.createElement(\"tr\", null, columns.map(function (col) {\n    return React.createElement(\"th\", {\n      key: col.field,\n      className: col.hasOwnProperty(\"minimal\") ? \"th-\".concat(col.minimal) : undefined\n    }, col.label);\n  })), children);\n};\n\nTableFoot.propTypes = {\n  children: PropTypes.node,\n  color: PropTypes.string,\n  columns: PropTypes.arrayOf(PropTypes.object),\n  textWhite: PropTypes.bool\n};\nTableFoot.defaultProps = {\n  textWhite: false\n};\n\nvar DataTableTable = function DataTableTable(props) {\n  var autoWidth = props.autoWidth,\n      bordered = props.bordered,\n      borderless = props.borderless,\n      btn = props.btn,\n      children = props.children,\n      columns = props.columns,\n      dark = props.dark,\n      fixed = props.fixed,\n      hover = props.hover,\n      handleSort = props.handleSort,\n      responsive = props.responsive,\n      responsiveSm = props.responsiveSm,\n      responsiveMd = props.responsiveMd,\n      responsiveLg = props.responsiveLg,\n      responsiveXl = props.responsiveXl,\n      rows = props.rows,\n      small = props.small,\n      sortable = props.sortable,\n      striped = props.striped,\n      tbodyColor = props.tbodyColor,\n      tbodyTextWhite = props.tbodyTextWhite,\n      theadColor = props.theadColor,\n      theadTextWhite = props.theadTextWhite,\n      attributes = _objectWithoutProperties(props, [\"autoWidth\", \"bordered\", \"borderless\", \"btn\", \"children\", \"columns\", \"dark\", \"fixed\", \"hover\", \"handleSort\", \"responsive\", \"responsiveSm\", \"responsiveMd\", \"responsiveLg\", \"responsiveXl\", \"rows\", \"small\", \"sortable\", \"striped\", \"tbodyColor\", \"tbodyTextWhite\", \"theadColor\", \"theadTextWhite\"]);\n\n  return React.createElement(\"div\", {\n    className: \"col-sm-12\"\n  }, React.createElement(Table, _extends({\n    autoWidth: autoWidth,\n    bordered: bordered,\n    borderless: borderless,\n    btn: btn,\n    dark: dark,\n    fixed: fixed,\n    hover: hover,\n    responsive: responsive,\n    responsiveSm: responsiveSm,\n    responsiveMd: responsiveMd,\n    responsiveLg: responsiveLg,\n    responsiveXl: responsiveXl,\n    small: small,\n    striped: striped,\n    className: \"dataTable\"\n  }, attributes), React.createElement(DataTableHead, {\n    color: theadColor,\n    textWhite: theadTextWhite,\n    columns: columns,\n    handleSort: handleSort,\n    sortable: sortable\n  }), React.createElement(TableBody, {\n    color: tbodyColor,\n    textWhite: tbodyTextWhite,\n    rows: rows\n  }), React.createElement(TableFoot, {\n    color: theadColor,\n    textWhite: theadTextWhite,\n    columns: columns\n  }), children));\n};\n\nDataTableTable.propTypes = {\n  autoWidth: PropTypes.bool.isRequired,\n  bordered: PropTypes.bool.isRequired,\n  borderless: PropTypes.bool.isRequired,\n  btn: PropTypes.bool.isRequired,\n  dark: PropTypes.bool.isRequired,\n  fixed: PropTypes.bool.isRequired,\n  hover: PropTypes.bool.isRequired,\n  handleSort: PropTypes.func.isRequired,\n  responsive: PropTypes.bool.isRequired,\n  responsiveSm: PropTypes.bool.isRequired,\n  responsiveMd: PropTypes.bool.isRequired,\n  responsiveLg: PropTypes.bool.isRequired,\n  responsiveXl: PropTypes.bool.isRequired,\n  sortable: PropTypes.bool.isRequired,\n  small: PropTypes.bool.isRequired,\n  striped: PropTypes.bool.isRequired,\n  theadColor: PropTypes.string.isRequired,\n  theadTextWhite: PropTypes.bool.isRequired,\n  tbodyColor: PropTypes.string.isRequired,\n  tbodyTextWhite: PropTypes.bool.isRequired,\n  columns: PropTypes.arrayOf(PropTypes.object),\n  rows: PropTypes.arrayOf(PropTypes.object),\n  children: PropTypes.node\n};\n\nvar DataTableTableScroll = function DataTableTableScroll(props) {\n  var autoWidth = props.autoWidth,\n      bordered = props.bordered,\n      borderless = props.borderless,\n      btn = props.btn,\n      children = props.children,\n      columns = props.columns,\n      dark = props.dark,\n      fixed = props.fixed,\n      hover = props.hover,\n      handleSort = props.handleSort,\n      handleTableBodyScroll = props.handleTableBodyScroll,\n      maxHeight = props.maxHeight,\n      responsive = props.responsive,\n      responsiveSm = props.responsiveSm,\n      responsiveMd = props.responsiveMd,\n      responsiveLg = props.responsiveLg,\n      responsiveXl = props.responsiveXl,\n      rows = props.rows,\n      scrollX = props.scrollX,\n      scrollY = props.scrollY,\n      small = props.small,\n      sortable = props.sortable,\n      striped = props.striped,\n      tbodyColor = props.tbodyColor,\n      tbodyTextWhite = props.tbodyTextWhite,\n      theadColor = props.theadColor,\n      theadTextWhite = props.theadTextWhite,\n      translateScrollHead = props.translateScrollHead,\n      attributes = _objectWithoutProperties(props, [\"autoWidth\", \"bordered\", \"borderless\", \"btn\", \"children\", \"columns\", \"dark\", \"fixed\", \"hover\", \"handleSort\", \"handleTableBodyScroll\", \"maxHeight\", \"responsive\", \"responsiveSm\", \"responsiveMd\", \"responsiveLg\", \"responsiveXl\", \"rows\", \"scrollX\", \"scrollY\", \"small\", \"sortable\", \"striped\", \"tbodyColor\", \"tbodyTextWhite\", \"theadColor\", \"theadTextWhite\", \"translateScrollHead\"]);\n\n  return React.createElement(\"div\", {\n    className: \"col-sm-12\"\n  }, React.createElement(\"div\", {\n    className: \"dataTables_scroll\"\n  }, React.createElement(\"div\", {\n    className: \"dataTables_scrollHead\",\n    style: {\n      overflow: \"hidden\"\n    }\n  }, React.createElement(\"div\", {\n    className: \"dataTables_scrollHeadInner\",\n    style: {\n      position: \"relative\",\n      transform: \"translateX(-\".concat(translateScrollHead, \"px)\"),\n      boxSizing: \"content-box\",\n      paddingRight: \"15px\",\n      minWidth: \"\".concat(scrollX ? columns.map(function (col) {\n        return col.width;\n      }).reduce(function (prev, curr) {\n        return prev + curr;\n      }, 0) + \"px\" : \"auto\")\n    }\n  }, React.createElement(Table, _extends({\n    autoWidth: autoWidth,\n    bordered: bordered,\n    borderless: borderless,\n    btn: btn,\n    dark: dark,\n    fixed: fixed,\n    hover: hover,\n    responsive: responsive,\n    responsiveSm: responsiveSm,\n    responsiveMd: responsiveMd,\n    responsiveLg: responsiveLg,\n    responsiveXl: responsiveXl,\n    small: small,\n    striped: striped,\n    className: \"dataTable\"\n  }, attributes), React.createElement(DataTableHead, {\n    color: theadColor,\n    textWhite: theadTextWhite,\n    columns: columns,\n    handleSort: handleSort,\n    scrollX: scrollX,\n    scrollY: scrollY,\n    sortable: sortable\n  })))), React.createElement(\"div\", {\n    className: \"dataTable_scrollBody\",\n    style: {\n      overflow: \"auto\"\n    },\n    onScroll: handleTableBodyScroll\n  }, React.createElement(Table, _extends({\n    style: {\n      minWidth: \"\".concat(scrollX ? columns.map(function (col) {\n        return col.width;\n      }).reduce(function (prev, curr) {\n        return prev + curr;\n      }, 0) + \"px\" : \"auto\")\n    },\n    autoWidth: autoWidth,\n    bordered: bordered,\n    borderless: borderless,\n    btn: btn,\n    dark: dark,\n    fixed: fixed,\n    hover: hover,\n    maxHeight: maxHeight,\n    responsive: responsive,\n    responsiveSm: responsiveSm,\n    responsiveMd: responsiveMd,\n    responsiveLg: responsiveLg,\n    responsiveXl: responsiveXl,\n    scrollY: scrollY,\n    small: small,\n    striped: striped,\n    className: \"dataTable\"\n  }, attributes), React.createElement(\"colgroup\", null, columns.map(function (col) {\n    return React.createElement(\"col\", {\n      key: col.field,\n      style: {\n        width: \"\".concat(col.width, \"px\") || \"auto\",\n        minWidth: \"\".concat(col.width, \"px\") || \"auto\"\n      }\n    });\n  })), React.createElement(TableBody, {\n    color: tbodyColor,\n    textWhite: tbodyTextWhite,\n    rows: rows\n  }), children))));\n};\n\nDataTableTableScroll.propTypes = {\n  autoWidth: PropTypes.bool.isRequired,\n  bordered: PropTypes.bool.isRequired,\n  borderless: PropTypes.bool.isRequired,\n  btn: PropTypes.bool.isRequired,\n  dark: PropTypes.bool.isRequired,\n  fixed: PropTypes.bool.isRequired,\n  hover: PropTypes.bool.isRequired,\n  handleSort: PropTypes.func.isRequired,\n  handleTableBodyScroll: PropTypes.func.isRequired,\n  responsive: PropTypes.bool.isRequired,\n  responsiveSm: PropTypes.bool.isRequired,\n  responsiveMd: PropTypes.bool.isRequired,\n  responsiveLg: PropTypes.bool.isRequired,\n  responsiveXl: PropTypes.bool.isRequired,\n  sortable: PropTypes.bool.isRequired,\n  small: PropTypes.bool.isRequired,\n  striped: PropTypes.bool.isRequired,\n  theadColor: PropTypes.string.isRequired,\n  theadTextWhite: PropTypes.bool.isRequired,\n  tbodyColor: PropTypes.string.isRequired,\n  tbodyTextWhite: PropTypes.bool.isRequired,\n  translateScrollHead: PropTypes.number.isRequired,\n  columns: PropTypes.arrayOf(PropTypes.object),\n  rows: PropTypes.arrayOf(PropTypes.object),\n  children: PropTypes.node,\n  maxHeight: PropTypes.string,\n  scrollX: PropTypes.bool,\n  scrollY: PropTypes.bool\n};\n\nvar DataTableSelect = function DataTableSelect(_ref) {\n  var value = _ref.value,\n      onChange = _ref.onChange,\n      entries = _ref.entries,\n      label = _ref.label;\n\n  var getValue = function getValue(e) {\n    var value = parseInt(e.target.value, 10);\n    onChange(value);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"dataTables_length bs-select\"\n  }, React.createElement(\"label\", null, label, React.createElement(\"select\", {\n    value: value,\n    onChange: getValue,\n    className: \"custom-select custom-select-sm form-control form-control-sm\"\n  }, entries.map(function (entry) {\n    return React.createElement(\"option\", {\n      key: entry,\n      value: entry\n    }, entry);\n  }))));\n};\n\nDataTableSelect.propTypes = {\n  entries: PropTypes.arrayOf(PropTypes.number).isRequired,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.object]).isRequired,\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.number.isRequired\n};\n\nvar DataTableEntries = function DataTableEntries(props) {\n  var handleEntriesChange = props.handleEntriesChange,\n      entries = props.entries,\n      entriesArr = props.entriesArr,\n      paging = props.paging,\n      label = props.label;\n  return React.createElement(\"div\", {\n    className: \"col-sm-12 col-md-6\"\n  }, paging && React.createElement(DataTableSelect, {\n    value: entries,\n    onChange: handleEntriesChange,\n    entries: entriesArr,\n    label: label\n  }));\n};\n\nDataTableEntries.propTypes = {\n  handleEntriesChange: PropTypes.func.isRequired,\n  entries: PropTypes.number.isRequired,\n  entriesArr: PropTypes.arrayOf(PropTypes.number).isRequired,\n  paging: PropTypes.bool.isRequired,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.object]).isRequired\n};\n\nvar DataTableInput = function DataTableInput(_ref) {\n  var value = _ref.value,\n      onChange = _ref.onChange,\n      label = _ref.label;\n  return React.createElement(\"div\", {\n    className: \"dataTables_filter\"\n  }, React.createElement(\"label\", null, label || \"Search\", React.createElement(\"input\", {\n    value: value,\n    onChange: onChange,\n    type: \"search\",\n    className: \"form-control form-control-sm\",\n    placeholder: label || \"Search\"\n  })));\n};\n\nDataTableInput.propTypes = {\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.object]),\n  onChange: PropTypes.func,\n  value: PropTypes.string\n};\n\nvar DataTableSearch = function DataTableSearch(props) {\n  var handleSearchChange = props.handleSearchChange,\n      search = props.search,\n      searching = props.searching,\n      label = props.label;\n  return React.createElement(\"div\", {\n    className: \"col-sm-12 col-md-6\"\n  }, searching && React.createElement(DataTableInput, {\n    value: search,\n    onChange: handleSearchChange,\n    label: label\n  }));\n};\n\nDataTableSearch.propTypes = {\n  handleSearchChange: PropTypes.func.isRequired,\n  search: PropTypes.string.isRequired,\n  searching: PropTypes.bool.isRequired,\n  label: PropTypes.string\n};\n\nvar DataTableInfo = function DataTableInfo(props) {\n  var activePage = props.activePage,\n      entries = props.entries,\n      filteredRows = props.filteredRows,\n      info = props.info,\n      pages = props.pages,\n      label = props.label;\n  return React.createElement(\"div\", {\n    className: \"col-sm-12 col-md-5\"\n  }, info && React.createElement(\"div\", {\n    className: \"dataTables_info\",\n    role: \"status\",\n    \"aria-live\": \"polite\"\n  }, label[0], \" \", activePage > 0 ? activePage * entries + 1 : activePage + 1, \" \", label[1], \" \", pages.length - 1 > activePage ? pages[activePage].length * (activePage + 1) : filteredRows.length, \" \", label[2], \" \", filteredRows.length, \" \", label[3]));\n};\n\nDataTableInfo.propTypes = {\n  activePage: PropTypes.number.isRequired,\n  entries: PropTypes.number.isRequired,\n  filteredRows: PropTypes.array.isRequired,\n  info: PropTypes.bool.isRequired,\n  pages: PropTypes.array.isRequired,\n  label: PropTypes.arrayOf(PropTypes.string)\n};\nDataTableInfo.defaultProps = {\n  label: [\"Showing\", \"to\", \"of\", \"entries\"]\n};\n\nvar Pagination =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Pagination, _Component);\n\n  function Pagination() {\n    _classCallCheck(this, Pagination);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Pagination).apply(this, arguments));\n  }\n\n  _createClass(Pagination, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          circle = _this$props.circle,\n          className = _this$props.className,\n          color = _this$props.color,\n          Tag = _this$props.tag,\n          size = _this$props.size,\n          attributes = _objectWithoutProperties(_this$props, [\"children\", \"circle\", \"className\", \"color\", \"tag\", \"size\"]);\n\n      var classes = classNames(\"pagination\", circle && \"pagination-circle\", color && \"pg-\" + color, size ? \"pagination-\".concat(size) : false, className);\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes\n      }), children);\n    }\n  }]);\n\n  return Pagination;\n}(Component);\n\nPagination.propTypes = {\n  children: PropTypes.node,\n  circle: PropTypes.bool,\n  className: PropTypes.string,\n  color: PropTypes.string,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  size: PropTypes.oneOf(['lg', 'sm'])\n};\nPagination.defaultProps = {\n  circle: false,\n  className: \"\",\n  color: \"\",\n  tag: \"ul\"\n};\n\nvar PageItem =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PageItem, _Component);\n\n  function PageItem() {\n    _classCallCheck(this, PageItem);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PageItem).apply(this, arguments));\n  }\n\n  _createClass(PageItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          active = _this$props.active,\n          className = _this$props.className,\n          children = _this$props.children,\n          disabled = _this$props.disabled,\n          Tag = _this$props.tag,\n          attributes = _objectWithoutProperties(_this$props, [\"active\", \"className\", \"children\", \"disabled\", \"tag\"]);\n\n      var classes = classNames(\"page-item\", disabled ? \"disabled\" : \"\", active ? \"active\" : \"\", className);\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes\n      }), children);\n    }\n  }]);\n\n  return PageItem;\n}(Component);\n\nPageItem.propTypes = {\n  active: PropTypes.bool,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  disabled: PropTypes.bool,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n};\nPageItem.defaultProps = {\n  active: false,\n  className: \"\",\n  disabled: false,\n  tag: \"li\"\n};\n\nvar PageLink =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PageLink, _Component);\n\n  function PageLink() {\n    _classCallCheck(this, PageLink);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PageLink).apply(this, arguments));\n  }\n\n  _createClass(PageLink, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          className = _this$props.className,\n          Tag = _this$props.tag,\n          attributes = _objectWithoutProperties(_this$props, [\"children\", \"className\", \"tag\"]);\n\n      var classes = classNames(\"page-link\", className);\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes\n      }), children);\n    }\n  }]);\n\n  return PageLink;\n}(Component);\n\nPageLink.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  children: PropTypes.node\n};\nPageLink.defaultProps = {\n  tag: \"a\"\n};\n\nvar DataTablePagination =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DataTablePagination, _Component);\n\n  function DataTablePagination(props) {\n    var _this;\n\n    _classCallCheck(this, DataTablePagination);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DataTablePagination).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidUpdate\", function (prevProps) {\n      if (prevProps.pages !== _this.props.pages) {\n        _this.setState({\n          pages: _this.props.pages\n        }, function () {\n          return _this.groupPages();\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"pagesIndexify\", function () {\n      var mutablePages = _toConsumableArray(_this.state.pages);\n\n      mutablePages.forEach(function (page, index) {\n        return page.index = index;\n      });\n      return mutablePages;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"groupPages\", function () {\n      var pGroups = [];\n\n      var pages = _this.pagesIndexify();\n\n      while (pages.length > 0) {\n        pGroups.push(pages.splice(0, _this.props.pagesAmount));\n      }\n\n      _this.setState({\n        pGroups: pGroups\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"choosePagesGroup\", function () {\n      var pGroupNumber = Math.floor(_this.props.activePage / _this.props.pagesAmount);\n      return _this.state.pGroups.length ? _this.state.pGroups[pGroupNumber] : [];\n    });\n\n    _this.state = {\n      pages: props.pages,\n      pGroups: []\n    };\n    return _this;\n  }\n\n  _createClass(DataTablePagination, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.groupPages();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          activePage = _this$props.activePage,\n          changeActivePage = _this$props.changeActivePage,\n          pages = _this$props.pages,\n          label = _this$props.label;\n      return React.createElement(\"div\", {\n        className: \"col-sm-12 col-md-7\"\n      }, React.createElement(\"div\", {\n        className: \"dataTables_paginate\"\n      }, React.createElement(Pagination, null, React.createElement(PageItem, {\n        disabled: activePage === 0\n      }, React.createElement(PageLink, {\n        className: \"page-link\",\n        \"aria-label\": label[0],\n        onClick: function onClick() {\n          return changeActivePage(activePage - 1);\n        }\n      }, React.createElement(\"span\", null, label[0]))), this.choosePagesGroup().map(function (page) {\n        return React.createElement(PageItem, {\n          key: Object.keys(page[0])[0] + page.index,\n          active: page.index === activePage\n        }, React.createElement(PageLink, {\n          className: \"page-link\",\n          onClick: function onClick() {\n            return changeActivePage(page.index);\n          }\n        }, page.index + 1, \" \", page.index === activePage && React.createElement(\"span\", {\n          className: \"sr-only\"\n        }, \"(current)\")));\n      }), React.createElement(PageItem, {\n        disabled: activePage === pages.length - 1\n      }, React.createElement(PageLink, {\n        className: \"page-link\",\n        \"aria-label\": label[1],\n        onClick: function onClick() {\n          return changeActivePage(activePage + 1);\n        }\n      }, React.createElement(\"span\", null, label[1]))))));\n    }\n  }]);\n\n  return DataTablePagination;\n}(Component);\n\nDataTablePagination.propTypes = {\n  activePage: PropTypes.number.isRequired,\n  changeActivePage: PropTypes.func.isRequired,\n  pages: PropTypes.array.isRequired,\n  pagesAmount: PropTypes.number.isRequired,\n  label: PropTypes.arrayOf(PropTypes.string).isRequired\n};\n\nvar DataTable =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DataTable, _Component);\n\n  function DataTable(props) {\n    var _this;\n\n    _classCallCheck(this, DataTable);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DataTable).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"fetchData\", function (link) {\n      fetch(link).then(function (res) {\n        return res.json();\n      }).then(function (json) {\n        _this.setState({\n          columns: json.columns,\n          filteredRows: json.rows,\n          rows: json.rows\n        });\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"paginateRowsInitialy\", function () {\n      // findout how many pages there are need to be, then slice rows into pages\n      var pagesAmount = Math.ceil(_this.state.rows.length / _this.state.entries);\n\n      for (var i = 1; i <= pagesAmount; i++) {\n        var pageEndIndex = i * _this.state.entries;\n\n        _this.state.pages.push(_this.state.rows.slice(pageEndIndex - _this.state.entries, pageEndIndex));\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEntriesChange\", function (value) {\n      _this.setState({\n        entries: Array.isArray(value) ? value[0] : value\n      }, function () {\n        return _this.paginateRows();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSearchChange\", function (e) {\n      _this.setState({\n        search: e.target.value\n      }, function () {\n        return _this.filterRows();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSort\", function (field, sort) {\n      if (sort !== \"disabled\") {\n        _this.setState(function (prevState) {\n          // asc by default\n          switch (sort) {\n            case \"desc\":\n              prevState.rows.sort(function (a, b) {\n                return a[field] > b[field] ? -1 : 1;\n              });\n              break;\n\n            default:\n              prevState.rows.sort(function (a, b) {\n                return a[field] > b[field] ? 1 : -1;\n              });\n          }\n\n          prevState.columns[prevState.columns.findIndex(function (column) {\n            return column.field === field;\n          })].sort = sort === \"asc\" ? \"desc\" : \"asc\";\n          return {\n            rows: prevState.rows,\n            columns: prevState.columns\n          };\n        }, function () {\n          return _this.filterRows();\n        });\n      } else return;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"filterRows\", function () {\n      _this.setState(function (prevState) {\n        var filteredRows = prevState.rows.filter(function (row) {\n          for (var key in row) {\n            if (Object.prototype.hasOwnProperty.call(row, key)) {\n              var stringValue = row[key] !== null ? row[key].toString() : '';\n              if (stringValue.toLowerCase().match(_this.state.search.toLowerCase())) return true;\n            }\n          }\n\n          return false;\n        });\n        if (filteredRows.length === 0) filteredRows.push({\n          message: 'No matching records found',\n          colspan: prevState.columns.length\n        });\n        return {\n          filteredRows: filteredRows,\n          activePage: 0\n        };\n      }, function () {\n        return _this.paginateRows();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"paginateRows\", function () {\n      // findout how many pages there are need to be, then slice rows into pages\n      var pagesAmount = Math.ceil(_this.state.filteredRows.length / _this.state.entries);\n\n      _this.setState(function (prevState) {\n        prevState.pages = [];\n\n        if (_this.props.paging) {\n          for (var i = 1; i <= pagesAmount; i++) {\n            var pageEndIndex = i * prevState.entries;\n            prevState.pages.push(prevState.filteredRows.slice(pageEndIndex - prevState.entries, pageEndIndex));\n          }\n\n          prevState.activePage = prevState.activePage < prevState.pages.length || prevState.activePage === 0 ? prevState.activePage : prevState.pages.length - 1;\n        } else {\n          prevState.pages.push(prevState.filteredRows);\n          prevState.activePage = 0;\n        }\n\n        return _objectSpread({}, prevState);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"changeActivePage\", function (page) {\n      _this.setState({\n        activePage: page\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTableBodyScroll\", function (e) {\n      _this.setState({\n        translateScrollHead: e.target.scrollLeft\n      });\n    });\n\n    _this.state = {\n      activePage: 0,\n      columns: props.data.columns || [],\n      entries: props.entries,\n      filteredRows: props.data.rows || [],\n      pages: [],\n      rows: props.data.rows || [],\n      search: '',\n      translateScrollHead: 0,\n      order: props.order || []\n    };\n\n    if (_this.props.paging) {\n      _this.paginateRowsInitialy();\n    } else {\n      _this.state.pages.push(_this.state.rows);\n    }\n\n    return _this;\n  }\n\n  _createClass(DataTable, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (typeof this.props.data === 'string') {\n        this.fetchData(this.props.data);\n      }\n\n      this.state.order.length && this.handleSort(this.state.order[0], this.state.order[1]);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevProps.data !== this.props.data) {\n        if (typeof this.props.data === 'string') {\n          this.fetchData(this.props.data);\n        } else {\n          this.setState({\n            columns: this.props.data.columns || [],\n            filteredRows: this.props.data.rows || [],\n            rows: this.props.data.rows || []\n          });\n        }\n      }\n\n      if (prevState.pages !== this.state.pages || prevState.rows !== this.state.rows) {\n        this.paginateRows();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          autoWidth = _this$props.autoWidth,\n          bordered = _this$props.bordered,\n          borderless = _this$props.borderless,\n          btn = _this$props.btn,\n          children = _this$props.children,\n          dark = _this$props.dark,\n          data = _this$props.data,\n          entriesOptions = _this$props.entriesOptions,\n          entriesLabel = _this$props.entriesLabel,\n          exportToCSV = _this$props.exportToCSV,\n          fixed = _this$props.fixed,\n          hover = _this$props.hover,\n          info = _this$props.info,\n          infoLabel = _this$props.infoLabel,\n          maxHeight = _this$props.maxHeight,\n          order = _this$props.order,\n          pagesAmount = _this$props.pagesAmount,\n          paging = _this$props.paging,\n          paginationLabel = _this$props.paginationLabel,\n          responsive = _this$props.responsive,\n          responsiveSm = _this$props.responsiveSm,\n          responsiveMd = _this$props.responsiveMd,\n          responsiveLg = _this$props.responsiveLg,\n          responsiveXl = _this$props.responsiveXl,\n          searching = _this$props.searching,\n          searchLabel = _this$props.searchLabel,\n          scrollX = _this$props.scrollX,\n          scrollY = _this$props.scrollY,\n          small = _this$props.small,\n          sortable = _this$props.sortable,\n          striped = _this$props.striped,\n          tbodyColor = _this$props.tbodyColor,\n          tbodyTextWhite = _this$props.tbodyTextWhite,\n          theadColor = _this$props.theadColor,\n          theadTextWhite = _this$props.theadTextWhite,\n          attributes = _objectWithoutProperties(_this$props, [\"autoWidth\", \"bordered\", \"borderless\", \"btn\", \"children\", \"dark\", \"data\", \"entriesOptions\", \"entriesLabel\", \"exportToCSV\", \"fixed\", \"hover\", \"info\", \"infoLabel\", \"maxHeight\", \"order\", \"pagesAmount\", \"paging\", \"paginationLabel\", \"responsive\", \"responsiveSm\", \"responsiveMd\", \"responsiveLg\", \"responsiveXl\", \"searching\", \"searchLabel\", \"scrollX\", \"scrollY\", \"small\", \"sortable\", \"striped\", \"tbodyColor\", \"tbodyTextWhite\", \"theadColor\", \"theadTextWhite\"]);\n\n      var _this$state = this.state,\n          columns = _this$state.columns,\n          entries = _this$state.entries,\n          filteredRows = _this$state.filteredRows,\n          pages = _this$state.pages,\n          activePage = _this$state.activePage,\n          search = _this$state.search,\n          translateScrollHead = _this$state.translateScrollHead;\n      return React.createElement(\"div\", {\n        className: \"dataTables_wrapper dt-bootstrap4\"\n      }, React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(DataTableEntries, {\n        paging: paging,\n        entries: entries,\n        handleEntriesChange: this.handleEntriesChange,\n        entriesArr: entriesOptions,\n        label: entriesLabel\n      }), React.createElement(DataTableSearch, {\n        handleSearchChange: this.handleSearchChange,\n        search: search,\n        searching: searching,\n        label: searchLabel\n      })), !scrollY && !scrollX && React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(DataTableTable, _extends({\n        autoWidth: autoWidth,\n        bordered: bordered,\n        borderless: borderless,\n        btn: btn,\n        dark: dark,\n        fixed: fixed,\n        hover: hover,\n        responsive: responsive,\n        responsiveSm: responsiveSm,\n        responsiveMd: responsiveMd,\n        responsiveLg: responsiveLg,\n        responsiveXl: responsiveXl,\n        small: small,\n        striped: striped,\n        theadColor: theadColor,\n        theadTextWhite: theadTextWhite,\n        columns: columns,\n        handleSort: this.handleSort,\n        sortable: sortable,\n        tbodyColor: tbodyColor,\n        tbodyTextWhite: tbodyTextWhite,\n        rows: pages[activePage]\n      }, attributes))), (scrollY || scrollX) && React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(DataTableTableScroll, _extends({\n        autoWidth: autoWidth,\n        bordered: bordered,\n        borderless: borderless,\n        btn: btn,\n        dark: dark,\n        fixed: fixed,\n        handleTableBodyScroll: this.handleTableBodyScroll,\n        hover: hover,\n        maxHeight: maxHeight,\n        responsive: responsive,\n        responsiveSm: responsiveSm,\n        responsiveMd: responsiveMd,\n        responsiveLg: responsiveLg,\n        responsiveXl: responsiveXl,\n        scrollX: scrollX,\n        scrollY: scrollY,\n        small: small,\n        striped: striped,\n        theadColor: theadColor,\n        theadTextWhite: theadTextWhite,\n        columns: columns,\n        handleSort: this.handleSort,\n        sortable: sortable,\n        tbodyColor: tbodyColor,\n        tbodyTextWhite: tbodyTextWhite,\n        rows: pages[activePage],\n        translateScrollHead: translateScrollHead\n      }, attributes))), paging && React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(DataTableInfo, {\n        activePage: activePage,\n        entries: entries,\n        filteredRows: filteredRows,\n        info: info,\n        pages: pages,\n        label: infoLabel\n      }), React.createElement(DataTablePagination, {\n        activePage: activePage,\n        changeActivePage: this.changeActivePage,\n        pages: pages,\n        pagesAmount: pagesAmount,\n        label: paginationLabel\n      })));\n    }\n  }]);\n\n  return DataTable;\n}(Component);\n\nDataTable.propTypes = {\n  autoWidth: PropTypes.bool,\n  bordered: PropTypes.bool,\n  borderless: PropTypes.bool,\n  btn: PropTypes.bool,\n  children: PropTypes.node,\n  dark: PropTypes.bool,\n  data: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  entries: PropTypes.number,\n  entriesLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.object]),\n  entriesOptions: PropTypes.arrayOf(PropTypes.number),\n  exportToCSV: PropTypes.bool,\n  fixed: PropTypes.bool,\n  hover: PropTypes.bool,\n  info: PropTypes.bool,\n  infoLabel: PropTypes.arrayOf(PropTypes.string),\n  maxHeight: PropTypes.string,\n  order: PropTypes.arrayOf(PropTypes.string),\n  pagesAmount: PropTypes.number,\n  paging: PropTypes.bool,\n  paginationLabel: PropTypes.arrayOf(PropTypes.string),\n  responsive: PropTypes.bool,\n  responsiveSm: PropTypes.bool,\n  responsiveMd: PropTypes.bool,\n  responsiveLg: PropTypes.bool,\n  responsiveXl: PropTypes.bool,\n  searching: PropTypes.bool,\n  searchLabel: PropTypes.string,\n  scrollX: PropTypes.bool,\n  scrollY: PropTypes.bool,\n  sortable: PropTypes.bool,\n  small: PropTypes.bool,\n  striped: PropTypes.bool,\n  theadColor: PropTypes.string,\n  theadTextWhite: PropTypes.bool,\n  tbodyColor: PropTypes.string,\n  tbodyTextWhite: PropTypes.bool\n};\nDataTable.defaultProps = {\n  autoWidth: false,\n  bordered: false,\n  borderless: false,\n  btn: false,\n  dark: false,\n  data: {},\n  entries: 10,\n  entriesLabel: \"Show entries\",\n  entriesOptions: [10, 20, 50, 100],\n  exportToCSV: false,\n  fixed: false,\n  hover: false,\n  info: true,\n  infoLabel: [\"Showing\", \"to\", \"of\", \"entries\"],\n  order: [],\n  pagesAmount: 8,\n  paging: true,\n  paginationLabel: [\"Previous\", \"Next\"],\n  responsive: false,\n  responsiveSm: false,\n  responsiveMd: false,\n  responsiveLg: false,\n  responsiveXl: false,\n  searching: true,\n  searchLabel: \"Search\",\n  scrollX: false,\n  scrollY: false,\n  sortable: true,\n  small: false,\n  striped: false,\n  theadColor: '',\n  theadTextWhite: false,\n  tbodyColor: '',\n  tbodyTextWhite: false\n};\nvar propTypes = {\n  children: PropTypes.node,\n  active: PropTypes.bool,\n  disabled: PropTypes.bool,\n  divider: PropTypes.bool,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  header: PropTypes.bool,\n  onClick: PropTypes.func,\n  className: PropTypes.string,\n  toggle: PropTypes.bool\n};\nvar contextTypes = {\n  toggle: PropTypes.func\n};\nvar defaultProps = {\n  tag: \"button\",\n  toggle: true\n};\n\nvar DropdownItem =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DropdownItem, _React$Component);\n\n  function DropdownItem(props) {\n    var _this;\n\n    _classCallCheck(this, DropdownItem);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DropdownItem).call(this, props));\n    _this.onClick = _this.onClick.bind(_assertThisInitialized(_this));\n    _this.getTabIndex = _this.getTabIndex.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(DropdownItem, [{\n    key: \"onClick\",\n    value: function onClick(e) {\n      if (this.props.disabled || this.props.header || this.props.divider) {\n        e.preventDefault();\n        return;\n      }\n\n      if (this.props.onClick) {\n        this.props.onClick(e);\n      }\n\n      if (this.props.toggle) {\n        this.context.toggle(e);\n      }\n    }\n  }, {\n    key: \"getTabIndex\",\n    value: function getTabIndex() {\n      if (this.props.disabled || this.props.header || this.props.divider) {\n        return \"-1\";\n      }\n\n      return \"0\";\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var tabIndex = this.getTabIndex();\n\n      var _omit = omit(this.props, [\"toggle\"]),\n          className = _omit.className,\n          divider = _omit.divider,\n          Tag = _omit.tag,\n          header = _omit.header,\n          active = _omit.active,\n          props = _objectWithoutProperties(_omit, [\"className\", \"divider\", \"tag\", \"header\", \"active\"]);\n\n      var classes = classNames({\n        disabled: props.disabled,\n        \"dropdown-item\": !divider && !header,\n        active: active,\n        \"dropdown-header\": header,\n        \"dropdown-divider\": divider\n      }, className);\n\n      if (Tag === \"button\") {\n        if (header) {\n          Tag = \"h6\";\n        } else if (divider) {\n          Tag = \"div\";\n        } else if (props.href) {\n          Tag = \"a\";\n        }\n      }\n\n      return React.createElement(Tag, _extends({\n        type: Tag === \"button\" && (props.onClick || this.props.toggle) ? \"button\" : undefined\n      }, props, {\n        tabIndex: tabIndex,\n        className: classes,\n        onClick: this.onClick\n      }));\n    }\n  }]);\n\n  return DropdownItem;\n}(React.Component);\n\nDropdownItem.propTypes = propTypes;\nDropdownItem.defaultProps = defaultProps;\nDropdownItem.contextTypes = contextTypes;\nvar css$5 = \".dropup .dropdown-menu {\\n  top: auto !important;\\n  bottom: 100% !important;\\n  transform: translate3d(5px, 5px, 0px) !important;\\n}\\n\\n.dropdown-menu-right {\\n  left: 0 !important;\\n  right: auto !important;\\n}\\n\";\nstyleInject(css$5);\n\nvar DropdownMenuComponent = function DropdownMenuComponent(props) {\n  var d_tag = props.d_tag,\n      d_tabIndex = props.d_tabIndex,\n      d_role = props.d_role,\n      d_attributes = props.d_attributes,\n      d_aria = props.d_aria,\n      d_classes = props.d_classes,\n      d_key = props.d_key,\n      children = props.children;\n  var Tag = d_tag;\n  return React.createElement(Fragment, null, React.createElement(Tag, _extends({\n    tabIndex: d_tabIndex,\n    role: d_role\n  }, d_attributes, {\n    \"aria-hidden\": d_aria,\n    className: d_classes,\n    key: d_key\n  }), children));\n};\n\nDropdownMenuComponent.propTypes = {\n  d_aria: PropTypes.bool.isRequired,\n  d_attributes: PropTypes.object.isRequired,\n  d_key: PropTypes.string.isRequired,\n  d_role: PropTypes.string.isRequired,\n  d_tabIndex: PropTypes.string.isRequired,\n  d_tag: PropTypes.any.isRequired,\n  children: PropTypes.node.isRequired,\n  d_classes: PropTypes.string\n};\nDropdownMenuComponent.defaultProps = {\n  d_classes: \"\"\n};\nvar noFlipModifier = {\n  flip: {\n    enabled: false\n  }\n};\n\nvar DropdownMenu =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DropdownMenu, _Component);\n\n  function DropdownMenu() {\n    _classCallCheck(this, DropdownMenu);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DropdownMenu).apply(this, arguments));\n  }\n\n  _createClass(DropdownMenu, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          basic = _this$props.basic,\n          className = _this$props.className,\n          right = _this$props.right,\n          children = _this$props.children,\n          tag = _this$props.tag,\n          flip = _this$props.flip,\n          color = _this$props.color,\n          attrs = _objectWithoutProperties(_this$props, [\"basic\", \"className\", \"right\", \"children\", \"tag\", \"flip\", \"color\"]);\n\n      var classes = classNames('dropdown-menu', color && \"dropdown-\".concat(color), {\n        'dropdown-menu-right': right,\n        show: this.context.isOpen,\n        basic: basic\n      }, className);\n      var Tag = tag;\n\n      if (this.context.isOpen) {\n        Tag = Popper;\n        var position1 = this.context.dropup ? 'top' : 'bottom';\n        var position2 = right ? 'end' : 'start';\n        attrs.placement = \"\".concat(position1, \"-\").concat(position2);\n        attrs.component = tag;\n        attrs.modifiers = !flip ? noFlipModifier : undefined;\n      }\n\n      return React.createElement(DropdownMenuComponent, {\n        isOpen: this.context.isOpen,\n        d_tag: Tag,\n        d_tabIndex: \"-1\",\n        d_role: \"menu\",\n        d_attributes: attrs,\n        d_aria: !this.context.isOpen,\n        d_classes: classes,\n        d_key: \"dropDownMenu\"\n      }, children);\n    }\n  }]);\n\n  return DropdownMenu;\n}(Component);\n\nDropdownMenu.propTypes = {\n  children: PropTypes.node.isRequired,\n  basic: PropTypes.bool,\n  className: PropTypes.string,\n  flip: PropTypes.bool,\n  right: PropTypes.bool,\n  tag: PropTypes.string\n};\nDropdownMenu.defaultProps = {\n  basic: false,\n  className: '',\n  flip: false,\n  right: false,\n  tag: 'div',\n  color: false\n};\nDropdownMenu.contextTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  dropup: PropTypes.bool.isRequired,\n  color: PropTypes.oneOfType([PropTypes.oneOf(['primary', 'default', 'secondary', 'success', 'dark', 'danger', 'info', 'warning', 'ins']), PropTypes.bool])\n};\n\nvar DropdownToggle =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DropdownToggle, _React$Component);\n\n  function DropdownToggle(props) {\n    var _this;\n\n    _classCallCheck(this, DropdownToggle);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DropdownToggle).call(this, props));\n    _this.onClick = _this.onClick.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(DropdownToggle, [{\n    key: \"onClick\",\n    value: function onClick(e) {\n      if (this.props.disabled) {\n        e.preventDefault();\n        return;\n      }\n\n      if (this.props.nav && !this.props.tag) {\n        e.preventDefault();\n      }\n\n      if (this.props.onClick) {\n        this.props.onClick(e);\n      }\n\n      this.context.toggle(e);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          color = _this$props.color,\n          caret = _this$props.caret,\n          nav = _this$props.nav,\n          tag = _this$props.tag,\n          props = _objectWithoutProperties(_this$props, [\"className\", \"color\", \"caret\", \"nav\", \"tag\"]);\n\n      var ariaLabel = props[\"aria-label\"] || \"Toggle Dropdown\";\n      var classes = classNames({\n        \"dropdown-toggle\": caret,\n        \"nav-link\": nav\n      }, className);\n      var children = props.children || React.createElement(\"span\", {\n        className: \"sr-only\"\n      }, ariaLabel);\n      var Tag;\n\n      if (nav && !tag) {\n        Tag = \"a\";\n        props.href = \"#\";\n      } else if (!tag) {\n        Tag = Button;\n        props.color = color;\n      } else {\n        Tag = tag;\n      }\n\n      return React.createElement(Target, _extends({}, props, {\n        className: classes,\n        component: Tag,\n        onClick: this.onClick,\n        \"aria-expanded\": this.context.isOpen\n      }), children);\n    }\n  }]);\n\n  return DropdownToggle;\n}(React.Component);\n\nDropdownToggle.propTypes = {\n  caret: PropTypes.bool,\n  color: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  \"aria-haspopup\": PropTypes.bool,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  nav: PropTypes.bool\n};\nDropdownToggle.defaultProps = {\n  \"aria-haspopup\": true,\n  color: \"secondary\"\n};\nDropdownToggle.contextTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  toggle: PropTypes.func.isRequired\n};\n\nvar EdgeHeader =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EdgeHeader, _Component);\n\n  function EdgeHeader() {\n    _classCallCheck(this, EdgeHeader);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(EdgeHeader).apply(this, arguments));\n  }\n\n  _createClass(EdgeHeader, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          color = _this$props.color,\n          className = _this$props.className,\n          Tag = _this$props.tag,\n          attributes = _objectWithoutProperties(_this$props, [\"color\", \"className\", \"tag\"]);\n\n      var classes = classNames(\"edge-header\", color, className);\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes\n      }));\n    }\n  }]);\n\n  return EdgeHeader;\n}(Component);\n\nEdgeHeader.propTypes = {\n  color: PropTypes.string,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string\n};\nEdgeHeader.defaultProps = {\n  color: \"deep-purple\",\n  tag: \"div\"\n};\n\nvar FormInline =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FormInline, _React$Component);\n\n  function FormInline(props) {\n    var _this;\n\n    _classCallCheck(this, FormInline);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FormInline).call(this, props));\n    _this.state = {\n      cursorPos: {}\n    };\n    return _this;\n  }\n\n  _createClass(FormInline, [{\n    key: \"handleClick\",\n    value: function handleClick(e) {\n      // Get Cursor Position\n      var cursorPos = {\n        top: e.clientY,\n        left: e.clientX,\n        time: Date.now()\n      };\n      this.setState({\n        cursorPos: cursorPos\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          waves = _this$props.waves,\n          children = _this$props.children,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"waves\", \"children\"]);\n\n      var classes = classNames(\"form-inline\", this.props.waves ? \"Ripple-parent\" : false, className);\n      return React.createElement(\"form\", _extends({}, attributes, {\n        className: classes,\n        onMouseDown: this.handleClick.bind(this),\n        onTouchStart: this.handleClick.bind(this)\n      }), this.props.children, this.props.waves && React.createElement(Waves, {\n        cursorPos: this.state.cursorPos\n      }));\n    }\n  }]);\n\n  return FormInline;\n}(React.Component);\n\nFormInline.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  waves: PropTypes.bool\n};\n\nvar Footer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Footer, _Component);\n\n  function Footer() {\n    _classCallCheck(this, Footer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Footer).apply(this, arguments));\n  }\n\n  _createClass(Footer, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          color = _this$props.color,\n          children = _this$props.children,\n          className = _this$props.className,\n          Tag = _this$props.tag,\n          attributes = _objectWithoutProperties(_this$props, [\"color\", \"children\", \"className\", \"tag\"]);\n\n      var classes = classNames(\"page-footer\", color ? color : \"\", className);\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes\n      }), children);\n    }\n  }]);\n\n  return Footer;\n}(Component);\n\nFooter.propTypes = {\n  color: PropTypes.string,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  children: PropTypes.node\n};\nFooter.defaultProps = {\n  tag: \"footer\"\n};\n\nvar FreeBird =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(FreeBird, _Component);\n\n  function FreeBird() {\n    _classCallCheck(this, FreeBird);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(FreeBird).apply(this, arguments));\n  }\n\n  _createClass(FreeBird, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          Tag = _this$props.tag,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"tag\"]);\n\n      var classes = classNames(\"container free-bird\", className);\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes\n      }));\n    }\n  }]);\n\n  return FreeBird;\n}(Component);\n\nFreeBird.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string\n};\nFreeBird.defaultProps = {\n  tag: \"div\"\n};\nvar css$6 = \".hamburger-button__checkbox {\\n  display: none;\\n}\\n\\n.hamburger-button__button {\\n  background-color: transparent;\\n  height: 100%;\\n  width: 100%;\\n  text-align: center;\\n  cursor: pointer;\\n  top: -5px;\\n}\\n\\nlabel.hamburger-button__button {\\n  margin-bottom: 0;\\n}\\n\\n#nav-icon1 {\\n  width: 1.5em;\\n  height: 1.5em;\\n  position: relative;\\n  -webkit-transform: rotate(0deg);\\n  -moz-transform: rotate(0deg);\\n  -o-transform: rotate(0deg);\\n  transform: rotate(0deg);\\n  -webkit-transition: .5s ease-in-out;\\n  -moz-transition: .5s ease-in-out;\\n  -o-transition: .5s ease-in-out;\\n  transition: .5s ease-in-out;\\n  cursor: pointer;\\n}\\n\\n#nav-icon1 span {\\n  display: block;\\n  position: absolute;\\n  height: 3px;\\n  width: 100%;\\n  border-radius: 1px;\\n  background-color: #fff;\\n  opacity: 1;\\n  left: 0;\\n  -webkit-transform: rotate(0deg);\\n  -moz-transform: rotate(0deg);\\n  -o-transform: rotate(0deg);\\n  transform: rotate(0deg);\\n  -webkit-transition: .25s ease-in-out;\\n  -moz-transition: .25s ease-in-out;\\n  -o-transition: .25s ease-in-out;\\n  transition: .25s ease-in-out;\\n}\\n\\n#nav-icon1 span:nth-child(1) {\\n  top: 5px;\\n}\\n\\n#nav-icon1 span:nth-child(2) {\\n  top: 16px;\\n}\\n\\n#nav-icon1 span:nth-child(3) {\\n  top: 27px;\\n}\\n\\n.hamburger-button__checkbox:checked+#nav-icon1 span:nth-child(1) {\\n  top: 16px;\\n  -webkit-transform: rotate(135deg);\\n  -moz-transform: rotate(135deg);\\n  -o-transform: rotate(135deg);\\n  transform: rotate(135deg);\\n}\\n\\n.hamburger-button__checkbox:checked+#nav-icon1 span:nth-child(2) {\\n  opacity: 0;\\n  left: -60px;\\n}\\n\\n.hamburger-button__checkbox:checked+#nav-icon1 span:nth-child(3) {\\n  top: 16px;\\n  -webkit-transform: rotate(-135deg);\\n  -moz-transform: rotate(-135deg);\\n  -o-transform: rotate(-135deg);\\n  transform: rotate(-135deg);\\n}\\n\";\nstyleInject(css$6);\n\nvar HamburgerToggler =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(HamburgerToggler, _React$Component);\n\n  function HamburgerToggler() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, HamburgerToggler);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(HamburgerToggler)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      checked: _this.props.isOpen || false\n    });\n\n    return _this;\n  }\n\n  _createClass(HamburgerToggler, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          id = _this$props.id,\n          color = _this$props.color,\n          className = _this$props.className;\n      var classes = classNames(\"hamburger-button__button\", className);\n      return React.createElement(React.Fragment, null, React.createElement(\"input\", {\n        type: \"checkbox\",\n        defaultChecked: this.state.checked,\n        onChange: this.props.onClick,\n        className: \"hamburger-button__checkbox\",\n        id: id\n      }), React.createElement(\"label\", {\n        id: \"nav-icon1\",\n        className: classes,\n        htmlFor: id\n      }, React.createElement(\"span\", {\n        style: {\n          background: color\n        }\n      }), React.createElement(\"span\", {\n        style: {\n          background: color\n        }\n      }), React.createElement(\"span\", {\n        style: {\n          background: color\n        }\n      })));\n    }\n  }]);\n\n  return HamburgerToggler;\n}(React.Component);\n\nHamburgerToggler.propTypes = {\n  id: PropTypes.string,\n  color: PropTypes.string,\n  className: PropTypes.string\n};\n\nvar Input =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Input, _React$Component);\n\n  function Input(props) {\n    var _this;\n\n    _classCallCheck(this, Input);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Input).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onBlur\", function (event) {\n      event.stopPropagation();\n\n      _this.setState({\n        isFocused: false\n      });\n\n      _this.props.onBlur && _this.props.onBlur(event);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFocus\", function (event) {\n      event.stopPropagation();\n\n      _this.setState({\n        isFocused: true\n      });\n\n      _this.props.onFocus && _this.props.onFocus(event);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (event) {\n      event.stopPropagation();\n\n      if (_this.props.type !== \"checkbox\" && _this.props.type !== \"radio\") {\n        _this.setState({\n          innerValue: event.target.value,\n          isPristine: false\n        });\n      }\n\n      _this.props.onChange && _this.props.onChange(event);\n      _this.props.getValue && _this.props.getValue(event.target.value);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onInput\", function (event) {\n      event.stopPropagation();\n\n      if (_this.props.type !== \"checkbox\" && _this.props.type !== \"radio\") {\n        _this.setState({\n          innerValue: event.target.value,\n          isPristine: false\n        });\n      }\n\n      _this.props.onInput && _this.props.onInput(event);\n      _this.props.getValue && _this.props.getValue(event.target.value);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setFocus\", function () {\n      _this.inputElementRef.current.focus();\n    });\n\n    _this.state = {\n      innerValue: props.value || props.valueDefault,\n      isFocused: false,\n      isPristine: true\n    };\n    _this.inputElementRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(Input, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // User wants to access the input ref, but we have to use it intenrally to.\n      // Return Ref instance to share ref with parent\n      // then user sets ref as a callback -> inputRef={ref => this.myInputRef = ref}\n      this.props.inputRef && this.props.inputRef(this.inputElementRef.current);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          className = _this$props.className,\n          containerClass = _this$props.containerClass,\n          disabled = _this$props.disabled,\n          error = _this$props.error,\n          filled = _this$props.filled,\n          gap = _this$props.gap,\n          getValue = _this$props.getValue,\n          group = _this$props.group,\n          hint = _this$props.hint,\n          icon = _this$props.icon,\n          iconBrand = _this$props.iconBrand,\n          iconClass = _this$props.iconClass,\n          iconLight = _this$props.iconLight,\n          iconRegular = _this$props.iconRegular,\n          iconSize = _this$props.iconSize,\n          id = _this$props.id,\n          inputRef = _this$props.inputRef,\n          outline = _this$props.outline,\n          label = _this$props.label,\n          labelClass = _this$props.labelClass,\n          size = _this$props.size,\n          success = _this$props.success,\n          tag = _this$props.tag,\n          type = _this$props.type,\n          validate = _this$props.validate,\n          value = _this$props.value,\n          valueDefault = _this$props.valueDefault,\n          attributes = _objectWithoutProperties(_this$props, [\"children\", \"className\", \"containerClass\", \"disabled\", \"error\", \"filled\", \"gap\", \"getValue\", \"group\", \"hint\", \"icon\", \"iconBrand\", \"iconClass\", \"iconLight\", \"iconRegular\", \"iconSize\", \"id\", \"inputRef\", \"outline\", \"label\", \"labelClass\", \"size\", \"success\", \"tag\", \"type\", \"validate\", \"value\", \"valueDefault\"]);\n\n      var isNotEmpty = !!this.state.innerValue || !!hint || this.state.isFocused;\n      var Tag = \"\";\n      var formControlClass = \"\";\n\n      if (type === \"textarea\") {\n        formControlClass = outline ? \"form-control\" : \"md-textarea form-control\";\n        Tag = \"textarea\";\n      } else {\n        formControlClass = \"form-control\";\n        Tag = \"input\";\n        attributes.type = type;\n      }\n\n      attributes.disabled = disabled;\n      var classes = classNames(formControlClass, size ? \"form-control-\".concat(size) : false, validate ? \"validate\" : false, filled ? \"filled-in\" : false, gap ? \"with-gap\" : false, type === \"checkbox\" ? gap ? false : \"form-check-input\" : false, type === \"radio\" ? \"form-check-input\" : false, className);\n      var containerClassFix = classNames(type === \"checkbox\" || type === \"radio\" ? \"form-check my-3\" : \"md-form\", group ? \"form-group\" : false, size ? \"form-\".concat(size) : false, outline && 'md-outline', containerClass);\n      var iconClassFix = classNames(isNotEmpty && this.state.isFocused ? \"active\" : false, iconClass, \"prefix\");\n      var labelClassFix = classNames(isNotEmpty ? \"active\" : false, disabled ? \"disabled\" : false, type === \"checkbox\" ? \"form-check-label mr-5\" : false, type === \"radio\" ? \"form-check-label mr-5\" : false, labelClass);\n      return React.createElement(\"div\", {\n        className: containerClassFix\n      }, icon && React.createElement(Fa, {\n        icon: icon,\n        size: iconSize,\n        brand: iconBrand,\n        light: iconLight,\n        regular: iconRegular,\n        className: iconClassFix,\n        onClick: this.setFocus\n      }), React.createElement(Tag, _extends({}, attributes, {\n        className: classes,\n        id: id,\n        placeholder: hint,\n        ref: this.inputElementRef,\n        value: this.state.innerValue,\n        onBlur: this.onBlur,\n        onChange: this.onChange,\n        onInput: this.onInput,\n        onFocus: this.onFocus\n      })), label && React.createElement(\"label\", {\n        className: labelClassFix,\n        htmlFor: id,\n        \"data-error\": error,\n        \"data-success\": success,\n        id: id,\n        onClick: this.setFocus\n      }, label), children);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.value !== prevState.value) {\n        return {\n          innerValue: nextProps.value\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return Input;\n}(React.Component);\n\nInput.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node,\n  containerClass: PropTypes.string,\n  disabled: PropTypes.bool,\n  error: PropTypes.string,\n  filled: PropTypes.bool,\n  gap: PropTypes.bool,\n  getValue: PropTypes.func,\n  group: PropTypes.bool,\n  hint: PropTypes.string,\n  icon: PropTypes.string,\n  iconBrand: PropTypes.bool,\n  iconClass: PropTypes.string,\n  iconLight: PropTypes.bool,\n  iconRegular: PropTypes.bool,\n  iconSize: PropTypes.string,\n  id: PropTypes.string,\n  inputRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.object]),\n  labelClass: PropTypes.string,\n  onBlur: PropTypes.func,\n  onChange: PropTypes.func,\n  onFocus: PropTypes.func,\n  onInput: PropTypes.func,\n  outline: PropTypes.bool,\n  size: PropTypes.string,\n  success: PropTypes.string,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  type: PropTypes.string,\n  validate: PropTypes.bool,\n  value: PropTypes.string,\n  valueDefault: PropTypes.string\n};\nInput.defaultProps = {\n  className: \"\",\n  containerClass: \"\",\n  disabled: false,\n  error: \"\",\n  filled: false,\n  gap: false,\n  group: false,\n  hint: undefined,\n  icon: \"\",\n  iconBrand: false,\n  iconClass: \"\",\n  iconLight: false,\n  iconRegular: false,\n  iconSize: undefined,\n  id: undefined,\n  outline: false,\n  label: \"\",\n  labelClass: \"\",\n  size: \"\",\n  success: \"\",\n  tag: \"input\",\n  type: \"text\",\n  validate: false,\n  valueDefault: \"\"\n};\n\nvar InputNumeric =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(InputNumeric, _React$Component);\n\n  function InputNumeric() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, InputNumeric);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(InputNumeric)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"onChangeHandler\", function (value) {\n      _this.props.getValue && _this.props.getValue(value);\n    });\n\n    return _this;\n  }\n\n  _createClass(InputNumeric, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          getValue = _this$props.getValue,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"getValue\"]);\n\n      var classes = classNames(\"form-control\", className);\n      return React.createElement(NumericInput, _extends({}, attributes, {\n        onChange: this.onChangeHandler,\n        className: classes\n      }));\n    }\n  }]);\n\n  return InputNumeric;\n}(React.Component);\n\nInputNumeric.propTypes = {\n  className: PropTypes.string,\n  getValue: PropTypes.func\n};\n\nvar Jumbotron =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Jumbotron, _React$Component);\n\n  function Jumbotron() {\n    _classCallCheck(this, Jumbotron);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Jumbotron).apply(this, arguments));\n  }\n\n  _createClass(Jumbotron, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          children = _this$props.children,\n          fluid = _this$props.fluid,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"children\", \"fluid\"]);\n\n      var classes = classNames(\"jumbotron\", fluid ? \"jumbotron-fluid\" : false, className);\n      return React.createElement(\"div\", _extends({}, attributes, {\n        className: classes\n      }), children);\n    }\n  }]);\n\n  return Jumbotron;\n}(React.Component);\n\nJumbotron.propTypes = {\n  fluid: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string\n};\n\nvar ListGroup =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ListGroup, _Component);\n\n  function ListGroup() {\n    _classCallCheck(this, ListGroup);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ListGroup).apply(this, arguments));\n  }\n\n  _createClass(ListGroup, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          className = _this$props.className,\n          Tag = _this$props.tag,\n          attributes = _objectWithoutProperties(_this$props, [\"children\", \"className\", \"tag\"]);\n\n      var classes = classNames(\"list-group\", className);\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes\n      }), children);\n    }\n  }]);\n\n  return ListGroup;\n}(Component);\n\nListGroup.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  children: PropTypes.node\n};\nListGroup.defaultProps = {\n  tag: \"ul\"\n};\n\nvar ListGroupItem =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ListGroupItem, _Component);\n\n  function ListGroupItem() {\n    _classCallCheck(this, ListGroupItem);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ListGroupItem).apply(this, arguments));\n  }\n\n  _createClass(ListGroupItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          active = _this$props.active,\n          children = _this$props.children,\n          className = _this$props.className,\n          color = _this$props.color,\n          disabled = _this$props.disabled,\n          hover = _this$props.hover,\n          success = _this$props.success,\n          info = _this$props.info,\n          warning = _this$props.warning,\n          danger = _this$props.danger,\n          Tag = _this$props.tag,\n          attributes = _objectWithoutProperties(_this$props, [\"active\", \"children\", \"className\", \"color\", \"disabled\", \"hover\", \"success\", \"info\", \"warning\", \"danger\", \"tag\"]);\n\n      var classes = classNames(\"list-group-item\", color && \"list-group-item-\".concat(color), active ? \"active\" : \"\", disabled ? \"disabled\" : \"\", hover ? \"list-group-item-action\" : \"\", success ? \"list-group-item-success\" : \"\", info ? \"list-group-item-info\" : \"\", warning ? \"list-group-item-warning\" : \"\", danger ? \"list-group-item-danger\" : \"\", className);\n\n      if (attributes.href && Tag === \"li\") {\n        Tag = \"a\";\n      }\n\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes\n      }), children);\n    }\n  }]);\n\n  return ListGroupItem;\n}(Component);\n\nListGroupItem.propTypes = {\n  active: PropTypes.bool,\n  disabled: PropTypes.bool,\n  hover: PropTypes.bool,\n  success: PropTypes.bool,\n  info: PropTypes.bool,\n  warning: PropTypes.bool,\n  danger: PropTypes.bool,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  children: PropTypes.node,\n  color: PropTypes.oneOf(['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'])\n};\nListGroupItem.defaultProps = {\n  tag: \"li\"\n};\n\nvar Media =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Media, _React$Component);\n\n  function Media() {\n    _classCallCheck(this, Media);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Media).apply(this, arguments));\n  }\n\n  _createClass(Media, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          body = _this$props.body,\n          bottom = _this$props.bottom,\n          className = _this$props.className,\n          heading = _this$props.heading,\n          left = _this$props.left,\n          list = _this$props.list,\n          middle = _this$props.middle,\n          object = _this$props.object,\n          right = _this$props.right,\n          round = _this$props.round,\n          thumbnail = _this$props.thumbnail,\n          figure = _this$props.figure,\n          figImg = _this$props.figImg,\n          figCap = _this$props.figCap,\n          figCapRight = _this$props.figCapRight,\n          figCapLeft = _this$props.figCapLeft,\n          tag = _this$props.tag,\n          top = _this$props.top,\n          attributes = _objectWithoutProperties(_this$props, [\"body\", \"bottom\", \"className\", \"heading\", \"left\", \"list\", \"middle\", \"object\", \"right\", \"round\", \"thumbnail\", \"figure\", \"figImg\", \"figCap\", \"figCapRight\", \"figCapLeft\", \"tag\", \"top\"]);\n\n      var defaultTag;\n\n      if (heading) {\n        defaultTag = \"h4\";\n      } else if (left || right) {\n        defaultTag = \"a\";\n      } else if (object || figImg) {\n        defaultTag = \"img\";\n      } else if (list) {\n        defaultTag = \"ul\";\n      } else if (figure) {\n        defaultTag = \"figure\";\n      } else if (figCap || figCapRight || figCapLeft) {\n        defaultTag = \"figcaption\";\n      } else {\n        defaultTag = \"div\";\n      }\n\n      var Tag = tag || defaultTag;\n      var classes = classNames(body ? \"media-body\" : false, heading ? \"mt-0\" : false, left ? \"media-left\" : false, right ? \"media-right\" : false, top ? \"align-self-start\" : false, middle ? \"align-self-center\" : false, bottom ? \"align-self-end\" : false, object ? \"media-object\" : false, thumbnail ? \"img-thumbnail\" : false, list ? \"media-list\" : false, figure ? \"figure\" : false, figImg ? \"figure-img\" : false, figCap ? \"figure-caption text-center\" : false, figCapRight ? \"figure-caption text-right\" : false, figCapLeft ? \"figure-caption text-left\" : false, round ? \"rounded-circle z-depth-1-half\" : false, !body && !heading && !left && !right && !top && !bottom && !middle && !object && !list && !figCap && !figCapRight && !figCapRight && !figImg && !figure ? \"media\" : false, className);\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes\n      }));\n    }\n  }]);\n\n  return Media;\n}(React.Component);\n\nMedia.propTypes = {\n  body: PropTypes.bool,\n  bottom: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  heading: PropTypes.bool,\n  figure: PropTypes.bool,\n  figImg: PropTypes.bool,\n  figCap: PropTypes.bool,\n  figCapRight: PropTypes.bool,\n  figCapLeft: PropTypes.bool,\n  left: PropTypes.bool,\n  list: PropTypes.bool,\n  middle: PropTypes.bool,\n  object: PropTypes.bool,\n  thumbnail: PropTypes.bool,\n  round: PropTypes.bool,\n  right: PropTypes.bool,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  top: PropTypes.bool\n};\n\nvar Modal =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Modal, _Component);\n\n  function Modal() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Modal);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Modal)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isOpen: _this.props.isOpen || false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      document.body.classList.add(\"modal-open\");\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentWillUnmount\", function () {\n      document.body.classList.remove(\"modal-open\");\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidUpdate\", function (prevProps, prevState) {\n      if (prevState.isOpen !== _this.props.isOpen) {\n        _this.setState({\n          isOpen: _this.props.isOpen\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnEntered\", function (type, node) {\n      if (type === \"backdrop\" && _this.props.fade === false) {\n        return;\n      }\n\n      node.classList.add(\"show\");\n      _this.props.autoFocus && node.focus();\n\n      if (type === \"modal\") {\n        _this.props.showModal && _this.props.showModal();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnExit\", function (type, node) {\n      if (type === \"backdrop\" && _this.props.fade === false) {\n        return;\n      }\n\n      node.classList.remove(\"show\");\n\n      if (type === \"modal\") {\n        _this.props.hideModal && _this.props.hideModal();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnExited\", function (node) {\n      _this.props.hiddenModal && _this.props.hiddenModal();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleBackdropClick\", function (e) {\n      if (!_this.props.backdrop) return;\n\n      if (!_this.modalContent.contains(e.target)) {\n        _this.props.toggle();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEscape\", function (e) {\n      if (e.keyCode === 27) {\n        e.preventDefault();\n\n        _this.props.toggle();\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(Modal, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          children = _this$props.children,\n          backdrop = _this$props.backdrop,\n          backdropClassName = _this$props.backdropClassName,\n          contentClassName = _this$props.contentClassName,\n          className = _this$props.className,\n          size = _this$props.size,\n          side = _this$props.side,\n          fullHeight = _this$props.fullHeight,\n          frame = _this$props.frame,\n          centered = _this$props.centered,\n          position = _this$props.position,\n          cascading = _this$props.cascading,\n          modalStyle = _this$props.modalStyle,\n          wrapClassName = _this$props.wrapClassName,\n          animation = _this$props.animation,\n          fade = _this$props.fade,\n          tabIndex = _this$props.tabIndex,\n          role = _this$props.role,\n          id = _this$props.id,\n          inline = _this$props.inline;\n      var timeout = fade ? 300 : 0;\n      var modalDialogClasses = classNames(\"modal-dialog\", className, size && \"modal-\".concat(size), side && \"modal-side\", fullHeight && \"modal-full-height\", frame && \"modal-frame\", centered && \"modal-dialog-centered\", position && \"modal-\".concat(this.props.position), cascading && \"cascading-modal\", modalStyle && \"modal-notify white-text modal-\".concat(this.props.modalStyle));\n      var wrapperClasses = classNames(inline ? false : \"modal\", fade && \"fade\", wrapClassName, fade && (animation || position && position.split(\"-\").slice(-1)[0] || \"top\"));\n      var backdropClasses = classNames(\"modal-backdrop\", fade ? \"fade\" : \"show\", backdropClassName);\n      var contentClasses = classNames(\"modal-content\", contentClassName);\n      var modalAttributes = returnAttributes({\n        style: {\n          display: \"block\"\n        },\n        id: id || undefined,\n        tabIndex: tabIndex,\n        role: role,\n        \"aria-hidden\": \"true\"\n      });\n      return React.createElement(Fragment, null, backdrop && React.createElement(Transition, {\n        timeout: timeout,\n        in: this.state.isOpen,\n        appear: this.state.isOpen,\n        mountOnEnter: true,\n        unmountOnExit: true,\n        onEntered: function onEntered(node) {\n          return _this2.handleOnEntered(\"backdrop\", node);\n        },\n        onExit: function onExit(node) {\n          return _this2.handleOnExit(\"backdrop\", node);\n        },\n        onExited: this.handleOnExited\n      }, React.createElement(\"div\", {\n        className: backdropClasses\n      })), React.createElement(Transition, {\n        timeout: timeout,\n        in: this.state.isOpen,\n        appear: this.state.isOpen,\n        mountOnEnter: true,\n        unmountOnExit: true,\n        onClick: this.handleBackdropClick,\n        onEntered: function onEntered(node) {\n          return _this2.handleOnEntered(\"modal\", node);\n        },\n        onExit: function onExit(node) {\n          return _this2.handleOnExit(\"modal\", node);\n        }\n      }, React.createElement(\"div\", _extends({\n        onKeyUp: this.handleEscape,\n        className: wrapperClasses\n      }, modalAttributes), React.createElement(\"div\", {\n        className: modalDialogClasses,\n        role: \"document\"\n      }, React.createElement(\"div\", {\n        ref: function ref(elem) {\n          return _this2.modalContent = elem;\n        },\n        className: contentClasses\n      }, children)))));\n    }\n  }]);\n\n  return Modal;\n}(Component);\n\nModal.defaultProps = {\n  backdrop: true,\n  fade: true,\n  isOpen: false,\n  autoFocus: true,\n  role: \"dialog\",\n  zIndex: 1050,\n  modalTransitionTimeout: 300,\n  backdropTransitionTimeout: 150,\n  tabIndex: \"-1\"\n};\nModal.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  backdrop: PropTypes.bool,\n  backdropClassName: PropTypes.string,\n  contentClassName: PropTypes.string,\n  modalClassName: PropTypes.string,\n  size: PropTypes.string,\n  side: PropTypes.bool,\n  fullHeight: PropTypes.bool,\n  frame: PropTypes.bool,\n  centered: PropTypes.bool,\n  position: PropTypes.string,\n  cascading: PropTypes.bool,\n  modalStyle: PropTypes.string,\n  wrapClassName: PropTypes.string,\n  animation: PropTypes.string,\n  fade: PropTypes.bool,\n  id: PropTypes.string,\n  role: PropTypes.string,\n  tabIndex: PropTypes.string,\n  showModal: PropTypes.func,\n  hiddenModal: PropTypes.func,\n  hideModal: PropTypes.func\n};\n\nvar ModalBody =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ModalBody, _React$Component);\n\n  function ModalBody() {\n    _classCallCheck(this, ModalBody);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ModalBody).apply(this, arguments));\n  }\n\n  _createClass(ModalBody, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          children = _this$props.children,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"children\"]);\n\n      var classes = classNames(\"modal-body\", className);\n      return React.createElement(\"div\", _extends({}, attributes, {\n        className: classes\n      }), children);\n    }\n  }]);\n\n  return ModalBody;\n}(React.Component);\n\nModalBody.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node\n};\n\nvar ModalFooter =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ModalFooter, _React$Component);\n\n  function ModalFooter() {\n    _classCallCheck(this, ModalFooter);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ModalFooter).apply(this, arguments));\n  }\n\n  _createClass(ModalFooter, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          children = _this$props.children,\n          center = _this$props.center,\n          start = _this$props.start,\n          end = _this$props.end,\n          around = _this$props.around,\n          between = _this$props.between,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"children\", \"center\", \"start\", \"end\", \"around\", \"between\"]);\n\n      var classes = classNames(\"modal-footer\", start && \"justify-content-start\", end && \"justify-content-end\", center && \"justify-content-center\", between && \"justify-content-between\", around && \"justify-content-around\", className);\n      return React.createElement(\"div\", _extends({}, attributes, {\n        className: classes\n      }), children);\n    }\n  }]);\n\n  return ModalFooter;\n}(React.Component);\n\nModalFooter.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node\n};\n\nvar ModalHeader =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ModalHeader, _React$Component);\n\n  function ModalHeader() {\n    _classCallCheck(this, ModalHeader);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ModalHeader).apply(this, arguments));\n  }\n\n  _createClass(ModalHeader, [{\n    key: \"render\",\n    value: function render() {\n      var closeButton;\n\n      var _this$props = this.props,\n          className = _this$props.className,\n          children = _this$props.children,\n          toggle = _this$props.toggle,\n          Tag = _this$props.tag,\n          closeAriaLabel = _this$props.closeAriaLabel,\n          titleClass = _this$props.titleClass,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"children\", \"toggle\", \"tag\", \"closeAriaLabel\", \"titleClass\"]);\n\n      var classes = classNames(\"modal-header\", className);\n      var titleClasses = classNames(\"modal-title\", this.props.titleClass);\n\n      if (toggle) {\n        closeButton = React.createElement(\"button\", {\n          type: \"button\",\n          onClick: toggle,\n          className: \"close\",\n          \"aria-label\": closeAriaLabel\n        }, React.createElement(\"span\", {\n          \"aria-hidden\": \"true\"\n        }, String.fromCharCode(215)));\n      }\n\n      return React.createElement(\"div\", _extends({}, attributes, {\n        className: classes\n      }), React.createElement(Tag, {\n        className: titleClasses\n      }, children), closeButton);\n    }\n  }]);\n\n  return ModalHeader;\n}(React.Component);\n\nModalHeader.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  toggle: PropTypes.func,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  closeAriaLabel: PropTypes.string\n};\nModalHeader.defaultProps = {\n  tag: \"h4\",\n  closeAriaLabel: \"Close\"\n};\n\nvar Nav =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Nav, _Component);\n\n  function Nav() {\n    _classCallCheck(this, Nav);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Nav).apply(this, arguments));\n  }\n\n  _createClass(Nav, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          className = _this$props.className,\n          Tag = _this$props.tag,\n          tabs = _this$props.tabs,\n          color = _this$props.color,\n          classicTabs = _this$props.classicTabs,\n          pills = _this$props.pills,\n          header = _this$props.header,\n          attributes = _objectWithoutProperties(_this$props, [\"children\", \"className\", \"tag\", \"tabs\", \"color\", \"classicTabs\", \"pills\", \"header\"]);\n\n      var classes = classNames(\"nav\", tabs && \"md-tabs\", pills && \"md-pills\", header && \"nav-pills card-header-pills\", color && !tabs && !classicTabs && !pills ? color : false, pills && color ? \"pills-\" + color : false, (tabs || classicTabs) && color ? \"tabs-\" + color : false, className);\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes\n      }), children);\n    }\n  }]);\n\n  return Nav;\n}(Component);\n\nNav.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  children: PropTypes.node,\n  color: PropTypes.string,\n  classicTabs: PropTypes.bool,\n  pills: PropTypes.bool,\n  tabs: PropTypes.bool,\n  header: PropTypes.bool\n};\nNav.defaultProps = {\n  tag: \"ul\",\n  classicTabs: false,\n  pills: false,\n  tabs: false,\n  header: false\n};\n\nvar getExpandClass = function getExpandClass(expand) {\n  if (expand === false) {\n    return false;\n  } else if (expand === true || expand === \"xs\") {\n    return \"navbar-expand\";\n  }\n\n  return \"navbar-expand-\".concat(expand);\n};\n\nvar Navbar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Navbar, _Component);\n\n  function Navbar(props) {\n    var _this;\n\n    _classCallCheck(this, Navbar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Navbar).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleScroll\", function () {\n      var scrollingNavbarOffset = _this.props.scrollingNavbarOffset || 50;\n\n      if (window.pageYOffset > scrollingNavbarOffset) {\n        _this.setState({\n          isCollapsed: true\n        });\n      } else {\n        _this.setState({\n          isCollapsed: false\n        });\n      }\n    });\n\n    _this.state = {\n      isCollapsed: false\n    };\n    return _this;\n  }\n\n  _createClass(Navbar, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.scrolling || this.props.scrollingNavbarOffset) {\n        window.addEventListener(\"scroll\", this.handleScroll);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.props.scrolling || this.props.scrollingNavbarOffset) {\n        window.removeEventListener(\"scroll\", this.handleScroll);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          expand = _this$props.expand,\n          light = _this$props.light,\n          dark = _this$props.dark,\n          sticky = _this$props.sticky,\n          fixed = _this$props.fixed,\n          scrolling = _this$props.scrolling,\n          color = _this$props.color,\n          className = _this$props.className,\n          scrollingNavbarOffset = _this$props.scrollingNavbarOffset,\n          Tag = _this$props.tag,\n          double = _this$props.double,\n          transparent = _this$props.transparent,\n          attributes = _objectWithoutProperties(_this$props, [\"expand\", \"light\", \"dark\", \"sticky\", \"fixed\", \"scrolling\", \"color\", \"className\", \"scrollingNavbarOffset\", \"tag\", \"double\", \"transparent\"]);\n\n      var classes = classNames(\"navbar\", light ? \"navbar-light\" : \"\", dark ? \"navbar-dark\" : \"\", sticky ? \"sticky-\" + sticky : \"\", fixed ? \"fixed-\" + fixed : \"\", getExpandClass(expand), scrolling || scrollingNavbarOffset ? \"scrolling-navbar\" : \"\", this.state.isCollapsed ? \"top-nav-collapse\" : \"\", color ? transparent ? this.state.isCollapsed ? color : \"\" : color : \"\", double ? \"double-nav\" : \"\", className);\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes,\n        role: \"navigation\"\n      }));\n    }\n  }]);\n\n  return Navbar;\n}(Component);\n\nNavbar.propTypes = {\n  light: PropTypes.bool,\n  dark: PropTypes.bool,\n  double: PropTypes.bool,\n  fixed: PropTypes.string,\n  sticky: PropTypes.string,\n  scrolling: PropTypes.bool,\n  scrollingNavbarOffset: PropTypes.number,\n  color: PropTypes.string,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  expand: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  transparent: PropTypes.bool\n};\nNavbar.defaultProps = {\n  tag: \"nav\",\n  expand: false,\n  scrolling: false\n};\n\nvar NavbarBrand = function NavbarBrand(_ref) {\n  var className = _ref.className,\n      href = _ref.href,\n      attributes = _objectWithoutProperties(_ref, [\"className\", \"href\"]);\n\n  var classes = classNames(\"navbar-brand\", className);\n\n  var navbarBrand = function navbarBrand() {\n    if (href) {\n      return React.createElement(NavLink, _extends({\n        to: href\n      }, attributes, {\n        className: classes\n      }));\n    } else {\n      return React.createElement(\"div\", _extends({}, attributes, {\n        className: classes\n      }));\n    }\n  };\n\n  return navbarBrand();\n};\n\nNavbarBrand.propTypes = {\n  className: PropTypes.string,\n  href: PropTypes.string\n};\n\nvar NavbarNav =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NavbarNav, _Component);\n\n  function NavbarNav() {\n    _classCallCheck(this, NavbarNav);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(NavbarNav).apply(this, arguments));\n  }\n\n  _createClass(NavbarNav, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          className = _this$props.className,\n          right = _this$props.right,\n          left = _this$props.left,\n          Tag = _this$props.tag,\n          attributes = _objectWithoutProperties(_this$props, [\"children\", \"className\", \"right\", \"left\", \"tag\"]);\n\n      var classes = classNames(\"navbar-nav\", right ? \"ml-auto\" : left ? \"mr-auto\" : \"justify-content-around w-100\", className);\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes\n      }), children);\n    }\n  }]);\n\n  return NavbarNav;\n}(Component);\n\nNavbarNav.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  children: PropTypes.node,\n  right: PropTypes.bool,\n  left: PropTypes.bool\n};\nNavbarNav.defaultProps = {\n  tag: \"ul\"\n};\n\nvar NavbarToggler =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NavbarToggler, _Component);\n\n  function NavbarToggler() {\n    _classCallCheck(this, NavbarToggler);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(NavbarToggler).apply(this, arguments));\n  }\n\n  _createClass(NavbarToggler, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          right = _this$props.right,\n          left = _this$props.left,\n          children = _this$props.children,\n          className = _this$props.className,\n          Tag = _this$props.tag,\n          image = _this$props.image,\n          attributes = _objectWithoutProperties(_this$props, [\"right\", \"left\", \"children\", \"className\", \"tag\", \"image\"]);\n\n      var classes = classNames(\"navbar-toggler\", right && \"navbar-toggler-right\", left && \"navbar-toggler-left\", className);\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes\n      }), children ? children : image ? React.createElement(\"span\", {\n        className: \"navbar-toggler-icon\",\n        style: {\n          backgroundImage: \"url(\\\"\".concat(image, \"\\\")\")\n        }\n      }) : React.createElement(\"span\", {\n        className: \"navbar-toggler-icon\"\n      }));\n    }\n  }]);\n\n  return NavbarToggler;\n}(Component);\n\nNavbarToggler.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  type: PropTypes.string,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  right: PropTypes.bool,\n  left: PropTypes.bool,\n  image: PropTypes.string\n};\nNavbarToggler.defaultProps = {\n  tag: \"button\",\n  type: \"button\"\n};\n\nvar NavItem =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NavItem, _Component);\n\n  function NavItem() {\n    _classCallCheck(this, NavItem);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(NavItem).apply(this, arguments));\n  }\n\n  _createClass(NavItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          className = _this$props.className,\n          active = _this$props.active,\n          text = _this$props.text,\n          Tag = _this$props.tag,\n          attributes = _objectWithoutProperties(_this$props, [\"children\", \"className\", \"active\", \"text\", \"tag\"]);\n\n      var classes = classNames(\"nav-item\", active ? \"active\" : \"\", text ? \"navbar-text\" : \"\", className);\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes\n      }), children);\n    }\n  }]);\n\n  return NavItem;\n}(Component);\n\nNavItem.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  children: PropTypes.node,\n  active: PropTypes.bool\n};\nNavItem.defaultProps = {\n  tag: \"li\"\n};\n\nvar NavLink$1 =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NavLink$$1, _Component);\n\n  function NavLink$$1(props) {\n    var _this;\n\n    _classCallCheck(this, NavLink$$1);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NavLink$$1).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClick\", function (e) {\n      if (!_this.props.disabled) {\n        e.stopPropagation(); // Waves - Get Cursor Position\n\n        var cursorPos = {\n          top: e.clientY,\n          left: e.clientX,\n          time: Date.now()\n        };\n\n        _this.setState({\n          cursorPos: cursorPos\n        });\n      }\n    });\n\n    _this.state = {\n      cursorPos: {}\n    };\n    return _this;\n  }\n\n  _createClass(NavLink$$1, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          className = _this$props.className,\n          disabled = _this$props.disabled,\n          active = _this$props.active,\n          to = _this$props.to,\n          attributes = _objectWithoutProperties(_this$props, [\"children\", \"className\", \"disabled\", \"active\", \"to\"]);\n\n      var classes = classNames(\"nav-link\", disabled ? \"disabled\" : \"Ripple-parent\", active && \"active\", className);\n      return React.createElement(NavLink, _extends({\n        className: classes,\n        onMouseUp: this.handleClick,\n        onTouchStart: this.handleClick,\n        to: to\n      }, attributes), children, this.props.disabled ? false : React.createElement(Waves, {\n        cursorPos: this.state.cursorPos\n      }));\n    }\n  }]);\n\n  return NavLink$$1;\n}(Component);\n\nNavLink$1.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  to: PropTypes.string,\n  active: PropTypes.bool\n};\nNavLink$1.defaultProps = {\n  active: false,\n  className: \"\",\n  disabled: false\n};\nvar css$7 = \".popover-enter {\\n  opacity: 0.01;\\n  transform: scale(0.9) translateY(50%);\\n}\\n\\n.popover-enter-active {\\n  opacity: 1;\\n  transform: scale(1);\\n  transition: scale 300ms ease-out, opacity 300ms ease;\\n}\\n\\n.popover-enter-done {\\n  opacity: 1;\\n  transform: scale(1);\\n}\\n\\n.popover-exit {\\n  opacity: 1;\\n  transform: scale(0.8);\\n  transition: all 300ms ease-out;\\n}\\n\\n.popover-exit-active {\\n  opacity: 0;\\n  transform: scale(0.8);\\n  transition: all 300ms ease-out;\\n}\\n\\n/* slide from side */\\n\\n.side-slide-enter {\\n  opacity: 0.2;\\n  transform: translateX(-100%);\\n}\\n\\n.side-slide-enter-active {\\n  opacity: 1;\\n  transform: translateX(0%);\\n  transition: transform 300ms ease-out, opacity 300ms ease;\\n}\\n\\n.side-slide-enter-done {\\n  opacity: 1;\\n  transform: translateX(0);\\n}\\n\\n.side-slide-exit {\\n  opacity: 1;\\n  transform: translateX(0%);\\n  transition: all 300ms ease-out;\\n}\\n\\n.side-slide-exit-active {\\n  opacity: 0.2;\\n  transform: translateX(-100%);\\n  transition: all 300ms ease-out;\\n}\\n\\n.right-side-slide-enter {\\n  opacity: 0.2;\\n  transform: translateX(100%);\\n}\\n\\n.right-side-slide-enter-active {\\n  opacity: 1;\\n  transform: translateX(0%) !important;\\n  transition: transform 300ms ease-out, opacity 300ms ease;\\n}\\n\\n.right-side-slide-enter-done {\\n  opacity: 1;\\n  transform: translateX(0%) !important;\\n}\\n\\n.right-side-slide-exit {\\n  opacity: 1;\\n  transform: translateX(0%);\\n  transition: all 300ms ease-out;\\n}\\n\\n.right-side-slide-exit-active {\\n  opacity: 0.2;\\n  transform: translateX(100%);\\n  transition: all 300ms ease-out;\\n}\\n\";\nstyleInject(css$7);\n\nvar Popover =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Popover, _React$Component);\n\n  function Popover(props) {\n    var _this;\n\n    _classCallCheck(this, Popover);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Popover).call(this, props));\n    _this.state = {\n      isOpen: false\n    };\n    _this._handleTargetClick = _this._handleTargetClick.bind(_assertThisInitialized(_this));\n    _this._setOusideTap = _this._setOusideTap.bind(_assertThisInitialized(_this));\n    _this._handleOutsideTap = _this._handleOutsideTap.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Popover, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._setOusideTap();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(lastProps, lastState) {\n      var _this2 = this;\n\n      if (lastState.isOpen !== this.state.isOpen) {\n        setTimeout(function () {\n          return _this2._setOusideTap();\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.outsideTap.remove();\n    }\n  }, {\n    key: \"_setOusideTap\",\n    value: function _setOusideTap() {\n      var elements = [this.target];\n\n      if (this.popper) {\n        elements.push(this.popper);\n      }\n\n      if (this.outsideTap) {\n        this.outsideTap.remove();\n      }\n\n      this.outsideTap = outy(elements, [\"click\", \"touchstart\"], this._handleOutsideTap);\n    }\n  }, {\n    key: \"_handleOutsideTap\",\n    value: function _handleOutsideTap() {\n      this.setState({\n        isOpen: false\n      });\n    }\n  }, {\n    key: \"_handleTargetClick\",\n    value: function _handleTargetClick() {\n      this.setState({\n        isOpen: !this.state.isOpen\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          placement = _this$props.placement,\n          component = _this$props.component,\n          componentStyle = _this$props.componentStyle,\n          className = _this$props.className,\n          children = _this$props.children,\n          componentPopover = _this$props.componentPopover,\n          popoverBody = _this$props.popoverBody,\n          popoverClass = _this$props.popoverClass,\n          arrowClass = _this$props.arrowClass,\n          tag = _this$props.tag;\n      var classes = classNames(className);\n      var popoverClasses = classNames(\"popover\", placement ? \"bs-popover-\" + placement : \"\", popoverClass);\n      var arrowClasses = classNames(\"arrow\", arrowClass);\n      return React.createElement(Manager, {\n        tag: tag\n      }, React.createElement(Target, {\n        innerRef: function innerRef(c) {\n          return _this3.target = findDOMNode(c);\n        },\n        component: component,\n        style: componentStyle,\n        className: classes,\n        onClick: this._handleTargetClick\n      }, popoverBody), React.createElement(CSSTransition, {\n        in: this.state.isOpen,\n        appear: this.state.isOpen,\n        classNames: \"popover\",\n        unmountOnExit: true,\n        timeout: {\n          enter: 300,\n          exit: 300\n        }\n      }, React.createElement(Popper, {\n        key: \"popover\",\n        component: componentPopover,\n        innerRef: function innerRef(c) {\n          _this3.popper = findDOMNode(c);\n        },\n        placement: placement,\n        className: popoverClasses,\n        onClick: this._handleTargetClick\n      }, children, React.createElement(Arrow, {\n        className: arrowClasses\n      }))));\n    }\n  }]);\n\n  return Popover;\n}(React.Component);\n\nPopover.propTypes = {\n  placement: PropTypes.string,\n  component: PropTypes.string,\n  componentStyle: PropTypes.string,\n  componentPopover: PropTypes.string,\n  popoverBody: PropTypes.string,\n  arrowClass: PropTypes.string,\n  popoverClass: PropTypes.string,\n  children: PropTypes.node,\n  tag: PropTypes.string,\n  className: PropTypes.string\n};\n\nvar PopoverBody = function PopoverBody(props) {\n  var className = props.className,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"className\", \"tag\"]);\n\n  var classes = classNames(\"popover-body\", className);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nPopoverBody.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string\n};\nPopoverBody.defaultProps = {\n  tag: \"div\"\n};\n\nvar PopoverHeader = function PopoverHeader(props) {\n  var className = props.className,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"className\", \"tag\"]);\n\n  var classes = classNames(\"popover-header\", className);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nPopoverHeader.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string\n};\nPopoverHeader.defaultProps = {\n  tag: \"h3\"\n};\n\nvar Progress = function Progress(_ref) {\n  var animated = _ref.animated,\n      barClassName = _ref.barClassName,\n      children = _ref.children,\n      className = _ref.className,\n      color = _ref.color,\n      height = _ref.height,\n      material = _ref.material,\n      max = _ref.max,\n      min = _ref.min,\n      preloader = _ref.preloader,\n      striped = _ref.striped,\n      wrapperStyle = _ref.wrapperStyle,\n      value = _ref.value,\n      attributes = _ref.attributes;\n  var percent = (value - min) / (max - min) * 100;\n  var progressClasses = classNames(\"progress\", material && \"md-progress\", preloader && (color ? color + \"-color\" : \"primary-color\") + \"-dark\", className);\n  var progressBarClasses = classNames(preloader ? \"indeterminate\" : \"progress-bar\", barClassName ? barClassName : null, animated ? \"progress-bar-animated\" : null, color ? \"bg-\".concat(color) : null, striped || animated ? \"progress-bar-striped\" : null);\n  var computedHeight = height ? height : children && \"1rem\";\n\n  var computedWrapperStyle = _objectSpread({}, wrapperStyle, {\n    height: computedHeight\n  });\n\n  return React.createElement(\"div\", _extends({}, attributes, {\n    className: progressClasses,\n    style: computedWrapperStyle\n  }), React.createElement(\"div\", {\n    className: progressBarClasses,\n    style: {\n      width: \"\".concat(percent, \"%\"),\n      height: computedHeight\n    },\n    role: \"progressbar\",\n    \"aria-valuenow\": value,\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max\n  }, children));\n};\n\nProgress.propTypes = {\n  animated: PropTypes.bool,\n  barClassName: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: PropTypes.string,\n  height: PropTypes.string,\n  material: PropTypes.bool,\n  max: PropTypes.number,\n  min: PropTypes.number,\n  preloader: PropTypes.bool,\n  striped: PropTypes.bool,\n  wrapperStyle: PropTypes.object,\n  value: PropTypes.number\n};\nProgress.defaultProps = {\n  animated: false,\n  barClassName: \"\",\n  className: \"\",\n  color: \"indigo\",\n  height: \"\",\n  material: false,\n  max: 100,\n  min: 0,\n  preloader: false,\n  striped: false,\n  wrapperStyle: {},\n  value: 0\n};\n\nvar Row =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Row, _Component);\n\n  function Row() {\n    _classCallCheck(this, Row);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Row).apply(this, arguments));\n  }\n\n  _createClass(Row, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          Tag = _this$props.tag,\n          center = _this$props.center,\n          start = _this$props.start,\n          end = _this$props.end,\n          around = _this$props.around,\n          between = _this$props.between,\n          top = _this$props.top,\n          bottom = _this$props.bottom,\n          middle = _this$props.middle,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"tag\", \"center\", \"start\", \"end\", \"around\", \"between\", \"top\", \"bottom\", \"middle\"]);\n\n      var classes = classNames(\"row\", end && \"justify-content-end\", start && \"justify-content-start\", center && \"justify-content-center\", between && \"justify-content-between\", around && \"justify-content-around\", top && \"align-self-start\", middle && \"align-self-center\", bottom && \"align-self-end\", className);\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes\n      }));\n    }\n  }]);\n\n  return Row;\n}(Component);\n\nRow.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  top: PropTypes.bool,\n  bottom: PropTypes.bool,\n  middle: PropTypes.bool,\n  end: PropTypes.bool,\n  start: PropTypes.bool,\n  center: PropTypes.bool,\n  between: PropTypes.bool,\n  around: PropTypes.bool\n};\nRow.defaultProps = {\n  tag: \"div\"\n};\n\nvar TableHead = function TableHead(props) {\n  var children = props.children,\n      color = props.color,\n      columns = props.columns,\n      textWhite = props.textWhite,\n      attributes = _objectWithoutProperties(props, [\"children\", \"color\", \"columns\", \"textWhite\"]);\n\n  var classes = classNames(color !== \"dark\" && color !== \"light\" ? color : \"thead-\".concat(color), {\n    \"text-white\": textWhite\n  });\n  return React.createElement(\"thead\", _extends({}, attributes, {\n    className: classes\n  }), columns && React.createElement(\"tr\", null, columns.map(function (col) {\n    return React.createElement(\"th\", {\n      key: col.field,\n      className: col.hasOwnProperty(\"minimal\") ? \"th-\".concat(col.minimal) : \"\"\n    }, col.label);\n  })), children);\n};\n\nTableHead.propTypes = {\n  children: PropTypes.node,\n  color: PropTypes.string,\n  columns: PropTypes.arrayOf(PropTypes.object),\n  textWhite: PropTypes.bool\n};\nTableHead.defaultProps = {\n  textWhite: false\n};\n\nvar Tooltip =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Tooltip, _React$Component);\n\n  function Tooltip(props) {\n    var _this;\n\n    _classCallCheck(this, Tooltip);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Tooltip).call(this, props));\n    _this.state = {\n      visible: false\n    };\n    _this.show = _this.show.bind(_assertThisInitialized(_this));\n    _this.hide = _this.hide.bind(_assertThisInitialized(_this));\n    _this.setVisibility = _this.setVisibility.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Tooltip, [{\n    key: \"show\",\n    value: function show() {\n      this.setVisibility(true);\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this.setVisibility(false);\n    }\n  }, {\n    key: \"setVisibility\",\n    value: function setVisibility(visible) {\n      this.setState(Object.assign({}, this.state, {\n        visible: visible\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          placement = _this$props.placement,\n          component = _this$props.component,\n          componentStyle = _this$props.componentStyle,\n          className = _this$props.className,\n          children = _this$props.children,\n          tooltipContent = _this$props.tooltipContent,\n          tooltipClass = _this$props.tooltipClass,\n          arrowClass = _this$props.arrowClass,\n          componentTooltip = _this$props.componentTooltip,\n          componentClass = _this$props.componentClass,\n          wrapperStyle = _this$props.wrapperStyle,\n          tag = _this$props.tag;\n      var classes = classNames(className);\n      var componentClasses = classNames(componentClass);\n      var tooltipClasses = classNames(\"tooltip fade\", placement ? \"bs-tooltip-\" + placement : \"\", this.state.visible ? \"show\" : \"\", tooltipClass);\n      var wrapperStyles = wrapperStyle ? wrapperStyle : {};\n      var arrowClasses = classNames(\"arrow\", arrowClass);\n      return React.createElement(Manager, {\n        tag: tag,\n        className: classes,\n        style: wrapperStyles\n      }, React.createElement(Target, {\n        component: component,\n        style: componentStyle,\n        className: componentClasses,\n        onMouseEnter: this.show,\n        onMouseLeave: this.hide,\n        onTouchStart: this.show,\n        onTouchEnd: this.hide\n      }, children), this.state.visible && React.createElement(Popper, {\n        placement: placement,\n        component: componentTooltip\n      }, function (_ref) {\n        var popperProps = _ref.popperProps;\n        return React.createElement(\"div\", _extends({}, popperProps, {\n          className: tooltipClasses\n        }), React.createElement(\"div\", {\n          className: \"tooltip-inner\"\n        }, tooltipContent), React.createElement(Arrow, null, function (_ref2) {\n          var arrowProps = _ref2.arrowProps;\n          return React.createElement(\"span\", _extends({}, arrowProps, {\n            className: arrowClasses\n          }));\n        }));\n      }));\n    }\n  }]);\n\n  return Tooltip;\n}(React.Component);\n\nTooltip.propTypes = {\n  placement: PropTypes.string,\n  component: PropTypes.string,\n  componentStyle: PropTypes.string,\n  tooltipContent: PropTypes.string,\n  tooltipClass: PropTypes.string,\n  arrowClass: PropTypes.string,\n  componentTooltip: PropTypes.string,\n  componentClass: PropTypes.string,\n  children: PropTypes.node,\n  tag: PropTypes.string,\n  className: PropTypes.string,\n  wrapperStyle: PropTypes.object\n};\n\nvar Iframe =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Iframe, _Component);\n\n  function Iframe() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Iframe);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Iframe)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      width: \"\",\n      height: \"\",\n      ratio: \"\"\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      var width = _this.props.width;\n      var height = _this.props.height;\n      var ratio = 9 / 16;\n\n      if (_this.props.ratio) {\n        var newRatio = _this.props.ratio.split(\"by\")[0] / _this.props.ratio.split(\"by\")[1];\n\n        if (typeof ratio === \"number\") ratio = newRatio;\n      }\n\n      if (_this.props.width && _this.props.height) {\n        return;\n      } else if (_this.props.width) {\n        height = _this.props.width * ratio;\n      } else if (_this.props.height) {\n        width = _this.props.height * (1 / ratio);\n      }\n\n      _this.setState(_objectSpread({}, _this.state, {\n        width: width,\n        height: height,\n        ratio: ratio\n      }));\n    });\n\n    return _this;\n  }\n\n  _createClass(Iframe, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          allowFullScreen = _this$props.allowFullScreen,\n          className = _this$props.className,\n          id = _this$props.id,\n          name = _this$props.name,\n          onMouseOver = _this$props.onMouseOver,\n          onMouseOut = _this$props.onMouseOut,\n          onLoad = _this$props.onLoad,\n          sandbox = _this$props.sandbox,\n          src = _this$props.src,\n          style = _this$props.style,\n          title = _this$props.title,\n          ratio = _this$props.ratio,\n          height = _this$props.height,\n          width = _this$props.width;\n      var classes = classNames(\"embed-responsive-item\", className);\n      var wrapperClasses = classNames(!(height || width) && \"embed-responsive\", ratio ? \"embed-responsive-\".concat(ratio) : \"embed-responsive-16by9\", className);\n      var iframeAttributes = {\n        src: src,\n        id: id || false,\n        frameBorder: \"0\",\n        target: \"_parent\",\n        allowFullScreen: allowFullScreen || true,\n        height: this.state.height || \"100%\",\n        name: name || undefined,\n        width: this.state.width || \"100%\",\n        onLoad: onLoad || undefined,\n        onMouseOver: onMouseOver || undefined,\n        onMouseOut: onMouseOut || undefined,\n        sandbox: sandbox || undefined,\n        style: style || undefined\n      };\n      iframeAttributes = returnAttributes(iframeAttributes);\n      return React.createElement(\"div\", {\n        className: wrapperClasses\n      }, React.createElement(\"iframe\", _extends({\n        title: title || \"\",\n        className: classes\n      }, iframeAttributes)));\n    }\n  }]);\n\n  return Iframe;\n}(Component);\n\nIframe.propTypes = {\n  allowFullScreen: PropTypes.bool,\n  className: PropTypes.string,\n  height: PropTypes.number,\n  id: PropTypes.string,\n  name: PropTypes.string,\n  onMouseOver: PropTypes.func,\n  onMouseOut: PropTypes.func,\n  onLoad: PropTypes.func,\n  ratio: PropTypes.string,\n  sandbox: PropTypes.string,\n  src: PropTypes.string.isRequired,\n  styles: PropTypes.object,\n  width: PropTypes.number,\n  title: PropTypes.string\n};\n\nvar Dropdown =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Dropdown, _React$Component);\n\n  function Dropdown(props) {\n    var _this;\n\n    _classCallCheck(this, Dropdown);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dropdown).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"toggle\", function () {\n      _this.setState({\n        isOpen: !_this.state.isOpen\n      });\n    });\n\n    _this.state = {\n      isOpen: false\n    };\n    _this.addEvents = _this.addEvents.bind(_assertThisInitialized(_this));\n    _this.handleDocumentClick = _this.handleDocumentClick.bind(_assertThisInitialized(_this));\n    _this.handleKeyDown = _this.handleKeyDown.bind(_assertThisInitialized(_this));\n    _this.removeEvents = _this.removeEvents.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Dropdown, [{\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        isOpen: this.state.isOpen,\n        dropup: this.props.dropup,\n        toggle: this.toggle\n      };\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.handleEventsBinding();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.removeEvents();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.handleEventsBinding();\n    }\n  }, {\n    key: \"handleEventsBinding\",\n    value: function handleEventsBinding() {\n      if (this.state.isOpen) {\n        this.addEvents();\n      } else {\n        this.removeEvents();\n      }\n    }\n  }, {\n    key: \"getContainer\",\n    value: function getContainer() {\n      return ReactDOM.findDOMNode(this);\n    }\n  }, {\n    key: \"addEvents\",\n    value: function addEvents() {\n      var _this2 = this;\n\n      [\"click\", \"touchstart\", \"keyup\"].forEach(function (event) {\n        return document.addEventListener(event, _this2.handleDocumentClick, true);\n      });\n    }\n  }, {\n    key: \"removeEvents\",\n    value: function removeEvents() {\n      var _this3 = this;\n\n      [\"click\", \"touchstart\", \"keyup\"].forEach(function (event) {\n        return document.removeEventListener(event, _this3.handleDocumentClick, true);\n      });\n    }\n  }, {\n    key: \"handleDocumentClick\",\n    value: function handleDocumentClick(e) {\n      if (e && (e.which === 3 || e.type === \"keyup\" && e.which !== keyCodes.tab)) return;\n      var container = this.getContainer();\n\n      if (container.contains(e.target) && container !== e.target && (e.type !== \"keyup\" || e.which === keyCodes.tab)) {\n        return;\n      }\n\n      this.toggle(e);\n    }\n  }, {\n    key: \"handleKeyDown\",\n    value: function handleKeyDown(e) {\n      if ([keyCodes.esc, keyCodes.up, keyCodes.down, keyCodes.space].indexOf(e.which) === -1 || /button/i.test(e.target.tagName) && e.which === keyCodes.space || /input|textarea/i.test(e.target.tagName)) {\n        return;\n      }\n\n      e.preventDefault();\n      if (this.props.disabled) return;\n      var container = this.getContainer();\n\n      if (e.which === keyCodes.space && this.state.isOpen && container !== e.target) {\n        e.target.click();\n      }\n\n      if (e.which === keyCodes.esc || !this.state.isOpen) {\n        this.toggle(e);\n        container.querySelector(\"[aria-expanded]\").focus();\n        return;\n      }\n\n      var menuClass = \"dropdown-menu\";\n      var itemClass = \"dropdown-item\";\n      var disabledClass = \"disabled\";\n      var items = container.querySelectorAll(\".\".concat(menuClass, \" .\").concat(itemClass, \":not(.\").concat(disabledClass, \")\"));\n      if (!items.length) return;\n      var index = -1;\n\n      for (var i = 0; i < items.length; i += 1) {\n        if (items[i] === e.target) {\n          index = i;\n          break;\n        }\n      }\n\n      if (e.which === keyCodes.up && index > 0) {\n        index -= 1;\n      }\n\n      if (e.which === keyCodes.down && index < items.length - 1) {\n        index += 1;\n      }\n\n      if (index < 0) {\n        index = 0;\n      }\n\n      items[index].focus();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _classNames;\n\n      var _omit = omit(this.props, [\"toggle\", \"disabled\"]),\n          className = _omit.className,\n          dropup = _omit.dropup,\n          group = _omit.group,\n          size = _omit.size,\n          attrs = _objectWithoutProperties(_omit, [\"className\", \"dropup\", \"group\", \"size\"]);\n\n      var classes = classNames((_classNames = {\n        \"btn-group\": group\n      }, _defineProperty(_classNames, \"btn-group-\".concat(size), !!size), _defineProperty(_classNames, \"dropdown\", !group), _defineProperty(_classNames, \"show\", this.state.isOpen), _defineProperty(_classNames, \"dropup\", dropup), _classNames), className);\n      return React.createElement(Manager, _extends({}, attrs, {\n        className: classes,\n        onKeyDown: this.handleKeyDown\n      }));\n    }\n  }]);\n\n  return Dropdown;\n}(React.Component);\n\nDropdown.propTypes = {\n  disabled: PropTypes.bool,\n  dropup: PropTypes.bool,\n  group: PropTypes.bool,\n  size: PropTypes.string,\n  tag: PropTypes.string,\n  toggle: PropTypes.func,\n  children: PropTypes.node,\n  className: PropTypes.string\n};\nDropdown.defaultProps = {\n  dropup: false,\n  tag: \"div\"\n};\nDropdown.childContextTypes = {\n  toggle: PropTypes.func.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  dropup: PropTypes.bool.isRequired\n}; // FREE\n\nexport { Animation, Alert, Badge, Breadcrumb, BreadcrumbItem, Button, ButtonGroup, ButtonToolbar, Card, CardBody, CardFooter, CardGroup, CardHeader, CardImage, CardText, CardTitle, Carousel, CarouselCaption, Control as CarouselControl, CarouselInner, CarouselItem, CarouselIndicators, CarouselIndicator, Col, Collapse, Container, DataTable, Dropdown, DropdownItem, DropdownMenu, DropdownToggle, EdgeHeader, Fa, FormInline, Footer, FreeBird, HamburgerToggler, Input, InputNumeric, Jumbotron, ListGroup, ListGroupItem, Mask, Media, Modal, ModalBody, ModalFooter, ModalHeader, Nav, Navbar, NavbarBrand, NavbarNav, NavbarToggler, NavItem, NavLink$1 as NavLink, Pagination, PageItem, PageLink, Popover, PopoverBody, PopoverHeader, Progress, Waves, Row, Table, TableBody, TableHead, TableFoot, Tooltip, View, Iframe, Iframe as MDBIframe, Animation as MDBAnimation, Badge as MDBBadge, Alert as MDBAlert, Breadcrumb as MDBBreadcrumb, BreadcrumbItem as MDBBreadcrumbItem, Button as MDBBtn, ButtonGroup as MDBBtnGroup, ButtonToolbar as MDBBtnToolbar, Card as MDBCard, CardBody as MDBCardBody, CardFooter as MDBCardFooter, CardGroup as MDBCardGroup, CardHeader as MDBCardHeader, CardImage as MDBCardImage, CardText as MDBCardText, CardTitle as MDBCardTitle, Carousel as MDBCarousel, CarouselCaption as MDBCarouselCaption, Control as MDBControl, CarouselInner as MDBCarouselInner, CarouselItem as MDBCarouselItem, CarouselIndicators as MDBCarouselIndicators, CarouselIndicator as MDBCarouselIndicator, Col as MDBCol, Collapse as MDBCollapse, Container as MDBContainer, DataTable as MDBDataTable, Dropdown as MDBDropdown, DropdownItem as MDBDropdownItem, DropdownMenu as MDBDropdownMenu, DropdownToggle as MDBDropdownToggle, EdgeHeader as MDBEdgeHeader, FormInline as MDBFormInline, Footer as MDBFooter, FreeBird as MDBFreeBird, HamburgerToggler as MDBHamburgerToggler, Fa as MDBIcon, Input as MDBInput, InputNumeric as MDBInputSelect, Jumbotron as MDBJumbotron, ListGroup as MDBListGroup, ListGroupItem as MDBListGroupItem, Mask as MDBMask, Media as MDBMedia, Modal as MDBModal, ModalBody as MDBModalBody, ModalFooter as MDBModalFooter, ModalHeader as MDBModalHeader, Nav as MDBNav, Navbar as MDBNavbar, NavbarBrand as MDBNavbarBrand, NavbarNav as MDBNavbarNav, NavbarToggler as MDBNavbarToggler, NavItem as MDBNavItem, NavLink$1 as MDBNavLink, Pagination as MDBPagination, PageItem as MDBPageItem, PageLink as MDBPageNav, Popover as MDBPopover, PopoverBody as MDBPopoverBody, PopoverHeader as MDBPopoverHeader, Progress as MDBProgress, Waves as MDBWaves, Row as MDBRow, Table as MDBTable, TableBody as MDBTableBody, TableHead as MDBTableHead, TableFoot as MDBTableFoot, Tooltip as MDBTooltip, View as MDBView };","map":null,"metadata":{},"sourceType":"module"}