{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Mgo\\\\PhpstormProjects\\\\untitled\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\Mgo\\\\PhpstormProjects\\\\untitled\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Mgo\\\\PhpstormProjects\\\\untitled\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Mgo\\\\PhpstormProjects\\\\untitled\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Mgo\\\\PhpstormProjects\\\\untitled\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Mgo\\\\PhpstormProjects\\\\untitled\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Mgo\\\\PhpstormProjects\\\\untitled\\\\src\\\\components\\\\Movies.js\";\nimport React, { Component } from \"react\";\nimport { getMovies } from \"../services/fakeMovieService\";\nimport { getGenres } from \"../services/fakeGenreService\";\nimport Pagination from \"./pagination\";\nimport ListGroup from \"./ListGroup\";\nimport MoviesTable from \"./MoviesTable\";\nimport _ from 'lodash';\nimport { paginate } from \"../utility/paginate\";\n\nvar Movies =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Movies, _Component);\n\n  function Movies() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Movies);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Movies)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      movies: [],\n      //not the right way by the way\n      genres: [],\n      PageSize: 4,\n      currentpage: 1,\n      sortColumn: {\n        path: 'title',\n        order: 'asc'\n      }\n    };\n\n    _this.handleDelete = function (the_id) {\n      var newarray = _this.state.movies.filter(function (w) {\n        return w._id !== the_id;\n      });\n\n      _this.setState({\n        movies: newarray\n      });\n    };\n\n    _this.handleLike = function (object) {\n      var newarray = _toConsumableArray(_this.state.movies);\n\n      var index = newarray.indexOf(object);\n      newarray[index].liked = !newarray[index].liked;\n\n      _this.setState({\n        movies: newarray\n      });\n    };\n\n    _this.handlePageChange = function (page) {\n      _this.setState({\n        currentpage: page\n      });\n    };\n\n    _this.handleGenreSelect = function (genre) {\n      _this.setState({\n        selectedGenre: genre,\n        currentpage: 1\n      });\n    };\n\n    _this.handleSort = function (TheName) {\n      _this.setState({\n        sortColumn: {\n          path: TheName,\n          order: 'asc'\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Movies, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var genres = [{\n        name: 'All Genres',\n        _id: \"\"\n      }].concat(_toConsumableArray(getGenres()));\n      this.setState({\n        movies: getMovies(),\n        genres: genres\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          selectedGenre = _this$state.selectedGenre,\n          allMovies = _this$state.movies,\n          currentpage = _this$state.currentpage,\n          PageSize = _this$state.PageSize;\n      var filtered_movies = selectedGenre && selectedGenre._id ? allMovies.filter(function (m) {\n        return m.genre._id === selectedGenre._id;\n      }) : allMovies;\n\n      _.orderBy(filtered_movies, [sortColumn.path]);\n\n      var movies = paginate(filtered_movies, currentpage, PageSize);\n      if (filtered_movies.length === 0) return React.createElement(\"h1\", {\n        className: \"fontify badge badge-pill badge-danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, \"no more movies in Database\");else return React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(ListGroup, {\n        items: this.state.genres,\n        onItemSelect: this.handleGenreSelect,\n        selectedItem: this.state.selectedGenre,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"fontify badge badge-pill badge-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"Showing \", filtered_movies.length, \" movies in Database\"), React.createElement(MoviesTable, {\n        movies: movies,\n        PageSize: this.state.PageSize,\n        currentPage: this.state.currentpage,\n        handleDelete: this.handleDelete,\n        handleLike: this.handleLike,\n        selectedGenre: this.state.selectedGenre,\n        onSort: this.handleSort,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }), React.createElement(Pagination, {\n        itemsCount: filtered_movies.length,\n        PageSize: this.state.PageSize,\n        onPageChange: this.handlePageChange,\n        currentPage: this.state.currentpage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Movies;\n}(Component);\n\nexport default Movies;","map":{"version":3,"sources":["C:\\Users\\Mgo\\PhpstormProjects\\untitled\\src\\components\\Movies.js"],"names":["React","Component","getMovies","getGenres","Pagination","ListGroup","MoviesTable","_","paginate","Movies","state","movies","genres","PageSize","currentpage","sortColumn","path","order","handleDelete","the_id","newarray","filter","w","_id","setState","handleLike","object","index","indexOf","liked","handlePageChange","page","handleGenreSelect","genre","selectedGenre","handleSort","TheName","name","allMovies","filtered_movies","m","orderBy","length"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { getMovies } from \"../services/fakeMovieService\";\r\nimport { getGenres } from \"../services/fakeGenreService\";\r\nimport Pagination from \"./pagination\";\r\nimport ListGroup from \"./ListGroup\";\r\nimport MoviesTable from \"./MoviesTable\";\r\nimport _ from 'lodash';\r\nimport {paginate} from \"../utility/paginate\";\r\n\r\nclass Movies extends Component {\r\n  state = {\r\n    movies: [], //not the right way by the way\r\n    genres: [],\r\n    PageSize: 4,\r\n    currentpage: 1,\r\n    sortColumn:{path:'title',order:'asc'}\r\n  };\r\n  componentDidMount() {\r\n    const genres=[{name:'All Genres',_id:\"\"},...getGenres()];\r\n    this.setState({ movies: getMovies(), genres:genres });\r\n  }\r\n\r\n  render() {\r\n    const {selectedGenre,movies:allMovies,currentpage,PageSize}=this.state;\r\n\r\n    const filtered_movies=\r\n        (selectedGenre && selectedGenre._id)\r\n        ?allMovies.filter(m=> m.genre._id===selectedGenre._id )\r\n        :allMovies;\r\n\r\n    _.orderBy(filtered_movies,[sortColumn.path])\r\n    const movies = paginate(filtered_movies,currentpage,PageSize);\r\n\r\n    if (filtered_movies.length === 0)\r\n      return (\r\n        <h1 className=\"fontify badge badge-pill badge-danger\">\r\n          no more movies in Database\r\n        </h1>\r\n      );\r\n    else\r\n      return (\r\n        <div className=\"row\">\r\n          <div className=\"col-3\">\r\n            <ListGroup\r\n              items={this.state.genres}\r\n              onItemSelect={this.handleGenreSelect}\r\n              selectedItem={this.state.selectedGenre}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col\">\r\n            <h1 className=\"fontify badge badge-pill badge-info\">\r\n              Showing {filtered_movies.length} movies in Database\r\n            </h1>\r\n            <MoviesTable\r\n                movies={movies}\r\n                PageSize={this.state.PageSize}\r\n                currentPage={this.state.currentpage}\r\n                handleDelete={this.handleDelete}\r\n                handleLike={this.handleLike}\r\n                selectedGenre={this.state.selectedGenre}\r\n                onSort={this.handleSort}\r\n            />\r\n            <Pagination\r\n              itemsCount={filtered_movies.length}\r\n              PageSize={this.state.PageSize}\r\n              onPageChange={this.handlePageChange}\r\n              currentPage={this.state.currentpage}\r\n            />\r\n          </div>\r\n        </div>\r\n      );\r\n  }\r\n\r\n  handleDelete = the_id => {\r\n    const newarray = this.state.movies.filter(w => {\r\n      return w._id !== the_id;\r\n    });\r\n    this.setState({ movies: newarray });\r\n  };\r\n\r\n  handleLike = object => {\r\n    const newarray = [...this.state.movies];\r\n    let index = newarray.indexOf(object);\r\n    newarray[index].liked = !newarray[index].liked;\r\n    this.setState({ movies: newarray });\r\n  };\r\n\r\n  handlePageChange = page => {\r\n    this.setState({ currentpage: page });\r\n  };\r\n\r\n  handleGenreSelect = genre => {\r\n    this.setState({ selectedGenre: genre ,currentpage:1});\r\n  };\r\n  handleSort=(TheName)=>{\r\n    this.setState({sortColumn:{path:TheName,order:'asc'}});\r\n  };\r\n}\r\n\r\nexport default Movies;\r\n"]},"metadata":{},"sourceType":"module"}