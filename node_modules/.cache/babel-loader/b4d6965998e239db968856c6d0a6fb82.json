{"ast":null,"code":"export default function (p) {\n  p.props = {};\n  console.log(p.props);\n  p.velocity1Intial = 10;\n  p.velocity2Intial = -20;\n  p.mass1 = 20;\n  p.mass2 = 10;\n  p.TMass = p.mass1 + p.mass2;\n  p.height1 = 100;\n  p.height2 = 150;\n  p.width1 = 100;\n  p.width2 = 100;\n  p.x1 = p.width1 / 2;\n  p.remainder = (1000 - p.width2 / 2 - p.width1 / 2) % (p.velocity1Intial + -p.velocity2Intial);\n  p.x2 = 1000 - p.width2 / 2;\n  p.DetectCollison = false;\n  p.Inelastic = true;\n\n  p.setup = function () {\n    p.createCanvas(1000, 600);\n  };\n\n  p.draw = function () {\n    if (!p.Inelastic) CollisionDetectElastic();else {\n      CollisonInelastic();\n    }\n    p.background(0);\n    p.rectMode(p.CENTER);\n    p.fill(\"green\");\n    p.rect(p.x1, 200, p.width1, p.height1, 20);\n    p.fill(255, 204, 0);\n    p.rect(p.x2, 200, p.width2, p.height2, 20);\n  };\n\n  var CollisionDetectElastic = function CollisionDetectElastic() {\n    var velocity2Final = (2 * p.mass1 * p.velocity1Intial + p.velocity2Intial * (p.mass2 - p.mass1)) / p.TMass;\n    var velocity1Final = (2 * p.mass2 * p.velocity2Intial + p.velocity1Intial * (p.mass1 - p.mass2)) / p.TMass;\n    /*   console.log(\"Vf2=\", velocity2Final);\r\n      console.log(\"V1f=\", velocity1Final);*/\n\n    var distance = p.dist(p.x1, 200, p.x2, 200); // console.log(distance);\n\n    if (distance <= (p.width1 + p.width2) / 2 + p.remainder && distance <= (p.width1 + p.width2) / 2 - p.remainder || p.DetectCollison) {\n      p.DetectCollison = true;\n      p.x1 += velocity1Final;\n      p.x2 += velocity2Final;\n    } else if (!p.DetectCollison) {\n      p.x1 += p.velocity1Intial;\n      p.x2 += p.velocity2Intial;\n    }\n  };\n\n  var CollisonInelastic = function CollisonInelastic() {\n    var TVelocity = (p.mass1 * p.velocity1Intial + p.mass2 * p.velocity2Intial) / p.TMass;\n    var distance = p.dist(p.x1, 200, p.x2, 200);\n\n    if (distance <= (p.width1 + p.width2) / 2 + p.remainder && distance <= (p.width1 + p.width2) / 2 - p.remainder || p.DetectCollison) {\n      p.DetectCollison = true;\n      p.x1 += TVelocity;\n      p.x2 += TVelocity;\n    }\n\n    if (!p.DetectCollison) {\n      p.x1 += p.velocity1Intial;\n      p.x2 += p.velocity2Intial;\n    }\n  };\n}\n;","map":{"version":3,"sources":["C:\\Users\\Mgo\\PhpstormProjects\\untitled\\src\\Component\\sketch1.js"],"names":["p","props","console","log","velocity1Intial","velocity2Intial","mass1","mass2","TMass","height1","height2","width1","width2","x1","remainder","x2","DetectCollison","Inelastic","setup","createCanvas","draw","CollisionDetectElastic","CollisonInelastic","background","rectMode","CENTER","fill","rect","velocity2Final","velocity1Final","distance","dist","TVelocity"],"mappings":"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","sourcesContent":["export default function  ( p ) {\r\n    p.props={};\r\n    console.log(p.props);\r\n    p.velocity1Intial = 10;\r\n    p.velocity2Intial = -20;\r\n    p.mass1 = 20;\r\n    p.mass2 = 10;\r\n    p.TMass = p.mass1 + p.mass2;\r\n    p.height1 = 100;\r\n    p.height2 = 150;\r\n    p.width1 = 100;\r\n    p.width2 = 100;\r\n    p.x1 = p.width1 / 2;\r\n    p.remainder =\r\n        (1000 - p.width2 / 2 - p.width1 / 2) %\r\n        (p.velocity1Intial + -p.velocity2Intial);\r\n    p.x2 = 1000 - p.width2 / 2;\r\n    p.DetectCollison = false;\r\n    p.Inelastic = true;\r\n\r\n    p.setup = () => {\r\n        p.createCanvas(1000, 600);\r\n    };\r\n\r\n    p.draw = () => {\r\n        if (!p.Inelastic) CollisionDetectElastic();\r\n        else {\r\n            CollisonInelastic();\r\n        }\r\n        p.background(0);\r\n        p.rectMode(p.CENTER);\r\n        p.fill(\"green\");\r\n        p.rect(p.x1, 200, p.width1, p.height1, 20);\r\n        p.fill(255, 204, 0);\r\n        p.rect(p.x2, 200, p.width2, p.height2, 20);\r\n    };\r\n\r\n    const CollisionDetectElastic = () => {\r\n        let velocity2Final =\r\n            (2 * p.mass1 * p.velocity1Intial +\r\n                p.velocity2Intial * (p.mass2 - p.mass1)) /\r\n            p.TMass;\r\n        let velocity1Final =\r\n            (2 * p.mass2 * p.velocity2Intial +\r\n                p.velocity1Intial * (p.mass1 - p.mass2)) /\r\n            p.TMass;\r\n\r\n        /*   console.log(\"Vf2=\", velocity2Final);\r\n          console.log(\"V1f=\", velocity1Final);*/\r\n\r\n        let distance = p.dist(p.x1, 200, p.x2, 200);\r\n\r\n        // console.log(distance);\r\n\r\n        if (\r\n            (distance <= (p.width1 + p.width2) / 2 + p.remainder &&\r\n                distance <= (p.width1 + p.width2) / 2 - p.remainder) ||\r\n            p.DetectCollison\r\n        ) {\r\n            p.DetectCollison = true;\r\n            p.x1 += velocity1Final;\r\n            p.x2 += velocity2Final;\r\n        } else if (!p.DetectCollison) {\r\n            p.x1 += p.velocity1Intial;\r\n            p.x2 += p.velocity2Intial;\r\n        }\r\n    };\r\n\r\n    const  CollisonInelastic = () => {\r\n        let TVelocity =\r\n            (p.mass1 * p.velocity1Intial + p.mass2 * p.velocity2Intial) / p.TMass;\r\n        let distance = p.dist(p.x1, 200, p.x2, 200);\r\n        if (\r\n            (distance <= (p.width1 + p.width2) / 2 + p.remainder &&\r\n                distance <= (p.width1 + p.width2) / 2 - p.remainder) ||\r\n            p.DetectCollison\r\n        ) {\r\n\r\n            p.DetectCollison = true;\r\n            p.x1 += TVelocity;\r\n            p.x2 += TVelocity;\r\n        }\r\n        if (!p.DetectCollison) {\r\n            p.x1 += p.velocity1Intial;\r\n            p.x2 += p.velocity2Intial;\r\n        }\r\n    };\r\n};\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}