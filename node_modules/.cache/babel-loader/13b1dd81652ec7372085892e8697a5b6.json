{"ast":null,"code":"export default function (p) {\n  p.radius = 25;\n  p.theta = 45 * Math.PI / 180; //Input\n\n  p.x1 = p.radius;\n  p.y1 = p.windowHeight / 1.5 - p.radius;\n  p.TotalVelocity = 19; //this is tha canvas limit\n\n  p.Vx = p.TotalVelocity * Math.cos(p.theta);\n  p.Vy = p.TotalVelocity * Math.sin(p.theta);\n  p.g = 9.9; // we will let put the variable g as stronger gravity planets\n  //input\n\n  p.Range = p.TotalVelocity * p.TotalVelocity * Math.sin(2 * p.theta) / p.g;\n\n  p.preload = function () {\n    p.myCustomRedrawAccordingToNewPropsHandler = function (props) {\n      if (props.p5Props) {\n        //console.log(props.p5Props);\n        p.ButtonClicked = props.p5Props.start;\n        p.ButtonClickedR = props.p5Props.reset;\n      }\n    };\n  };\n\n  p.windowResized = function () {\n    p.resizeCanvas(p.windowWidth / 1.5, p.windowHeight / 1.5);\n  };\n\n  p.setup = function () {\n    p.createCanvas(p.windowWidth / 1.5, p.windowHeight / 1.5);\n  };\n\n  p.draw = function () {\n    p.background(0);\n\n    if (p.ButtonClicked) {\n      p.noStroke();\n      p.ellipseMode(p.CENTER);\n      ProjectileVector();\n      p.ellipse(p.x1, p.y1, p.radius * 2, p.radius * 2);\n    } else if (!p.ButtonClicked && p.ButtonClickedR) {\n      reset();\n    }\n  };\n\n  var reset = function reset() {\n    p.myCustomRedrawAccordingToNewPropsHandler = function (props) {\n      p.x1 = p.radius;\n      p.y1 = p.windowHeight / 1.5 - p.radius;\n    };\n  };\n\n  var ProjectileVector = function ProjectileVector() {\n    if (p.x1 > p.width - p.radius || p.y1 > p.height - p.radius) {\n      p.background(\"blue\");\n      p.Vy = 0;\n      p.Vx = 0;\n    } else {\n      p.x1 += p.Vx;\n      p.Vy = p.Vy - p.g / 60;\n      p.y1 -= p.Vy;\n    } //beacuse our coordinates works in opposite direction\n    //console.log(p.x1,p.y1);\n\n  };\n}","map":{"version":3,"sources":["C:\\Users\\Mgo\\PhpstormProjects\\untitled\\src\\Component\\sketch2.js"],"names":["p","radius","theta","Math","PI","x1","y1","windowHeight","TotalVelocity","Vx","cos","Vy","sin","g","Range","preload","myCustomRedrawAccordingToNewPropsHandler","props","p5Props","ButtonClicked","start","ButtonClickedR","reset","windowResized","resizeCanvas","windowWidth","setup","createCanvas","draw","background","noStroke","ellipseMode","CENTER","ProjectileVector","ellipse","width","height"],"mappings":"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","sourcesContent":["export default function(p) {\r\n  p.radius = 25;\r\n  p.theta = (45 * Math.PI) / 180; //Input\r\n  p.x1 = p.radius;\r\n  p.y1 = p.windowHeight / 1.5 - p.radius;\r\n  p.TotalVelocity = 19; //this is tha canvas limit\r\n  p.Vx = p.TotalVelocity * Math.cos(p.theta);\r\n  p.Vy = p.TotalVelocity * Math.sin(p.theta);\r\n  p.g = 9.9; // we will let put the variable g as stronger gravity planets\r\n  //input\r\n  p.Range = (p.TotalVelocity * p.TotalVelocity * Math.sin(2 * p.theta)) / p.g;\r\n\r\n  p.preload = () => {\r\n    p.myCustomRedrawAccordingToNewPropsHandler = function(props) {\r\n      if (props.p5Props) {\r\n        //console.log(props.p5Props);\r\n        p.ButtonClicked = props.p5Props.start;\r\n        p.ButtonClickedR = props.p5Props.reset;\r\n      }\r\n    };\r\n  };\r\n\r\n  p.windowResized = () => {\r\n    p.resizeCanvas(p.windowWidth / 1.5, p.windowHeight / 1.5);\r\n  };\r\n  p.setup = () => {\r\n    p.createCanvas(p.windowWidth / 1.5, p.windowHeight / 1.5);\r\n  };\r\n\r\n  p.draw = () => {\r\n    p.background(0);\r\n    if (p.ButtonClicked) {\r\n      p.noStroke();\r\n      p.ellipseMode(p.CENTER);\r\n      ProjectileVector();\r\n      p.ellipse(p.x1, p.y1, p.radius * 2, p.radius * 2);\r\n    } else if (!p.ButtonClicked && p.ButtonClickedR) {\r\n      reset();\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    p.myCustomRedrawAccordingToNewPropsHandler = function(props) {\r\n      p.x1 =  p.radius;\r\n      p.y1 = (p.windowHeight / 1.5) - p.radius;\r\n    };\r\n  };\r\n\r\n  const ProjectileVector = () => {\r\n    if (p.x1 > p.width - p.radius || p.y1 > p.height - p.radius) {\r\n      p.background(\"blue\");\r\n      p.Vy = 0;\r\n      p.Vx = 0;\r\n    } else {\r\n      p.x1 += p.Vx;\r\n      p.Vy = p.Vy - p.g / 60;\r\n      p.y1 -= p.Vy;\r\n    } //beacuse our coordinates works in opposite direction\r\n\r\n    //console.log(p.x1,p.y1);\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}