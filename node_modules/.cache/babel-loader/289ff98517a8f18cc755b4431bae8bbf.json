{"ast":null,"code":"export default function (p) {\n  p.theta = 45 * Math.PI / 180; //Input\n\n  p.x1 = 25;\n  p.y1 = 575;\n  p.TotalVelocity = 12; //this is tha canvas limit\n\n  p.Vx = p.TotalVelocity * Math.cos(p.theta);\n  p.Vy = p.TotalVelocity * Math.sin(p.theta);\n  p.g = 9.9;\n  p.radius = 25; //input\n\n  p.Range = p.TotalVelocity * p.TotalVelocity * Math.sin(2 * p.theta) / p.g;\n\n  p.preload = function () {\n    p.myCustomRedrawAccordingToNewPropsHandler = function (props) {\n      if (props.p5Props) {\n        //console.log(props.p5Props);\n        p.ButtonClicked = props.p5Props.start;\n        p.ButtonClickedR = props.p5Props.reset;\n        console.log();\n      }\n    };\n  };\n\n  p.setup = function () {\n    p.createCanvas(1000, 600);\n  };\n\n  p.draw = function () {\n    p.background(0);\n\n    if (p.ButtonClicked) {\n      p.noStroke();\n      p.ellipseMode(p.CENTER);\n      ProjectileVector();\n      p.ellipse(p.x1, p.y1, p.radius * 2, p.radius * 2);\n    }\n  };\n\n  var ProjectileVector = function ProjectileVector() {\n    if (p.x1 > p.width - p.radius || p.y1 > p.height - p.radius) {\n      p.background(\"blue\");\n      p.Vy = 0;\n      p.Vx = 0;\n    } else {\n      p.x1 += p.Vx;\n      p.Vy = p.Vy - p.g / 60;\n      p.y1 -= p.Vy;\n    } //beacuse our coordinates works in opposite direction\n    //console.log(p.x1,p.y1);\n\n  };\n}","map":{"version":3,"sources":["C:\\Users\\Mgo\\PhpstormProjects\\untitled\\src\\Component\\sketch2.js"],"names":["p","theta","Math","PI","x1","y1","TotalVelocity","Vx","cos","Vy","sin","g","radius","Range","preload","myCustomRedrawAccordingToNewPropsHandler","props","p5Props","ButtonClicked","start","ButtonClickedR","reset","console","log","setup","createCanvas","draw","background","noStroke","ellipseMode","CENTER","ProjectileVector","ellipse","width","height"],"mappings":"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","sourcesContent":["export default function(p) {\r\n  p.theta = (45 * Math.PI) / 180; //Input\r\n  p.x1 = 25;\r\n  p.y1 = 575;\r\n  p.TotalVelocity = 12; //this is tha canvas limit\r\n  p.Vx = p.TotalVelocity * Math.cos(p.theta);\r\n  p.Vy = p.TotalVelocity * Math.sin(p.theta);\r\n  p.g = 9.9;\r\n  p.radius = 25; //input\r\n  p.Range = (p.TotalVelocity * p.TotalVelocity * Math.sin(2 * p.theta)) / p.g;\r\n\r\n  p.preload = () => {\r\n    p.myCustomRedrawAccordingToNewPropsHandler = function(props) {\r\n      if (props.p5Props) {\r\n        //console.log(props.p5Props);\r\n        p.ButtonClicked = props.p5Props.start;\r\n        p.ButtonClickedR = props.p5Props.reset;\r\n        console.log()\r\n      }\r\n    };\r\n  };\r\n\r\n\r\n  p.setup = () => {\r\n    p.createCanvas(1000, 600);\r\n  };\r\n\r\n  p.draw = () => {\r\n      p.background(0);\r\n    if (p.ButtonClicked) {\r\n      p.noStroke();\r\n      p.ellipseMode(p.CENTER);\r\n      ProjectileVector();\r\n      p.ellipse(p.x1, p.y1, p.radius * 2, p.radius * 2);\r\n\r\n    }\r\n\r\n  };\r\n\r\n\r\n  const ProjectileVector = () => {\r\n    if (p.x1 > p.width - p.radius || p.y1 > p.height - p.radius) {\r\n      p.background(\"blue\");\r\n      p.Vy = 0;\r\n      p.Vx = 0;\r\n    } else {\r\n      p.x1 += p.Vx;\r\n      p.Vy = p.Vy - p.g / 60;\r\n      p.y1 -= p.Vy;\r\n    } //beacuse our coordinates works in opposite direction\r\n\r\n    //console.log(p.x1,p.y1);\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}