{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Mgo\\\\PhpstormProjects\\\\untitled\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Mgo\\\\PhpstormProjects\\\\untitled\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Mgo\\\\PhpstormProjects\\\\untitled\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Mgo\\\\PhpstormProjects\\\\untitled\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Mgo\\\\PhpstormProjects\\\\untitled\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Mgo\\\\PhpstormProjects\\\\untitled\\\\src\\\\Components\\\\Streams\\\\TableStream.js\";\nimport React, { Component } from \"react\";\nimport Table from \"../Reusable/Table\";\nimport { connect } from \"react-redux\";\nimport { fetchStreams } from \"../../actions\";\nimport { Link } from \"react-router-dom\";\nimport Pagination from \"../Reusable/Pagination\";\n\nvar TableStream =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TableStream, _Component);\n\n  function TableStream() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TableStream);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TableStream)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      PageSize: 4,\n      currentpage: 1\n    };\n    _this.columns = [{\n      path: \"title\",\n      label: \"Title\"\n    }, {\n      path: \"description\",\n      label: \"Description\"\n    }, {\n      key: \"Buttons\",\n      content: function content(stream) {\n        if (stream.userId === _this.props.currentUserId) return React.createElement(Link, {\n          to: \"/streams/delete/\".concat(stream.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          className: \"btn btn-danger btn-sm\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }, \"Delete\"));\n      }\n    }, {\n      key: \"Buttons1\",\n      content: function content(stream) {\n        if (stream.userId === _this.props.currentUserId) return React.createElement(Link, {\n          to: \"/streams/edit/\".concat(stream.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          className: \"btn btn-dark btn-sm\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, \"Edit\"));\n      }\n    }];\n\n    _this.handlePageChange = function (page) {\n      _this.setState({\n        currentpage: page\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(TableStream, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.fetchStreams();\n    }\n  }, {\n    key: \"renderCreateStreamB\",\n    value: function renderCreateStreamB() {\n      if (this.props.isSignedIn) {\n        return React.createElement(Link, {\n          to: \"streams/new\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          className: \"btn btn-dark btn-lg m-5\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21\n          },\n          __self: this\n        }, \"Create Stream\"));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // console.log(this.props.data); //this proves that we already fetched the data from rhe rest API\n      var streams = this.props.streams;\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(Table, {\n        columns: this.columns,\n        data: this.props.streams,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }), React.createElement(Pagination, {\n        itemsCount: 10,\n        PageSize: this.state.PageSize,\n        onPageChange: this.handlePageChange,\n        currentPage: this.state.currentpage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }), this.renderCreateStreamB());\n    }\n  }]);\n\n  return TableStream;\n}(Component);\n\nvar mapStatetoProps = function mapStatetoProps(state) {\n  return {\n    streams: Object.values(state.STreams),\n    //converting the object to array\n    isSignedIn: state.authReducer.isSignedIn,\n    currentUserId: state.authReducer.userId\n  };\n};\n\nexport default connect(mapStatetoProps, {\n  fetchStreams: fetchStreams\n})(TableStream);","map":{"version":3,"sources":["C:\\Users\\Mgo\\PhpstormProjects\\untitled\\src\\Components\\Streams\\TableStream.js"],"names":["React","Component","Table","connect","fetchStreams","Link","Pagination","TableStream","state","PageSize","currentpage","columns","path","label","key","content","stream","userId","props","currentUserId","id","handlePageChange","page","setState","isSignedIn","streams","renderCreateStreamB","mapStatetoProps","Object","values","STreams","authReducer"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Table from \"../Reusable/Table\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchStreams } from \"../../actions\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Pagination from \"../Reusable/Pagination\";\r\n\r\nclass TableStream extends Component { //this table stream will come with pagination\r\nstate = {\r\n  PageSize: 4,\r\n  currentpage: 1\r\n};\r\n\r\n  componentDidMount() {\r\n    this.props.fetchStreams();\r\n  }\r\n  renderCreateStreamB() {\r\n    if (this.props.isSignedIn) {\r\n      return (\r\n        <Link to=\"streams/new\">\r\n          <button className=\"btn btn-dark btn-lg m-5\">Create Stream</button>\r\n        </Link>\r\n      );\r\n    }\r\n  }\r\n  columns = [\r\n    { path: \"title\", label: \"Title\" },\r\n    { path: \"description\", label: \"Description\" },\r\n    {\r\n      key: \"Buttons\",\r\n      content: stream => {\r\n        if (stream.userId === this.props.currentUserId)\r\n          return (\r\n            <Link to={`/streams/delete/${stream.id}`}>\r\n              <button className=\"btn btn-danger btn-sm\">Delete</button>\r\n            </Link>\r\n          );\r\n      }\r\n    },\r\n    {\r\n      key: \"Buttons1\",\r\n      content: stream => {\r\n        if (stream.userId === this.props.currentUserId)\r\n          return (\r\n            <Link to={`/streams/edit/${stream.id}`}>\r\n              <button className=\"btn btn-dark btn-sm\">Edit</button>\r\n            </Link>\r\n          );\r\n      }\r\n    }\r\n  ];\r\n  handlePageChange = page => {\r\n    this.setState({ currentpage: page });\r\n  };\r\n\r\n  render() {\r\n    // console.log(this.props.data); //this proves that we already fetched the data from rhe rest API\r\n    const { streams } = this.props;\r\n    return (\r\n      <div className=\"container\">\r\n        <Table columns={this.columns} data={this.props.streams} />\r\n        <Pagination itemsCount={10} PageSize={this.state.PageSize} onPageChange={this.handlePageChange} currentPage={this.state.currentpage}/>\r\n        {this.renderCreateStreamB()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStatetoProps = state => {\r\n  return {\r\n    streams: Object.values(state.STreams), //converting the object to array\r\n    isSignedIn: state.authReducer.isSignedIn,\r\n    currentUserId: state.authReducer.userId\r\n  };\r\n};\r\nexport default connect(\r\n  mapStatetoProps,\r\n  { fetchStreams }\r\n)(TableStream);\r\n"]},"metadata":{},"sourceType":"module"}