{"ast":null,"code":"export default function (p) {\n  // p.Range = (p.TotalVelocity * p.TotalVelocity * Math.sin(2 * p.theta)) / p.g;\n  p.radius = 25;\n  p.x1 = p.radius;\n  p.y1 = p.windowHeight / 1.5 - p.radius;\n\n  var reset = function reset() {\n    p.myCustomRedrawAccordingToNewPropsHandler = function (props) {\n      if (props.p5Props) {\n        p.ButtonClicked = props.p5Props.start;\n        p.ButtonClickedR = props.p5Props.reset;\n        p.radius = Number(props.p5Props.radius); // also input\n\n        p.degree = Number(props.p5Props.degree);\n        p.theta = p.degree * Math.PI / 180;\n        p.x1 = p.radius;\n        p.y1 = p.windowHeight / 1.5 - p.radius;\n        p.TotalVelocity = Number(props.p5Props.velocity); //this is tha canvas limit\n\n        p.Vx = p.TotalVelocity * Math.cos(p.theta);\n        p.Vy = p.TotalVelocity * Math.sin(p.theta);\n        p.g = Number(props.p5Props.Gravitational); // we will let put the variable g as stronger gravity planets\n        //input\n        //console.log(props.p5Props);\n      }\n    };\n  };\n\n  p.preload = function () {\n    reset();\n  };\n\n  p.windowResized = function () {\n    p.resizeCanvas(p.windowWidth / 1.5, p.windowHeight / 1.5);\n  };\n\n  p.setup = function () {\n    p.createCanvas(p.windowWidth / 1.5, p.windowHeight / 1.5);\n  };\n\n  p.draw = function () {\n    p.background(200, 250, 100);\n    p.noStroke();\n    p.ellipseMode(p.CENTER);\n    p.fill(\"blue\");\n    p.ellipse(p.x1, p.y1, p.radius * 2, p.radius * 2);\n\n    if (p.ButtonClicked) {\n      ProjectileVector();\n    } else if (!p.ButtonClicked && p.ButtonClickedR) {\n      reset();\n    }\n  };\n\n  var ProjectileVector = function ProjectileVector() {\n    if (p.x1 > p.width - p.radius || p.y1 > p.height - p.radius) {\n      p.background(0);\n      p.Vy = 0;\n      p.Vx = 0;\n    } else {\n      p.x1 += p.Vx;\n      p.Vy = p.Vy - p.g / 60;\n      p.y1 -= p.Vy;\n    } //beacuse our coordinates works in opposite direction\n    //console.log(p.x1,p.y1);\n\n  };\n}","map":{"version":3,"sources":["C:\\Users\\Mgo\\PhpstormProjects\\untitled\\src\\Component\\sketch2.js"],"names":["p","radius","x1","y1","windowHeight","reset","myCustomRedrawAccordingToNewPropsHandler","props","p5Props","ButtonClicked","start","ButtonClickedR","Number","degree","theta","Math","PI","TotalVelocity","velocity","Vx","cos","Vy","sin","g","Gravitational","preload","windowResized","resizeCanvas","windowWidth","setup","createCanvas","draw","background","noStroke","ellipseMode","CENTER","fill","ellipse","ProjectileVector","width","height"],"mappings":"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","sourcesContent":["export default function(p) {\r\n  // p.Range = (p.TotalVelocity * p.TotalVelocity * Math.sin(2 * p.theta)) / p.g;\r\n  p.radius = 25;\r\n  p.x1 = p.radius;\r\n  p.y1 = p.windowHeight / 1.5 - p.radius;\r\n  const reset = () => {\r\n    p.myCustomRedrawAccordingToNewPropsHandler = function(props) {\r\n      if (props.p5Props) {\r\n        p.ButtonClicked = props.p5Props.start;\r\n        p.ButtonClickedR = props.p5Props.reset;\r\n        p.radius = Number(props.p5Props.radius); // also input\r\n        p.degree = Number(props.p5Props.degree);\r\n        p.theta = (p.degree * Math.PI) / 180;\r\n        p.x1 = p.radius;\r\n        p.y1 = p.windowHeight / 1.5 - p.radius;\r\n        p.TotalVelocity = Number(props.p5Props.velocity); //this is tha canvas limit\r\n        p.Vx = p.TotalVelocity * Math.cos(p.theta);\r\n        p.Vy = p.TotalVelocity * Math.sin(p.theta);\r\n        p.g = Number(props.p5Props.Gravitational); // we will let put the variable g as stronger gravity planets\r\n        //input\r\n        //console.log(props.p5Props);\r\n      }\r\n    };\r\n  };\r\n\r\n  p.preload = () => {\r\n    reset();\r\n  };\r\n\r\n  p.windowResized = () => {\r\n    p.resizeCanvas(p.windowWidth / 1.5, p.windowHeight / 1.5);\r\n  };\r\n  p.setup = () => {\r\n    p.createCanvas(p.windowWidth / 1.5, p.windowHeight / 1.5);\r\n  };\r\n\r\n  p.draw = () => {\r\n    p.background(200, 250, 100);\r\n    p.noStroke();\r\n    p.ellipseMode(p.CENTER);\r\n    p.fill(\"blue\");\r\n    p.ellipse(p.x1, p.y1, p.radius * 2, p.radius * 2);\r\n\r\n    if (p.ButtonClicked) {\r\n      ProjectileVector();\r\n    } else if (!p.ButtonClicked && p.ButtonClickedR) {\r\n      reset();\r\n    }\r\n  };\r\n\r\n  const ProjectileVector = () => {\r\n    if (p.x1 > p.width - p.radius || p.y1 > p.height - p.radius) {\r\n      p.background(0);\r\n      p.Vy = 0;\r\n      p.Vx = 0;\r\n    } else {\r\n      p.x1 += p.Vx;\r\n      p.Vy = p.Vy - p.g / 60;\r\n      p.y1 -= p.Vy;\r\n    } //beacuse our coordinates works in opposite direction\r\n\r\n    //console.log(p.x1,p.y1);\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}