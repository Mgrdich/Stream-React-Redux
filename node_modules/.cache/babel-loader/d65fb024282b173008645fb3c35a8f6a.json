{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Mgo\\\\PhpstormProjects\\\\untitled\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Mgo\\\\PhpstormProjects\\\\untitled\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Mgo\\\\PhpstormProjects\\\\untitled\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Mgo\\\\PhpstormProjects\\\\untitled\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Mgo\\\\PhpstormProjects\\\\untitled\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Mgo\\\\PhpstormProjects\\\\untitled\\\\src\\\\Components\\\\Streams\\\\StreamList.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchStreams } from \"../../actions\";\n\nvar StreamList =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamList, _React$Component);\n\n  function StreamList() {\n    _classCallCheck(this, StreamList);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StreamList).apply(this, arguments));\n  }\n\n  _createClass(StreamList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.fetchStreams(); //in the action creator which will give us an array of fetched data\n    }\n  }, {\n    key: \"renderAdminB\",\n    value: function renderAdminB(stream) {\n      console.log(\"this.props\", this.props.currentUserId);\n      if (stream.userId === this.props.currentUserId) return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }, \"delete\");\n    }\n  }, {\n    key: \"renderStream\",\n    value: function renderStream() {\n      var _this = this;\n\n      var streams = this.props.streams;\n      return streams.map(function (stream) {\n        return React.createElement(\"div\", {\n          className: \"item\",\n          key: stream.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"large middle aligned icon camera\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"content\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23\n          },\n          __self: this\n        }, stream.title, React.createElement(\"div\", {\n          className: \"description\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        }, stream.description)), _this.renderAdminB(stream));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"ui celled list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, this.renderStream());\n    }\n  }]);\n\n  return StreamList;\n}(React.Component);\n\nvar mapStatetoProps = function mapStatetoProps(state) {\n  return {\n    streams: Object.values(state.STreams),\n    //converting the object to array\n    currentUserId: state.authReducer.userId\n  };\n};\n\nexport default connect(mapStatetoProps, {\n  fetchStreams: fetchStreams\n})(StreamList);","map":{"version":3,"sources":["C:\\Users\\Mgo\\PhpstormProjects\\untitled\\src\\Components\\Streams\\StreamList.js"],"names":["React","connect","fetchStreams","StreamList","props","stream","console","log","currentUserId","userId","streams","map","id","title","description","renderAdminB","renderStream","Component","mapStatetoProps","state","Object","values","STreams","authReducer"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,eAA7B;;IAEMC,U;;;;;;;;;;;;;wCACgB;AAClB,WAAKC,KAAL,CAAWF,YAAX,GADkB,CACS;AAC5B;;;iCACUG,M,EAAO;AAEhBC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyB,KAAKH,KAAL,CAAWI,aAApC;AACA,UAAGH,MAAM,CAACI,MAAP,KAAgB,KAAKL,KAAL,CAAWI,aAA9B,EACE,OACM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADN;AAGL;;;mCACmB;AAAA;;AAAA,UACRE,OADQ,GACI,KAAKN,KADT,CACRM,OADQ;AAEhB,aAAOA,OAAO,CAACC,GAAR,CAAY,UAAAN,MAAM,EAAI;AAC3B,eACE;AAAK,UAAA,SAAS,EAAC,MAAf;AAAsB,UAAA,GAAG,EAAEA,MAAM,CAACO,EAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAG,UAAA,SAAS,EAAC,kCAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,EAEE;AAAK,UAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGP,MAAM,CAACQ,KADV,EAEE;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA8BR,MAAM,CAACS,WAArC,CAFF,CAFF,EAMG,KAAI,CAACC,YAAL,CAAkBV,MAAlB,CANH,CADF;AAWD,OAZM,CAAP;AAaD;;;6BACQ;AACP,aAAO;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiC,KAAKW,YAAL,EAAjC,CAAP;AACD;;;;EA9BsBhB,KAAK,CAACiB,S;;AAgC/B,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC/B,SAAO;AACLT,IAAAA,OAAO,EAAEU,MAAM,CAACC,MAAP,CAAcF,KAAK,CAACG,OAApB,CADJ;AACiC;AACtCd,IAAAA,aAAa,EAACW,KAAK,CAACI,WAAN,CAAkBd;AAF3B,GAAP;AAID,CALD;;AAMA,eAAeR,OAAO,CACpBiB,eADoB,EAEpB;AAAEhB,EAAAA,YAAY,EAAZA;AAAF,CAFoB,CAAP,CAGbC,UAHa,CAAf","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchStreams } from \"../../actions\";\r\n\r\nclass StreamList extends React.Component {\r\n  componentDidMount() {\r\n    this.props.fetchStreams(); //in the action creator which will give us an array of fetched data\r\n  }\r\nrenderAdminB(stream){\r\n\r\n    console.log(\"this.props\",this.props.currentUserId);\r\n    if(stream.userId===this.props.currentUserId)\r\n      return (\r\n            <div>delete</div>\r\n      );\r\n}\r\n  renderStream  ()  {\r\n    const { streams } = this.props;\r\n    return streams.map(stream => {\r\n      return (\r\n        <div className=\"item\" key={stream.id}>\r\n          <i className=\"large middle aligned icon camera\"/>\r\n          <div className=\"content\">\r\n            {stream.title}\r\n            <div className=\"description\">{stream.description}</div>\r\n          </div>\r\n          {this.renderAdminB(stream)}\r\n        </div>\r\n\r\n      );\r\n    });\r\n  };\r\n  render() {\r\n    return <div className=\"ui celled list\">{this.renderStream()}</div>;\r\n  }\r\n}\r\nconst mapStatetoProps = state => {\r\n  return {\r\n    streams: Object.values(state.STreams),//converting the object to array\r\n    currentUserId:state.authReducer.userId\r\n  };\r\n};\r\nexport default connect(\r\n  mapStatetoProps,\r\n  { fetchStreams }\r\n)(StreamList);\r\n"]},"metadata":{},"sourceType":"module"}