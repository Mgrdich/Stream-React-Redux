{"ast":null,"code":"export default function (p) {\n  // p.Range = (p.TotalVelocity * p.TotalVelocity * Math.sin(2 * p.theta)) / p.g;\n  p.preload = function () {\n    p.myCustomRedrawAccordingToNewPropsHandler = function (props) {\n      if (props.p5Props) {\n        console.log(props.p5Props);\n        p.ButtonClicked = props.p5Props.start;\n        p.ButtonClickedR = props.p5Props.reset;\n        p.radius = props.p5Props.radius; // also input\n\n        p.degree = props.p5Props.degree;\n        p.theta = p.degree * Math.PI / 180;\n        p.x1 = p.radius;\n        p.y1 = p.windowHeight / 1.5 - p.radius;\n        p.TotalVelocity = props.p5Props.velocity; //this is tha canvas limit\n\n        p.Vx = p.TotalVelocity * Math.cos(p.theta);\n        p.Vy = p.TotalVelocity * Math.sin(p.theta);\n        p.g = props.p5Props.Gravitational; // we will let put the variable g as stronger gravity planets\n        //input\n      }\n    };\n  };\n\n  p.windowResized = function () {\n    p.resizeCanvas(p.windowWidth / 1.5, p.windowHeight / 1.5);\n  };\n\n  p.setup = function () {\n    p.createCanvas(p.windowWidth / 1.5, p.windowHeight / 1.5);\n  };\n\n  p.draw = function () {\n    p.background(0);\n    p.noStroke();\n    p.ellipseMode(p.CENTER);\n    p.ellipse(p.x1, p.y1, p.radius * 2, p.radius * 2);\n\n    if (p.ButtonClicked) {\n      ProjectileVector();\n    } else if (!p.ButtonClicked && p.ButtonClickedR) {\n      reset();\n    }\n  };\n\n  var reset = function reset() {\n    p.myCustomRedrawAccordingToNewPropsHandler = function (props) {\n      if (props.p5Props) {\n        console.log(props.p5Props);\n        p.ButtonClicked = props.p5Props.start;\n        p.ButtonClickedR = props.p5Props.reset;\n        p.radius = props.p5Props.radius; // also input\n\n        p.degree = props.p5Props.degree;\n        p.theta = p.degree * Math.PI / 180;\n        p.x1 = p.radius;\n        p.y1 = p.windowHeight / 1.5 - p.radius;\n        p.TotalVelocity = props.p5Props.velocity;\n        p.Vx = p.TotalVelocity * Math.cos(p.theta);\n        p.Vy = p.TotalVelocity * Math.sin(p.theta);\n        p.g = props.p5Props.Gravitational; // we will let put the variable g as stronger gravity planets\n      }\n    };\n  };\n\n  var ProjectileVector = function ProjectileVector() {\n    if (p.x1 > p.width - p.radius || p.y1 > p.height - p.radius) {\n      p.background(\"blue\");\n      p.Vy = 0;\n      p.Vx = 0;\n    } else {\n      p.x1 += p.Vx;\n      p.Vy = p.Vy - p.g / 60;\n      p.y1 -= p.Vy;\n    } //beacuse our coordinates works in opposite direction\n    //console.log(p.x1,p.y1);\n\n  };\n}","map":{"version":3,"sources":["C:\\Users\\Mgo\\PhpstormProjects\\untitled\\src\\Component\\sketch2.js"],"names":["p","preload","myCustomRedrawAccordingToNewPropsHandler","props","p5Props","console","log","ButtonClicked","start","ButtonClickedR","reset","radius","degree","theta","Math","PI","x1","y1","windowHeight","TotalVelocity","velocity","Vx","cos","Vy","sin","g","Gravitational","windowResized","resizeCanvas","windowWidth","setup","createCanvas","draw","background","noStroke","ellipseMode","CENTER","ellipse","ProjectileVector","width","height"],"mappings":"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","sourcesContent":["export default function(p) {\r\n // p.Range = (p.TotalVelocity * p.TotalVelocity * Math.sin(2 * p.theta)) / p.g;\r\n\r\n  p.preload = () => {\r\n    p.myCustomRedrawAccordingToNewPropsHandler = function(props) {\r\n      if (props.p5Props) {\r\n        console.log(props.p5Props);\r\n        p.ButtonClicked = props.p5Props.start;\r\n        p.ButtonClickedR = props.p5Props.reset;\r\n        p.radius = props.p5Props.radius; // also input\r\n        p.degree = props.p5Props.degree;\r\n        p.theta = (p.degree * Math.PI) / 180;\r\n        p.x1 = p.radius;\r\n        p.y1 = p.windowHeight / 1.5 - p.radius;\r\n        p.TotalVelocity = props.p5Props.velocity; //this is tha canvas limit\r\n        p.Vx = p.TotalVelocity * Math.cos(p.theta);\r\n        p.Vy = p.TotalVelocity * Math.sin(p.theta);\r\n        p.g = props.p5Props.Gravitational; // we will let put the variable g as stronger gravity planets\r\n//input\r\n      }\r\n    };\r\n  };\r\n\r\n  p.windowResized = () => {\r\n    p.resizeCanvas(p.windowWidth / 1.5, p.windowHeight / 1.5);\r\n  };\r\n  p.setup = () => {\r\n    p.createCanvas(p.windowWidth / 1.5, p.windowHeight / 1.5);\r\n  };\r\n\r\n  p.draw = () => {\r\n    p.background(0);\r\n    p.noStroke();\r\n    p.ellipseMode(p.CENTER);\r\n    p.ellipse(p.x1, p.y1, p.radius * 2, p.radius * 2);\r\n\r\n    if (p.ButtonClicked) {\r\n      ProjectileVector();\r\n\r\n    } else if (!p.ButtonClicked && p.ButtonClickedR) {\r\n      reset();\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    p.myCustomRedrawAccordingToNewPropsHandler = function(props) {\r\n      if (props.p5Props) {\r\n        console.log(props.p5Props);\r\n        p.ButtonClicked = props.p5Props.start;\r\n        p.ButtonClickedR = props.p5Props.reset;\r\n        p.radius = props.p5Props.radius; // also input\r\n        p.degree = props.p5Props.degree;\r\n        p.theta = (p.degree * Math.PI) / 180;\r\n        p.x1 = p.radius;\r\n        p.y1 = p.windowHeight / 1.5 - p.radius;\r\n        p.TotalVelocity = props.p5Props.velocity;\r\n        p.Vx = p.TotalVelocity * Math.cos(p.theta);\r\n        p.Vy = p.TotalVelocity * Math.sin(p.theta);\r\n        p.g = props.p5Props.Gravitational; // we will let put the variable g as stronger gravity planets\r\n      }\r\n    };\r\n  };\r\n\r\n  const ProjectileVector = () => {\r\n    if (p.x1 > p.width - p.radius || p.y1 > p.height - p.radius) {\r\n      p.background(\"blue\");\r\n      p.Vy = 0;\r\n      p.Vx = 0;\r\n    } else {\r\n      p.x1 += p.Vx;\r\n      p.Vy = p.Vy - p.g / 60;\r\n      p.y1 -= p.Vy;\r\n    } //beacuse our coordinates works in opposite direction\r\n\r\n    //console.log(p.x1,p.y1);\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}