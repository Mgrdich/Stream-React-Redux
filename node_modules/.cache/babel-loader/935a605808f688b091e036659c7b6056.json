{"ast":null,"code":"export default function (p) {\n  /* p.velocity1Intial = 20;*/\n\n  /* p.velocity2Intial = -40;*/\n\n  /* p.mass1 = 20;*/\n\n  /* p.mass2 = 10;*/\n\n  /* p.TMass = p.mass1 + p.mass2;*/\n\n  /*p.height1 = 300;*/\n\n  /*p.height2 = 150;*/\n\n  /*p.width1 = 100;*/\n\n  /*p.width2 = 100;*/\n  p.DetectCollison = false;\n\n  var reset1 = function reset1() {\n    p.myCustomRedrawAccordingToNewPropsHandler = function (props) {\n      if (props.p5Props) {\n        console.log(props.p5Props);\n        p.velocity1Intial = Number(props.p5Props.velocity1);\n        p.velocity2Intial = -Number(props.p5Props.velocity2);\n        p.mass1 = Number(props.p5Props.mass1);\n        p.mass2 = Number(props.p5Props.mass2);\n        p.TMass = p.mass1 + p.mass2;\n        p.height1 = Number(props.p5Props.height1);\n        p.height2 = Number(props.p5Props.height2);\n        p.width1 = Number(props.p5Props.width1);\n        p.width2 = Number(props.p5Props.width2);\n        p.ButtonClicked = props.p5Props.start;\n        p.ButtonClickedR = props.p5Props.reset;\n        p.Inelastic = props.p5Props.Inelastic;\n        p.x1 = p.width1 / 2;\n        p.remainder = (p.windowWidth / 1.5 - p.width2 / 2 - p.width1 / 2) % (p.velocity1Intial + -p.velocity2Intial);\n        p.x2 = p.windowWidth / 1.5 - p.width2 / 2;\n        console.log(p.x1, p.x2);\n      }\n    };\n  };\n\n  p.preload = function () {\n    reset1();\n  };\n\n  p.setup = function () {\n    p.createCanvas(p.windowWidth / 1.5, p.windowHeight / 1.5);\n  };\n\n  p.draw = function () {\n    p.background(250, 200, 100);\n    p.rectMode(p.CENTER);\n    p.fill(\"green\");\n    p.rect(p.x1, 200, p.width1, p.height1, 20);\n    p.fill(255, 204, 0);\n    p.rect(p.x2, 200, p.width2, p.height2, 20);\n\n    if (p.ButtonClicked) {\n      if (!p.Inelastic) CollisionDetectElastic();else {\n        CollisonInelastic();\n      }\n    } else if (!p.ButtonClicked && p.ButtonClickedR) {\n      reset1();\n      p.DetectCollison = false;\n    }\n  };\n\n  var CollisionDetectElastic = function CollisionDetectElastic() {\n    var velocity2Final = (2 * p.mass1 * p.velocity1Intial + p.velocity2Intial * (p.mass2 - p.mass1)) / p.TMass;\n    var velocity1Final = (2 * p.mass2 * p.velocity2Intial + p.velocity1Intial * (p.mass1 - p.mass2)) / p.TMass;\n    /*   console.log(\"Vf2=\", velocity2Final);\r\n          console.log(\"V1f=\", velocity1Final);*/\n\n    var distance = p.dist(p.x1, 200, p.x2, 200); // console.log(distance);\n\n    if (distance <= (p.width1 + p.width2) / 2 && distance <= (p.width1 + p.width2) / 2 || p.DetectCollison) {\n      p.DetectCollison = true;\n      p.x1 += velocity1Final;\n      p.x2 += velocity2Final;\n    } else if (!p.DetectCollison) {\n      p.x1 += p.velocity1Intial;\n      p.x2 += p.velocity2Intial;\n    }\n  };\n\n  var CollisonInelastic = function CollisonInelastic() {\n    var TVelocity = (p.mass1 * p.velocity1Intial + p.mass2 * p.velocity2Intial) / p.TMass;\n    var distance = p.dist(p.x1, 200, p.x2, 200);\n\n    if (distance <= (p.width1 + p.width2) / 2 + p.remainder && distance <= (p.width1 + p.width2) / 2 - p.remainder || p.DetectCollison) {\n      p.DetectCollison = true;\n      p.x1 += TVelocity;\n      p.x2 += TVelocity;\n    }\n\n    if (!p.DetectCollison) {\n      p.x1 += p.velocity1Intial;\n      p.x2 += p.velocity2Intial;\n    }\n  };\n\n  p.windowResized = function () {\n    p.resizeCanvas(p.windowWidth / 1.5, p.windowHeight / 1.5);\n  };\n}","map":{"version":3,"sources":["C:\\Users\\Mgo\\PhpstormProjects\\untitled\\src\\Component\\sketch1.js"],"names":["p","DetectCollison","reset1","myCustomRedrawAccordingToNewPropsHandler","props","p5Props","console","log","velocity1Intial","Number","velocity1","velocity2Intial","velocity2","mass1","mass2","TMass","height1","height2","width1","width2","ButtonClicked","start","ButtonClickedR","reset","Inelastic","x1","remainder","windowWidth","x2","preload","setup","createCanvas","windowHeight","draw","background","rectMode","CENTER","fill","rect","CollisionDetectElastic","CollisonInelastic","velocity2Final","velocity1Final","distance","dist","TVelocity","windowResized","resizeCanvas"],"mappings":"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","sourcesContent":["export default function(p) {\r\n  /* p.velocity1Intial = 20;*/\r\n  /* p.velocity2Intial = -40;*/\r\n  /* p.mass1 = 20;*/\r\n  /* p.mass2 = 10;*/\r\n  /* p.TMass = p.mass1 + p.mass2;*/\r\n  /*p.height1 = 300;*/\r\n  /*p.height2 = 150;*/\r\n  /*p.width1 = 100;*/\r\n  /*p.width2 = 100;*/\r\n  p.DetectCollison = false;\r\n  const reset1 = () => {\r\n    p.myCustomRedrawAccordingToNewPropsHandler = function(props) {\r\n      if (props.p5Props) {\r\n        console.log(props.p5Props);\r\n\r\n        p.velocity1Intial = Number(props.p5Props.velocity1);\r\n        p.velocity2Intial = -Number(props.p5Props.velocity2);\r\n        p.mass1 = Number(props.p5Props.mass1);\r\n        p.mass2 = Number(props.p5Props.mass2);\r\n        p.TMass = p.mass1 + p.mass2;\r\n        p.height1 = Number(props.p5Props.height1);\r\n        p.height2 = Number(props.p5Props.height2);\r\n        p.width1 = Number(props.p5Props.width1);\r\n        p.width2 = Number(props.p5Props.width2);\r\n        p.ButtonClicked = props.p5Props.start;\r\n        p.ButtonClickedR = props.p5Props.reset;\r\n        p.Inelastic = props.p5Props.Inelastic;\r\n        p.x1 = p.width1 / 2;\r\n        p.remainder =\r\n          (p.windowWidth / 1.5 - p.width2 / 2 - p.width1 / 2) %\r\n          (p.velocity1Intial + -p.velocity2Intial);\r\n        p.x2 = p.windowWidth / 1.5 - p.width2 / 2;\r\n        console.log(p.x1, p.x2);\r\n      }\r\n    };\r\n  };\r\n  p.preload = () => {\r\n    reset1();\r\n  };\r\n  p.setup = () => {\r\n    p.createCanvas(p.windowWidth / 1.5, p.windowHeight / 1.5);\r\n  };\r\n\r\n  p.draw = () => {\r\n    p.background(250,200,100);\r\n    p.rectMode(p.CENTER);\r\n    p.fill(\"green\");\r\n    p.rect(p.x1, 200, p.width1, p.height1, 20);\r\n    p.fill(255, 204, 0);\r\n    p.rect(p.x2, 200, p.width2, p.height2, 20);\r\n\r\n    if (p.ButtonClicked) {\r\n      if (!p.Inelastic) CollisionDetectElastic();\r\n      else {\r\n        CollisonInelastic();\r\n      }\r\n    } else if (!p.ButtonClicked && p.ButtonClickedR) {\r\n      reset1();\r\n      p.DetectCollison = false;\r\n    }\r\n  };\r\n\r\n  const CollisionDetectElastic = () => {\r\n    let velocity2Final =\r\n      (2 * p.mass1 * p.velocity1Intial +\r\n        p.velocity2Intial * (p.mass2 - p.mass1)) /\r\n      p.TMass;\r\n    let velocity1Final =\r\n      (2 * p.mass2 * p.velocity2Intial +\r\n        p.velocity1Intial * (p.mass1 - p.mass2)) /\r\n      p.TMass;\r\n\r\n    /*   console.log(\"Vf2=\", velocity2Final);\r\n          console.log(\"V1f=\", velocity1Final);*/\r\n\r\n    let distance = p.dist(p.x1, 200, p.x2, 200);\r\n\r\n    // console.log(distance);\r\n\r\n    if (\r\n      (distance <= (p.width1 + p.width2) / 2 &&\r\n        distance <= (p.width1 + p.width2) / 2) ||\r\n      p.DetectCollison\r\n    ) {\r\n      p.DetectCollison = true;\r\n      p.x1 += velocity1Final;\r\n      p.x2 += velocity2Final;\r\n    } else if (!p.DetectCollison) {\r\n      p.x1 += p.velocity1Intial;\r\n      p.x2 += p.velocity2Intial;\r\n    }\r\n  };\r\n\r\n  const CollisonInelastic = () => {\r\n    let TVelocity =\r\n      (p.mass1 * p.velocity1Intial + p.mass2 * p.velocity2Intial) / p.TMass;\r\n    let distance = p.dist(p.x1, 200, p.x2, 200);\r\n    if (\r\n      (distance <= (p.width1 + p.width2) / 2 + p.remainder &&\r\n        distance <= (p.width1 + p.width2) / 2 - p.remainder) ||\r\n      p.DetectCollison\r\n    ) {\r\n      p.DetectCollison = true;\r\n      p.x1 += TVelocity;\r\n      p.x2 += TVelocity;\r\n    }\r\n    if (!p.DetectCollison) {\r\n      p.x1 += p.velocity1Intial;\r\n      p.x2 += p.velocity2Intial;\r\n    }\r\n  };\r\n  p.windowResized = () => {\r\n    p.resizeCanvas(p.windowWidth / 1.5, p.windowHeight / 1.5);\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}