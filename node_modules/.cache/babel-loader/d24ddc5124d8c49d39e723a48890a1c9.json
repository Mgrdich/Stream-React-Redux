{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _ProgressBar = require('./ProgressBar');\n\nvar _ProgressBar2 = _interopRequireDefault(_ProgressBar);\n\nvar _constant = require('./../utils/constant');\n\nvar _propValidator = require('./../utils/propValidator');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction getX(e) {\n  return e.targetTouches && e.targetTouches.length >= 1 ? e.targetTouches[0].clientX : e.clientX;\n}\n\nfunction getY(e) {\n  return e.targetTouches && e.targetTouches.length >= 1 ? e.targetTouches[0].clientY : e.clientY;\n}\n\nvar noop = function noop() {};\n\nvar Toast = function (_Component) {\n  _inherits(Toast, _Component);\n\n  function Toast() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Toast);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Toast.__proto__ || Object.getPrototypeOf(Toast)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      isRunning: true,\n      preventExitTransition: false\n    }, _this.flag = {\n      canCloseOnClick: true,\n      canDrag: false\n    }, _this.drag = {\n      start: 0,\n      x: 0,\n      y: 0,\n      deltaX: 0,\n      removalDistance: 0\n    }, _this.ref = null, _this.pauseToast = function () {\n      _this.setState({\n        isRunning: false\n      });\n    }, _this.playToast = function () {\n      _this.setState({\n        isRunning: true\n      });\n    }, _this.onDragStart = function (e) {\n      _this.flag.canCloseOnClick = true;\n      _this.flag.canDrag = true;\n      _this.ref.style.transition = '';\n      _this.drag.start = _this.drag.x = getX(e.nativeEvent);\n      _this.drag.removalDistance = _this.ref.offsetWidth * (_this.props.draggablePercent / 100);\n    }, _this.onDragMove = function (e) {\n      if (_this.flag.canDrag) {\n        if (_this.state.isRunning) {\n          _this.pauseToast();\n        }\n\n        _this.drag.x = getX(e);\n        _this.drag.deltaX = _this.drag.x - _this.drag.start; // prevent false positif during a toast click\n\n        _this.drag.start !== _this.drag.x && (_this.flag.canCloseOnClick = false);\n        _this.ref.style.transform = 'translateX(' + _this.drag.deltaX + 'px)';\n        _this.ref.style.opacity = 1 - Math.abs(_this.drag.deltaX / _this.drag.removalDistance);\n      }\n    }, _this.onDragEnd = function (e) {\n      if (_this.flag.canDrag) {\n        _this.flag.canDrag = false;\n\n        if (Math.abs(_this.drag.deltaX) > _this.drag.removalDistance) {\n          _this.setState({\n            preventExitTransition: true\n          }, _this.props.closeToast);\n\n          return;\n        }\n\n        _this.drag.y = getY(e);\n        _this.ref.style.transition = 'transform 0.2s, opacity 0.2s';\n        _this.ref.style.transform = 'translateX(0)';\n        _this.ref.style.opacity = 1;\n      }\n    }, _this.onDragTransitionEnd = function () {\n      var _this$ref$getBounding = _this.ref.getBoundingClientRect(),\n          top = _this$ref$getBounding.top,\n          bottom = _this$ref$getBounding.bottom,\n          left = _this$ref$getBounding.left,\n          right = _this$ref$getBounding.right;\n\n      if (_this.props.pauseOnHover && _this.drag.x >= left && _this.drag.x <= right && _this.drag.y >= top && _this.drag.y <= bottom) {\n        _this.pauseToast();\n      } else {\n        _this.playToast();\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Toast, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.props.onOpen(this.props.children.props);\n\n      if (this.props.draggable) {\n        this.bindDragEvents();\n      }\n    }\n  }, {\n    key: 'bindDragEvents',\n    value: function bindDragEvents() {\n      document.addEventListener('mousemove', this.onDragMove);\n      document.addEventListener('mouseup', this.onDragEnd);\n      document.addEventListener('touchmove', this.onDragMove);\n      document.addEventListener('touchend', this.onDragEnd);\n    }\n  }, {\n    key: 'unbindDragEvents',\n    value: function unbindDragEvents() {\n      document.removeEventListener('mousemove', this.onDragMove);\n      document.removeEventListener('mouseup', this.onDragEnd);\n      document.removeEventListener('touchmove', this.onDragMove);\n      document.removeEventListener('touchend', this.onDragEnd);\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.draggable !== this.props.draggable) {\n        this.props.draggable ? this.bindDragEvents() : this.unbindDragEvents();\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.props.onClose(this.props.children.props);\n\n      if (this.props.draggable) {\n        this.unbindDragEvents();\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          closeButton = _props.closeButton,\n          children = _props.children,\n          autoClose = _props.autoClose,\n          pauseOnHover = _props.pauseOnHover,\n          closeOnClick = _props.closeOnClick,\n          type = _props.type,\n          hideProgressBar = _props.hideProgressBar,\n          closeToast = _props.closeToast,\n          Transition = _props.transition,\n          position = _props.position,\n          onExited = _props.onExited,\n          className = _props.className,\n          bodyClassName = _props.bodyClassName,\n          progressClassName = _props.progressClassName,\n          updateId = _props.updateId,\n          role = _props.role,\n          rtl = _props.rtl;\n      var toastProps = {\n        className: (0, _classnames2.default)('Toastify__toast', 'Toastify__toast--' + type, {\n          'Toastify__toast--rtl': rtl\n        }, className)\n      };\n\n      if (autoClose && pauseOnHover) {\n        toastProps.onMouseEnter = this.pauseToast;\n        toastProps.onMouseLeave = this.playToast;\n      } // prevent toast from closing when user drags the toast\n\n\n      if (closeOnClick) {\n        toastProps.onClick = function () {\n          return _this2.flag.canCloseOnClick && closeToast();\n        };\n      }\n\n      return _react2.default.createElement(Transition, {\n        'in': this.props.in,\n        appear: true,\n        unmountOnExit: true,\n        onExited: onExited,\n        position: position,\n        preventExitTransition: this.state.preventExitTransition\n      }, _react2.default.createElement('div', _extends({}, toastProps, {\n        ref: function ref(_ref2) {\n          return _this2.ref = _ref2;\n        },\n        onMouseDown: this.onDragStart,\n        onTouchStart: this.onDragStart,\n        onTransitionEnd: this.onDragTransitionEnd\n      }), _react2.default.createElement('div', _extends({}, this.props.in && {\n        role: role\n      }, {\n        className: (0, _classnames2.default)('Toastify__toast-body', bodyClassName)\n      }), children), closeButton !== false && closeButton, autoClose !== false && _react2.default.createElement(_ProgressBar2.default, _extends({}, updateId ? {\n        key: 'pb-' + updateId\n      } : {}, {\n        rtl: rtl,\n        delay: autoClose,\n        isRunning: this.state.isRunning,\n        closeToast: closeToast,\n        hide: hideProgressBar,\n        type: type,\n        className: progressClassName\n      }))));\n    }\n  }]);\n\n  return Toast;\n}(_react.Component);\n\nToast.propTypes = {\n  closeButton: _propValidator.falseOrElement.isRequired,\n  autoClose: _propValidator.falseOrDelay.isRequired,\n  children: _propTypes2.default.node.isRequired,\n  closeToast: _propTypes2.default.func.isRequired,\n  position: _propTypes2.default.oneOf((0, _propValidator.objectValues)(_constant.POSITION)).isRequired,\n  pauseOnHover: _propTypes2.default.bool.isRequired,\n  closeOnClick: _propTypes2.default.bool.isRequired,\n  transition: _propTypes2.default.func.isRequired,\n  isDocumentHidden: _propTypes2.default.bool.isRequired,\n  rtl: _propTypes2.default.bool.isRequired,\n  hideProgressBar: _propTypes2.default.bool.isRequired,\n  draggable: _propTypes2.default.bool.isRequired,\n  draggablePercent: _propTypes2.default.number.isRequired,\n  in: _propTypes2.default.bool,\n  onExited: _propTypes2.default.func,\n  onOpen: _propTypes2.default.func,\n  onClose: _propTypes2.default.func,\n  type: _propTypes2.default.oneOf((0, _propValidator.objectValues)(_constant.TYPE)),\n  className: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),\n  bodyClassName: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),\n  progressClassName: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),\n  updateId: _propTypes2.default.number,\n  ariaLabel: _propTypes2.default.string\n};\nToast.defaultProps = {\n  type: _constant.TYPE.DEFAULT,\n  in: true,\n  onOpen: noop,\n  onClose: noop,\n  className: null,\n  bodyClassName: null,\n  progressClassName: null,\n  updateId: null,\n  role: 'alert'\n};\nexports.default = Toast;","map":null,"metadata":{},"sourceType":"script"}