{"ast":null,"code":"export default function (p) {\n  p.preload = function () {\n    p.myCustomRedrawAccordingToNewPropsHandler = function (props) {\n      p.degree = 45; //this should be entered by the user check\n\n      p.theta = p.degree * Math.PI / 180; //console.log(p.theta);\n\n      p.xPosition = 500 / Math.tan(p.theta);\n      p.radius = 25;\n      p.ellipseX = Math.sin(p.theta) * p.radius;\n      p.ellipseY = 100 - Math.cos(p.theta) * p.radius;\n      p.njteh = 100 - p.radius / Math.cos(p.theta);\n      p.slope = Math.tan(p.theta);\n      p.g = 10;\n      p.Myu = 0.1; //friction coefficent\n\n      p.mass = 5;\n      p.v = 5;\n      p.acc = p.g * Math.cos(p.theta) - p.Myu * Math.sin(p.theta); //formula with njteh\n\n      p.vx = 0;\n    };\n  };\n\n  p.setup = function () {\n    p.createCanvas(1000, 600);\n  };\n\n  p.draw = function () {\n    p.background(200, 250, 100);\n    p.fill(\"blue\");\n    p.triangle(0, 100, 0, 600, p.xPosition, 600); //for the most part\n\n    p.fill(\"red\");\n    p.ellipse(p.ellipseX, p.ellipseY, p.radius * 2);\n    p.Calculate();\n  };\n\n  p.Calculate = function () {\n    p.vx = p.vx + p.acc * Math.cos(p.theta);\n    p.ellipseX += p.vx / 60;\n    p.ellipseY = p.slope * p.ellipseX + p.njteh;\n  };\n}","map":{"version":3,"sources":["C:\\Users\\Mgo\\PhpstormProjects\\untitled\\src\\Component\\sketch3.js"],"names":["p","preload","myCustomRedrawAccordingToNewPropsHandler","props","degree","theta","Math","PI","xPosition","tan","radius","ellipseX","sin","ellipseY","cos","njteh","slope","g","Myu","mass","v","acc","vx","setup","createCanvas","draw","background","fill","triangle","ellipse","Calculate"],"mappings":"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","sourcesContent":["export default function(p) {\r\n\r\n\r\n\r\n        p.preload = () => {\r\n            p.myCustomRedrawAccordingToNewPropsHandler = function(props) {\r\n\r\n                p.degree = 45; //this should be entered by the user check\r\n                p.theta = (p.degree * Math.PI) / 180;\r\n                //console.log(p.theta);\r\n                p.xPosition = 500 / Math.tan(p.theta);\r\n                p.radius = 25;\r\n                p.ellipseX = Math.sin(p.theta) * p.radius;\r\n                p.ellipseY = 100 - Math.cos(p.theta) * p.radius;\r\n                p.njteh = 100 - p.radius / Math.cos(p.theta);\r\n                p.slope = Math.tan(p.theta);\r\n                p.g = 10;\r\n                p.Myu = 0.1; //friction coefficent\r\n                p.mass = 5;\r\n                p.v = 5;\r\n                p.acc = p.g * Math.cos(p.theta) - p.Myu * Math.sin(p.theta); //formula with njteh\r\n                p.vx = 0;\r\n    };\r\n  };\r\n  p.setup = function() {\r\n    p.createCanvas(1000, 600);\r\n  };\r\n\r\n  p.draw = function() {\r\n    p.background(200, 250, 100);\r\n    p.fill(\"blue\");\r\n    p.triangle(0, 100, 0, 600, p.xPosition, 600); //for the most part\r\n    p.fill(\"red\");\r\n    p.ellipse(p.ellipseX, p.ellipseY, p.radius * 2);\r\n    p.Calculate();\r\n  };\r\n\r\n  p.Calculate = () => {\r\n    p.vx = p.vx + p.acc * Math.cos(p.theta);\r\n    p.ellipseX += p.vx / 60;\r\n    p.ellipseY = p.slope * p.ellipseX + p.njteh;\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}