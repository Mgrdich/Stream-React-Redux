{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Mgo\\\\PhpstormProjects\\\\untitled\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Mgo\\\\PhpstormProjects\\\\untitled\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { SIGN_OUT, SIGN_IN, CREATE_STREAM, DELETE_STREAM, EDIT_STREAM, FETCH_STREAM, FETCH_STREAMS } from \"./types\";\nimport streams from \"../apis/streams\";\nexport var SignIn = function SignIn(GoogleId) {\n  return {\n    type: SIGN_IN,\n    payload: {\n      //remeber in video is different\n      id: GoogleId\n    }\n  };\n};\nexport var SignOut = function SignOut() {\n  return {\n    type: SIGN_OUT\n  };\n};\nexport var createStream = function createStream(formValues) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n        var _getState$auth, userId, response;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _getState$auth = getState.auth(), userId = _getState$auth.userId;\n                _context.next = 3;\n                return streams.post(\"/streams\", formValues);\n\n              case 3:\n                response = _context.sent;\n                //giving the form values so in order the\n                dispatch({\n                  type: CREATE_STREAM,\n                  payload: response.data\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var fetchStreams = function fetchStreams() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return streams.get(\"/streams\");\n\n              case 2:\n                response = _context2.sent;\n                //to get the array\n                dispatch({\n                  type: FETCH_STREAMS,\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var fetchStream = function fetchStream(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return streams.get(\"/streams/\".concat(id));\n\n              case 2:\n                response = _context3.sent;\n                //to get the array\n                dispatch({\n                  type: FETCH_STREAM,\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x4) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var editStream = function editStream(id, formValues) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return streams.put(\"/streams/\".concat(id), formValues);\n\n              case 2:\n                response = _context4.sent;\n                dispatch({\n                  type: EDIT_STREAM,\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x5) {\n        return _ref4.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var deleteStream = function deleteStream(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return streams.delete(\"/streams/\".concat(id));\n\n              case 2:\n                dispatch({\n                  type: DELETE_STREAM,\n                  payload: id\n                });\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x6) {\n        return _ref5.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["C:\\Users\\Mgo\\PhpstormProjects\\untitled\\src\\actions\\index.js"],"names":["SIGN_OUT","SIGN_IN","CREATE_STREAM","DELETE_STREAM","EDIT_STREAM","FETCH_STREAM","FETCH_STREAMS","streams","SignIn","GoogleId","type","payload","id","SignOut","createStream","formValues","dispatch","getState","auth","userId","post","response","data","fetchStreams","get","fetchStream","editStream","put","deleteStream","delete"],"mappings":"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","sourcesContent":["import {\r\n  SIGN_OUT,\r\n  SIGN_IN,\r\n  CREATE_STREAM,\r\n  DELETE_STREAM,\r\n  EDIT_STREAM,\r\n  FETCH_STREAM,\r\n  FETCH_STREAMS\r\n} from \"./types\";\r\n\r\nimport streams from \"../apis/streams\";\r\n\r\nexport const SignIn = GoogleId => {\r\n  return {\r\n    type: SIGN_IN,\r\n    payload: {\r\n      //remeber in video is different\r\n      id: GoogleId\r\n    }\r\n  };\r\n};\r\nexport const SignOut = () => {\r\n  return {\r\n    type: SIGN_OUT\r\n  };\r\n};\r\n\r\nexport const createStream = formValues => {\r\n  return async (dispatch,getState) => {\r\n    const {userId} = getState.auth();\r\n    const response = await streams.post(\"/streams\", formValues); //giving the form values so in order the\r\n    dispatch({ type: CREATE_STREAM, payload: response.data });\r\n  };\r\n};\r\n\r\nexport const fetchStreams = () => {\r\n  return async dispatch => {\r\n    //the async action creator\r\n    const response = await streams.get(\"/streams\"); //to get the array\r\n\r\n    dispatch({ type: FETCH_STREAMS, payload: response.data });\r\n  };\r\n};\r\n\r\nexport const fetchStream = id => {\r\n  return async dispatch => {\r\n    const response = await streams.get(`/streams/${id}`); //to get the array\r\n    dispatch({ type: FETCH_STREAM, payload: response.data });\r\n  };\r\n};\r\n\r\nexport const editStream = (id, formValues) => {\r\n  return async dispatch => {\r\n    const response = await streams.put(`/streams/${id}`, formValues);\r\n    dispatch({ type: EDIT_STREAM, payload: response.data });\r\n  };\r\n};\r\n\r\nexport const deleteStream = id => {\r\n  return async dispatch => {\r\n     await streams.delete(`/streams/${id}`);\r\n    dispatch({ type: DELETE_STREAM, payload: id });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}