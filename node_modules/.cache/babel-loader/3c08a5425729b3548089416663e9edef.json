{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Mgo\\\\PhpstormProjects\\\\untitled\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Mgo\\\\PhpstormProjects\\\\untitled\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport jsonPlaceHolder from \"../api/jsonPlaceHolder\";\nimport _ from \"lodash\"; //this is an async action creator which well go exaclty with our\n//way of fetching data\n\nexport var fetchPosts = function fetchPosts() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return jsonPlaceHolder.get(\"/posts\");\n\n              case 2:\n                response = _context.sent;\n                dispatch({\n                  type: \"FETCH_POSTS\",\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var fetchUser = function fetchUser(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return jsonPlaceHolder.get(\"/users/\".concat(id));\n\n              case 2:\n                response = _context2.sent;\n                dispatch({\n                  type: \"FETCH_USER\",\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n};\n/*\r\nexport const fetchUser = (id) => dispatch =>{\r\n  _fetchUser(id,dispatch);//this a method\r\n};\r\n\r\nconst _fetchUser =_.memoize(async (id,dispatch) =>{\r\n  const response = await jsonPlaceHolder.get(`/users/${id}`);\r\n  dispatch({type: \"FETCH_USER\", payload: response.data});\r\n});*/\n\nexport var fetchPostsAndUsers = function fetchPostsAndUsers() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch, getState) {\n        var userId;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                console.log('about to fetch');\n                _context3.next = 3;\n                return dispatch(fetchPosts());\n\n              case 3:\n                //for waiting for it\n                //console.log(getState().posts)\n                userId = _.uniq(_.map(getState().posts, 'userId'));\n                console.log(_.map(getState().posts, 'userId'));\n                console.log('fetched');\n                userId.forEach(function (id) {\n                  return dispatch(fetchUser(id));\n                }); //no other logic so no await because no code\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3, _x4) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["C:\\Users\\Mgo\\PhpstormProjects\\untitled\\src\\actions\\index.js"],"names":["jsonPlaceHolder","_","fetchPosts","dispatch","get","response","type","payload","data","fetchUser","id","fetchPostsAndUsers","getState","console","log","userId","uniq","map","posts","forEach"],"mappings":";;AAAA,OAAOA,eAAP,MAA4B,wBAA5B;AACA,OAAOC,CAAP,MAAc,QAAd,C,CAEA;AACA;;AACA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAC9B;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACkBH,eAAe,CAACI,GAAhB,CAAoB,QAApB,CADlB;;AAAA;AACCC,gBAAAA,QADD;AAELF,gBAAAA,QAAQ,CAAC;AAAEG,kBAAAA,IAAI,EAAE,aAAR;AAAuBC,kBAAAA,OAAO,EAAEF,QAAQ,CAACG;AAAzC,iBAAD,CAAR;;AAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAID,CALM;AAOP,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAI,kBAAMP,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACNH,eAAe,CAACI,GAAhB,kBAA8BM,EAA9B,EADM;;AAAA;AACvBL,gBAAAA,QADuB;AAE7BF,gBAAAA,QAAQ,CAAC;AAAEG,kBAAAA,IAAI,EAAE,YAAR;AAAsBC,kBAAAA,OAAO,EAAEF,QAAQ,CAACG;AAAxC,iBAAD,CAAR;;AAF6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;AAKP;;;;;;;;;;AAUA,OAAO,IAAMG,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAM,kBAAOR,QAAP,EAAgBS,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACtCC,gBAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AADsC;AAAA,uBAEhCX,QAAQ,CAACD,UAAU,EAAX,CAFwB;;AAAA;AAET;AAC7B;AACKa,gBAAAA,MAJiC,GAI1Bd,CAAC,CAACe,IAAF,CAAQf,CAAC,CAACgB,GAAF,CAAML,QAAQ,GAAGM,KAAjB,EAAuB,QAAvB,CAAR,CAJ0B;AAKvCL,gBAAAA,OAAO,CAACC,GAAR,CAAab,CAAC,CAACgB,GAAF,CAAML,QAAQ,GAAGM,KAAjB,EAAuB,QAAvB,CAAb;AACCL,gBAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAC,gBAAAA,MAAM,CAACI,OAAP,CAAe,UAAAT,EAAE;AAAA,yBAAEP,QAAQ,CAACM,SAAS,CAACC,EAAD,CAAV,CAAV;AAAA,iBAAjB,EAPsC,CAOM;;AAPN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B","sourcesContent":["import jsonPlaceHolder from \"../api/jsonPlaceHolder\";\r\nimport _ from \"lodash\";\r\n\r\n//this is an async action creator which well go exaclty with our\r\n//way of fetching data\r\nexport const fetchPosts = () => {\r\n  return async dispatch => {\r\n    const response = await jsonPlaceHolder.get(\"/posts\");\r\n    dispatch({ type: \"FETCH_POSTS\", payload: response.data });\r\n  };\r\n};\r\n\r\nexport const fetchUser = id => async dispatch => {\r\n  const response = await jsonPlaceHolder.get(`/users/${id}`);\r\n  dispatch({ type: \"FETCH_USER\", payload: response.data });\r\n};\r\n\r\n/*\r\nexport const fetchUser = (id) => dispatch =>{\r\n  _fetchUser(id,dispatch);//this a method\r\n};\r\n\r\nconst _fetchUser =_.memoize(async (id,dispatch) =>{\r\n  const response = await jsonPlaceHolder.get(`/users/${id}`);\r\n  dispatch({type: \"FETCH_USER\", payload: response.data});\r\n});*/\r\n\r\nexport const fetchPostsAndUsers = () => async (dispatch,getState) => {\r\n  console.log('about to fetch');\r\n  await dispatch(fetchPosts());//for waiting for it\r\n  //console.log(getState().posts)\r\n const userId=_.uniq( _.map(getState().posts,'userId'));\r\n console.log( _.map(getState().posts,'userId'));\r\n  console.log('fetched');\r\n  userId.forEach(id=>dispatch(fetchUser(id)));//no other logic so no await because no code\r\n\r\n};\r\n"]},"metadata":{},"sourceType":"module"}