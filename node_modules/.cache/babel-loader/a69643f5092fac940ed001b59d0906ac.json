{"ast":null,"code":"export default function (p) {\n  p.props = {};\n  console.log(p.mgo);\n  p.velocity1Intial = 10;\n  p.velocity2Intial = -20;\n  p.mass1 = 20;\n  p.mass2 = 10;\n  p.TMass = p.mass1 + p.mass2;\n  p.height1 = 100;\n  p.height2 = 150;\n  p.width1 = 100;\n  p.width2 = 100;\n  p.x1 = p.width1 / 2;\n  p.remainder = (1000 - p.width2 / 2 - p.width1 / 2) % (p.velocity1Intial + -p.velocity2Intial);\n  p.x2 = 1000 - p.width2 / 2;\n  p.DetectCollison = false;\n  p.Inelastic = true;\n\n  p.setup = function () {\n    p.createCanvas(1000, 600);\n  };\n\n  p.draw = function () {\n    if (!p.Inelastic) CollisionDetectElastic();else {\n      CollisonInelastic();\n    }\n    p.background(0);\n    p.rectMode(p.CENTER);\n    p.fill(\"green\");\n    p.rect(p.x1, 200, p.width1, p.height1, 20);\n    p.fill(255, 204, 0);\n    p.rect(p.x2, 200, p.width2, p.height2, 20);\n  };\n\n  var CollisionDetectElastic = function CollisionDetectElastic() {\n    var velocity2Final = (2 * p.mass1 * p.velocity1Intial + p.velocity2Intial * (p.mass2 - p.mass1)) / p.TMass;\n    var velocity1Final = (2 * p.mass2 * p.velocity2Intial + p.velocity1Intial * (p.mass1 - p.mass2)) / p.TMass;\n    /*   console.log(\"Vf2=\", velocity2Final);\r\n      console.log(\"V1f=\", velocity1Final);*/\n\n    var distance = p.dist(p.x1, 200, p.x2, 200); // console.log(distance);\n\n    if (distance <= (p.width1 + p.width2) / 2 + p.remainder && distance <= (p.width1 + p.width2) / 2 - p.remainder || p.DetectCollison) {\n      p.DetectCollison = true;\n      p.x1 += velocity1Final;\n      p.x2 += velocity2Final;\n    } else if (!p.DetectCollison) {\n      p.x1 += p.velocity1Intial;\n      p.x2 += p.velocity2Intial;\n    }\n  };\n\n  var CollisonInelastic = function CollisonInelastic() {\n    var TVelocity = (p.mass1 * p.velocity1Intial + p.mass2 * p.velocity2Intial) / p.TMass;\n    var distance = p.dist(p.x1, 200, p.x2, 200);\n\n    if (distance <= (p.width1 + p.width2) / 2 + p.remainder && distance <= (p.width1 + p.width2) / 2 - p.remainder || p.DetectCollison) {\n      p.DetectCollison = true;\n      p.x1 += TVelocity;\n      p.x2 += TVelocity;\n    }\n\n    if (!p.DetectCollison) {\n      p.x1 += p.velocity1Intial;\n      p.x2 += p.velocity2Intial;\n    }\n  };\n}\n;","map":{"version":3,"sources":["C:\\Users\\Mgo\\PhpstormProjects\\untitled\\src\\Component\\sketch1.js"],"names":["p","props","console","log","mgo","velocity1Intial","velocity2Intial","mass1","mass2","TMass","height1","height2","width1","width2","x1","remainder","x2","DetectCollison","Inelastic","setup","createCanvas","draw","CollisionDetectElastic","CollisonInelastic","background","rectMode","CENTER","fill","rect","velocity2Final","velocity1Final","distance","dist","TVelocity"],"mappings":"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","sourcesContent":["export default function  ( p ) {\r\n    p.props={};\r\n    console.log(p.mgo);\r\n\r\n    p.velocity1Intial = 10;\r\n    p.velocity2Intial = -20;\r\n    p.mass1 = 20;\r\n    p.mass2 = 10;\r\n    p.TMass = p.mass1 + p.mass2;\r\n    p.height1 = 100;\r\n    p.height2 = 150;\r\n    p.width1 = 100;\r\n    p.width2 = 100;\r\n    p.x1 = p.width1 / 2;\r\n    p.remainder =\r\n        (1000 - p.width2 / 2 - p.width1 / 2) %\r\n        (p.velocity1Intial + -p.velocity2Intial);\r\n    p.x2 = 1000 - p.width2 / 2;\r\n    p.DetectCollison = false;\r\n    p.Inelastic = true;\r\n\r\n    p.setup = () => {\r\n        p.createCanvas(1000, 600);\r\n    };\r\n\r\n    p.draw = () => {\r\n        if (!p.Inelastic) CollisionDetectElastic();\r\n        else {\r\n            CollisonInelastic();\r\n        }\r\n        p.background(0);\r\n        p.rectMode(p.CENTER);\r\n        p.fill(\"green\");\r\n        p.rect(p.x1, 200, p.width1, p.height1, 20);\r\n        p.fill(255, 204, 0);\r\n        p.rect(p.x2, 200, p.width2, p.height2, 20);\r\n    };\r\n\r\n    const CollisionDetectElastic = () => {\r\n        let velocity2Final =\r\n            (2 * p.mass1 * p.velocity1Intial +\r\n                p.velocity2Intial * (p.mass2 - p.mass1)) /\r\n            p.TMass;\r\n        let velocity1Final =\r\n            (2 * p.mass2 * p.velocity2Intial +\r\n                p.velocity1Intial * (p.mass1 - p.mass2)) /\r\n            p.TMass;\r\n\r\n        /*   console.log(\"Vf2=\", velocity2Final);\r\n          console.log(\"V1f=\", velocity1Final);*/\r\n\r\n        let distance = p.dist(p.x1, 200, p.x2, 200);\r\n\r\n        // console.log(distance);\r\n\r\n        if (\r\n            (distance <= (p.width1 + p.width2) / 2 + p.remainder &&\r\n                distance <= (p.width1 + p.width2) / 2 - p.remainder) ||\r\n            p.DetectCollison\r\n        ) {\r\n            p.DetectCollison = true;\r\n            p.x1 += velocity1Final;\r\n            p.x2 += velocity2Final;\r\n        } else if (!p.DetectCollison) {\r\n            p.x1 += p.velocity1Intial;\r\n            p.x2 += p.velocity2Intial;\r\n        }\r\n    };\r\n\r\n    const  CollisonInelastic = () => {\r\n        let TVelocity =\r\n            (p.mass1 * p.velocity1Intial + p.mass2 * p.velocity2Intial) / p.TMass;\r\n        let distance = p.dist(p.x1, 200, p.x2, 200);\r\n        if (\r\n            (distance <= (p.width1 + p.width2) / 2 + p.remainder &&\r\n                distance <= (p.width1 + p.width2) / 2 - p.remainder) ||\r\n            p.DetectCollison\r\n        ) {\r\n\r\n            p.DetectCollison = true;\r\n            p.x1 += TVelocity;\r\n            p.x2 += TVelocity;\r\n        }\r\n        if (!p.DetectCollison) {\r\n            p.x1 += p.velocity1Intial;\r\n            p.x2 += p.velocity2Intial;\r\n        }\r\n    };\r\n};\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}